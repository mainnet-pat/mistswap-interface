{"version":3,"file":"../pages/migrate.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;AAEO,MAAME,MAAgD,GAAG;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD;AAAA,MAA2BC,IAA3B;;AAAA,sBAC9D;AAAK,aAAS,EAAEJ,gEAAU,CAAC,8BAAD,EAAiCG,SAAjC;AAA1B,KAA2EC,IAA3E;AAAA,cACGF;AADH,KAD8D;AAAA,CAAzD;AAMA,MAAMG,YAAsD,GAAG;AAAA,MAAC;AAAEH,IAAAA;AAAF,GAAD;AAAA,MAAgBE,IAAhB;;AAAA,sBACpE,KAAC,MAAD;AAAQ,aAAS,EAAC;AAAlB,KAA4CA,IAA5C;AAAA,cACGF;AADH,KADoE;AAAA,CAA/D;AAWA,MAAMI,UAAsE,GAAG;AAAA,MAAC;AACrFJ,IAAAA,QADqF;AAErFC,IAAAA,SAFqF;AAGrFI,IAAAA,GAHqF;AAIrFC,IAAAA,OAJqF;AAKrFC,IAAAA;AALqF,GAAD;AAAA,MAMjFL,IANiF;;AAAA,sBAQpF;AACE,aAAS,EAAEJ,gEAAU,CAAC,MAAD,EAASG,SAAT,CADvB;AAEE,SAAK;AACHO,MAAAA,UAAU,EAAGH,GAAG,KAAK,IAAR,IAAgB,KAAjB,IAA4BA,GAAG,KAAK,IAAR,IAAgB,MAA5C,IAAwDA,GAAG,KAAK,IAAR,IAAgB,MAAxE,IAAmFA,GAD5F;AAEHI,MAAAA,YAAY,EAAEH,OAAO,IAAIA;AAFtB,OAGAC,KAHA;AAFP,KAOML,IAPN;AAAA,cASGF;AATH,KARoF;AAAA,CAA/E;AAqBP,iEAAeD,MAAf;;;;;;;;;;;;;;;;;;;;;ACxCA;AAIA;AAEA;AAIA;AAeA;;;AAEA,MAAMc,IAAI,GAAGH,yDAAA,CAAY,CAAZ,CAAb;AAEA,MAAMK,oBAAoB,GAAGJ,wDAAM,CAACC,+EAAD,CAAT;AAAA;AAAA;AAAA,4BAA1B;;AAIA,MAAMK,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwC;AACxD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWG,sBACE;AAAA,2BACG;AADH,IADF;AAMF,CArGD;;AA+GA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,QAAX;AAAqBC,EAAAA,UAArB;AAAiCC,EAAAA,QAAjC;AAA2CC,EAAAA;AAA3C,CAAD,KAA8E;AAChG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,sBACI,eADJ;AAIF,CAxBD;;AA0BA,MAAMC,iBAAiB,GAAG,CAAC;AAAEP,EAAAA;AAAF,CAAD,KAAwC;AAC9D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGG,sBACE;AAAA,2BACG;AADH,IADF;AAMF,CArDD;;AAuDA,MAAMQ,cAAc,GAAG,CAAC;AAAER,EAAAA,KAAF;AAASM,EAAAA;AAAT,CAAD,KAAgF;AACnG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUC,CAvFD;;AAyFA,MAAMG,sBAAsB,GAAG,CAAC;AAAET,EAAAA,KAAF;AAASM,EAAAA;AAAT,CAAD,KAAgF;AAC3G,WAASH,QAAT,CAAkBD,OAAlB,EAA8C;AAC1CF,IAAAA,KAAK,CAACU,kBAAN,CAAyBV,KAAK,CAACW,eAAN,KAA0BT,OAA1B,GAAoCA,OAApC,GAA8CU,SAAvE;AACAZ,IAAAA,KAAK,CAACa,SAAN,CAAgB,EAAhB;AACH;;AAED,MAAI,CAACb,KAAK,CAACc,IAAX,EAAiB;AACb,WAAO,IAAP;AACH;;AAED,MAAId,KAAK,CAACe,QAAN,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,wBACI,KAAC,UAAD;AAAY,WAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,GAAb;AAAkBC,QAAAA,cAAc,EAAE,QAAlC;AAA4CC,QAAAA,UAAU,EAAE;AAAxD,OAAnB;AAAA,6BACI;AAAK,iBAAS,EAAC,aAAf;AAAA;AAAA;AADJ,MADJ;AAOH;;AAED,sBACI;AAAA,cACKnB,KAAK,CAACe,QAAN,CAAeK,MAAf,CAAqC,CAACC,GAAD,EAAMnB,OAAN,KAAkB;AACpD,UAAKA,OAAO,CAACoB,OAAT,CAA2CC,WAA3C,CAAuD,CAAvD,CAAJ,EAA+D;AAC3DF,QAAAA,GAAG,CAACG,IAAJ,eACI,KAAC,aAAD;AACI,iBAAO,EAAEtB,OADb;AAEI,kBAAQ,EAAEC,QAFd;AAGI,oBAAU,EAAEH,KAAK,CAACW,eAAN,KAA0BT,OAH1C;AAII,kBAAQ,EAAEF,KAAK,CAACyB,gBAJpB;AAKI,kBAAQ,EAAEnB;AALd,UADJ;AASH;;AACD,aAAOe,GAAP;AACH,KAbA,EAaE,EAbF;AADL,IADJ;AAkBH,CAtCD;;AAwCe,SAASK,SAAT,GAAqB;AAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASE,sBACE,6DADF;AAKD;;;;;;;AC1bD;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA","sources":["webpack://mistswap-interface/./src/components/Column/index.tsx","webpack://mistswap-interface/./src/pages/migrate/index.tsx","webpack://mistswap-interface/external \"@ethersproject/abi\"","webpack://mistswap-interface/external \"@ethersproject/address\"","webpack://mistswap-interface/external \"@ethersproject/bignumber\"","webpack://mistswap-interface/external \"@ethersproject/constants\"","webpack://mistswap-interface/external \"@ethersproject/contracts\"","webpack://mistswap-interface/external \"@ethersproject/hash\"","webpack://mistswap-interface/external \"@ethersproject/units\"","webpack://mistswap-interface/external \"@mistswapdex/sdk\"","webpack://mistswap-interface/external \"@reduxjs/toolkit\"","webpack://mistswap-interface/external \"@web3-react/core\"","webpack://mistswap-interface/external \"ajv\"","webpack://mistswap-interface/external \"cids\"","webpack://mistswap-interface/external \"multicodec\"","webpack://mistswap-interface/external \"multihashes\"","webpack://mistswap-interface/external \"numeral\"","webpack://mistswap-interface/external \"react\"","webpack://mistswap-interface/external \"react-redux\"","webpack://mistswap-interface/external \"react/jsx-runtime\"","webpack://mistswap-interface/external \"styled-components\""],"sourcesContent":["import React, { FC } from 'react'\n\nimport { classNames } from '../../functions'\n\nexport const Column: FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, className, ...rest }) => (\n  <div className={classNames('flex flex-col justify-center', className)} {...rest}>\n    {children}\n  </div>\n)\n\nexport const ColumnCenter: FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...rest }) => (\n  <Column className=\"items-center w-full\" {...rest}>\n    {children}\n  </Column>\n)\n\ninterface AutoColumnProps {\n  gap?: 'sm' | 'md' | 'lg' | string\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}\n\nexport const AutoColumn: FC<React.HTMLAttributes<HTMLDivElement> & AutoColumnProps> = ({\n  children,\n  className,\n  gap,\n  justify,\n  style,\n  ...rest\n}) => (\n  <div\n    className={classNames('grid', className)}\n    style={{\n      gridRowGap: (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap,\n      justifyItems: justify && justify,\n      ...style,\n    }}\n    {...rest}\n  >\n    {children}\n  </div>\n)\n\nexport default Column\n","import { AddressZero } from '@ethersproject/constants'\nimport { formatUnits, parseUnits } from '@ethersproject/units'\nimport { ChainId, Token, CurrencyAmount, JSBI } from '@mistswapdex/sdk'\nimport { useSushiRollContract } from '../../hooks/useContract'\nimport { useLingui } from '@lingui/react'\nimport { t } from '@lingui/macro'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { ChevronRight } from 'react-feather'\nimport styled from 'styled-components'\nimport Button from '../../components/Button'\nimport { ButtonConfirmed } from '../../components/Button'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport Input from '../../components/Input'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport Dots from '../../components/Dots'\nimport { useActiveWeb3React } from '../../hooks'\nimport { tryParseAmount } from '../../functions/parse'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useMigrateState, { MigrateState } from '../../hooks/useMigrateState'\nimport CloseIcon from '../../components/CloseIcon';\n// import LPToken from '../../types/LPToken'\n// import MetamaskError from '../../types/MetamaskError'\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport Typography from '../../components/Typography'\nimport Badge from '../../components/Badge'\nimport Container from '../../components/Container'\nimport { AutoColumn } from '../../components/Column'\n\nconst ZERO = JSBI.BigInt(0)\n\nconst StyledNumericalInput = styled(Input.Numeric)`\n  caret-color: #e3e3e3;\n`\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    /*\n    const { i18n } = useLingui()\n    const onPressMax = useCallback(() => {\n        if (state.selectedLPToken) {\n            let bal = state.selectedLPToken.balance as CurrencyAmount<Token>\n            if (state.selectedLPToken.address === AddressZero) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16))\n                bal = bal.greaterThan(fee) ? bal.subtract(fee) : ZERO\n            }\n\n            state.setAmount(bal.toFixed())\n        }\n    }, [state])\n\n    useEffect(() => {\n        if (!state.mode || state.lpTokens.length === 0 || !state.selectedLPToken) {\n            state.setAmount('')\n        }\n    }, [state])\n\n    if (!state.mode || state.lpTokens.length === 0 || !state.selectedLPToken) {\n        return null\n    }\n\n    const input = state.amount ? state.amount : ''\n\n    const formattedBalance = state.selectedLPToken.balance.toSignificant(4)\n\n    const parsedAmount = tryParseAmount(input, state.selectedLPToken)\n\n    const insufficientAmount = (input && input === '0') || parsedAmount && parsedAmount.greaterThan(state.selectedLPToken.balance)\n    const inputError = insufficientAmount\n\n    return (\n        <>\n            <Typography variant=\"caption\" className=\"text-secondary\">\n                Amount of Tokens\n            </Typography>\n\n            <div className=\"flex items-center relative w-full mb-4\">\n              <div className=\"w-full\">\n                <StyledNumericalInput\n                  value={input}\n                  onUserInput={val => state.setAmount(val)}\n                  className={`w-full h-14 px-3 md:px-5 mt-5 rounded bg-dark-800 text-sm md:text-lg font-bold text-dark-800 whitespace-nowrap${\n                    inputError ? ' pl-9 md:pl-12' : ''\n                  }`}\n                  placeholder=\" \"\n                />\n                <div className=\"relative w-full h-0 pointer-events-none bottom-14\">\n                  <div\n                    className={`flex justify-between items-center h-14 rounded px-3 md:px-5 ${\n                      inputError ? ' border border-red' : ''\n                    }`}\n                  >\n                    <div className=\"flex space-x-2 \">\n                      {inputError && (\n                        <Image\n                          className=\"mr-2 max-w-4 md:max-w-5\"\n                          src=\"/error-triangle.svg\"\n                          alt=\"error\"\n                          width=\"20px\"\n                          height=\"20px\"\n                        />\n                      )}\n                      <p\n                        className={`text-sm md:text-lg font-bold whitespace-nowrap ${\n                          input ? 'text-high-emphesis' : 'text-secondary'\n                        }`}\n                      >\n                        {`${input ? input : '0'} LP`}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-sm text-secondary md:text-base\">\n                      <div className={input ? 'hidden md:flex md:items-center' : 'flex items-center'}>\n                        <p>{i18n._(t`Balance`)}:&nbsp;</p>\n                        <p className=\"text-base font-bold\">{formattedBalance}</p>\n                      </div>\n                      <button\n                        className=\"px-2 py-1 ml-3 text-xs font-bold border pointer-events-auto focus:outline-none focus:ring hover:bg-opacity-40 md:bg-cyan-blue md:bg-opacity-30 border-secondary md:border-cyan-blue rounded-2xl md:py-1 md:px-3 md:ml-4 md:text-sm md:font-normal md:text-cyan-blue\"\n                        onClick={onPressMax}\n                      >\n                        {i18n._(t`MAX`)}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n        </>\n    )\n    */\n\n   return (\n     <>\n        <div>\n        </div>\n     </>\n   )\n}\n\ninterface PositionCardProps {\n    lpToken: any /* LPToken */\n    onToggle: (lpToken: any /* LPToken */) => void\n    isSelected: boolean\n    updating: boolean\n    exchange: string | undefined\n}\n\nconst LPTokenSelect = ({ lpToken, onToggle, isSelected, updating, exchange }: PositionCardProps) => {\n    /*\n    return (\n        <div\n            key={lpToken.address}\n            className=\"cursor-pointer flex justify-between items-center rounded px-3 py-5 bg-dark-800 hover:bg-dark-700\"\n            onClick={() => onToggle(lpToken)}\n        >\n            <div className=\"flex items-center space-x-3\">\n                <DoubleCurrencyLogo currency0={lpToken.tokenA} currency1={lpToken.tokenB} size={20} />\n                <Typography\n                    variant=\"body\"\n                    className=\"text-primary\"\n                >{`${lpToken.tokenA.symbol}/${lpToken.tokenB.symbol}`}</Typography>\n                {lpToken.version && <Badge color=\"pink\">{lpToken.version}</Badge>}\n            </div>\n            {isSelected ? <CloseIcon /> : <ChevronRight />}\n        </div>\n    )\n    */\n   return (\n       <div>\n       </div>\n   )\n}\n\nconst MigrateModeSelect = ({ state }: { state: MigrateState }) => {\n    /*\n    function toggleMode(mode = undefined) {\n        state.setMode(mode !== state.mode ? mode : undefined)\n    }\n\n    const items = [\n        {\n            key: 'permit',\n            text: 'Non-hardware Wallet',\n            description: 'Migration is done in one-click using your signature (permit)'\n        },\n        {\n            key: 'approve',\n            text: 'Hardware Wallet',\n            description: 'You need to first approve LP tokens and then migrate it'\n        }\n    ]\n\n    return (\n        <>\n            {items.reduce((acc: any, { key, text, description }: any) => {\n                if (state.mode === undefined || key === state.mode)\n                    acc.push(\n                        <div\n                            key={key}\n                            className=\"cursor-pointer flex justify-between items-center rounded p-3 bg-dark-800 hover:bg-dark-700\"\n                            onClick={() => toggleMode(key)}\n                        >\n                            <div>\n                                <div>\n                                    <Typography variant=\"caption\">{text}</Typography>\n                                </div>\n                                <div>\n                                    <Typography variant=\"caption2\" className=\"text-secondary\">\n                                        {description}\n                                    </Typography>\n                                </div>\n                            </div>\n                            {key === state.mode ? <CloseIcon /> : <ChevronRight />}\n                        </div>\n                    )\n                return acc\n            }, [])}\n        </>\n    )\n    */\n   return (\n     <>\n        <div>\n        </div>\n    </>\n   )\n}\n\nconst MigrateButtons = ({ state, exchange }: { state: MigrateState; exchange: string | undefined }) => {\n    /*\n    const [error, setError] = useState<MetamaskError>({})\n    const sushiRollContract = useSushiRollContract(\n        state.selectedLPToken?.version ? state.selectedLPToken?.version : undefined\n    )\n\n    const [approval, approve] = useApproveCallback(state.selectedLPToken?.balance, sushiRollContract?.address)\n    const noLiquidityTokens = !!state.selectedLPToken?.balance && state.selectedLPToken?.balance.equalTo(ZERO)\n    const isButtonDisabled = !state.amount\n\n    useEffect(() => {\n        setError({})\n    }, [state.selectedLPToken])\n\n    if (!state.mode || state.lpTokens.length === 0 || !state.selectedLPToken) {\n        return <span />\n    }\n\n    const input = state.amount ? state.amount : ''\n\n    const formattedBalance = state.selectedLPToken.balance.toSignificant(4)\n\n    const parsedAmount = tryParseAmount(input, state.selectedLPToken)\n\n    const insufficientAmount = parsedAmount && parsedAmount.greaterThan(state.selectedLPToken.balance)\n    const inputError = insufficientAmount\n\n    const onPress = async () => {\n        setError({})\n        try {\n            await state.onMigrate()\n        } catch (e) {\n            console.log(e)\n            setError(e)\n        }\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            {insufficientAmount ? (\n                <div className=\"text-sm text-primary\">Insufficient Balance</div>\n            ) : state.loading ? (\n                <Dots>Loading</Dots>\n            ) : (\n                <>\n                    <div className=\"flex justify-between\">\n                        <div className=\"text-sm text-secondary\">\n                            Balance:{' '}\n                            <span className=\"text-primary\">{formattedBalance}</span>\n                        </div>\n                    </div>\n                    {state.mode === 'approve' && (\n                        <ButtonConfirmed\n                            onClick={approve}\n                            confirmed={approval === ApprovalState.APPROVED}\n                            disabled={approval !== ApprovalState.NOT_APPROVED || isButtonDisabled}\n                            altDisabledStyle={approval === ApprovalState.PENDING}\n                        >\n                            {approval === ApprovalState.PENDING ? (\n                                <Dots>Approving</Dots>\n                            ) : approval === ApprovalState.APPROVED ? (\n                                'Approved'\n                            ) : (\n                                'Approve'\n                            )}\n                        </ButtonConfirmed>\n                    )}\n                    {((state.mode === 'approve' && approval === ApprovalState.APPROVED) || state.mode === 'permit') && (\n                        <ButtonConfirmed\n                            disabled={noLiquidityTokens || state.isMigrationPending || isButtonDisabled}\n                            onClick={onPress}\n                        >\n                            {state.isMigrationPending ? <Dots>Migrating</Dots> : 'Migrate'}\n                        </ButtonConfirmed>\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && (\n                <div className=\"text-red text-center font-medium\">{error.message}</div>\n            )}\n            <div className=\"text-xs text-low-emphesis text-center\">\n                {`Your ${exchange} ${state.selectedLPToken.tokenA.symbol}/${state.selectedLPToken.tokenB.symbol} liquidity will become MistSwap ${state.selectedLPToken.tokenA.symbol}/${state.selectedLPToken.tokenB.symbol} liquidity.`}\n            </div>\n        </div>\n    )\n   */\n}\n\nconst ExchangeLiquidityPairs = ({ state, exchange }: { state: MigrateState; exchange: undefined | string }) => {\n    function onToggle(lpToken: any /* LPToken */) {\n        state.setSelectedLPToken(state.selectedLPToken !== lpToken ? lpToken : undefined)\n        state.setAmount('')\n    }\n\n    if (!state.mode) {\n        return null\n    }\n\n    if (state.lpTokens.length === 0) {\n        return (\n            <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n                <div className=\"font-medium\">\n                    No Liquidity found.\n                </div>\n            </AutoColumn>\n        )\n    }\n\n    return (\n        <>\n            {state.lpTokens.reduce<JSX.Element[]>((acc, lpToken) => {\n                if ((lpToken.balance as CurrencyAmount<Token>).greaterThan(0)) {\n                    acc.push(\n                        <LPTokenSelect\n                            lpToken={lpToken}\n                            onToggle={onToggle}\n                            isSelected={state.selectedLPToken === lpToken}\n                            updating={state.updatingLPTokens}\n                            exchange={exchange}\n                        />\n                    )\n                }\n                return acc\n            }, [])}\n        </>\n    )\n}\n\nexport default function MigrateV2() {\n  /*\n  const { i18n } = useLingui()\n  const { account, chainId } = useActiveWeb3React()\n\n  const state = useMigrateState()\n\n  let exchange\n\n  if (chainId === ChainId.SMARTBCH) {\n      exchange = 'BenSwap'\n  } else if (chainId === ChainId.SMARTBCH_AMBER) {\n      exchange = 'BenSwap Amber'\n  }\n\n  return (\n    <Container id=\"migrate-page\" className=\"py-4 space-y-6 md:py-8 lg:py-12\" maxWidth=\"2xl\">\n      <Head>\n          <title key=\"title\">Migrate LP tokens | Mist</title>\n          <meta\n            key=\"description\"\n            name=\"description\"\n            content=\"Migrate LP tokens to Mist LP tokens\"\n          />\n          <meta key=\"twitter:url\" name=\"twitter:url\" content=\"https://app.mistswap.fi/migrate\" />\n          <meta key=\"twitter:title\" name=\"twitter:title\" content=\"MIGRATE LP\" />\n          <meta\n            key=\"twitter:description\"\n            name=\"twitter:description\"\n            content=\"Migrate LP tokens to Mist LP tokens\"\n          />\n          <meta key=\"twitter:image\" name=\"twitter:image\" content=\"https://app.mistswap.fi/xmist-sign.png\" />\n          <meta key=\"og:title\" property=\"og:title\" content=\"MIGRATE LP\" />\n          <meta key=\"og:url\" property=\"og:url\" content=\"https://app.mistswap.fi/migrate\" />\n          <meta key=\"og:image\" property=\"og:image\" content=\"https://app.mistswap.fi/xmist-sign.png\" />\n          <meta\n            key=\"og:description\"\n            property=\"og:description\"\n            content=\"Migrate LP tokens to Mist LP tokens\"\n          />\n      </Head>\n\n      <div className=\"p-4 mb-3 space-y-3 text-center\">\n        <Typography component=\"h1\" variant=\"h2\">\n          Migrate {exchange} Liquidity\n        </Typography>\n      </div>\n\n\n      <div className=\"p-4 space-y-4 rounded bg-dark-900\">\n          {!account ? (\n              <Typography variant=\"body\" className=\"text-primary text-center p-4\">\n                  Connect to a wallet to view your liquidity.\n              </Typography>\n          ) : state.loading ? (\n              <Typography variant=\"body\" className=\"text-primary text-center p-4\">\n                  <Dots>Loading your {exchange} liquidity positions</Dots>\n              </Typography>\n          ) : (\n              <>\n                  {!state.loading && <Typography variant=\"body\">Your Wallet</Typography>}\n                  <MigrateModeSelect state={state} />\n                  {!state.loading && state.mode && (\n                      <div>\n                          <Typography variant=\"body\">Your Liquidity</Typography>\n                          <Typography variant=\"caption\" className=\"text-secondary\">\n                              Click on a pool below, input the amount you wish to migrate or select max, and click\n                              migrate.\n                          </Typography>\n                      </div>\n                  )}\n\n                  <ExchangeLiquidityPairs state={state} exchange={exchange} />\n                  <AmountInput state={state} />\n                  <MigrateButtons state={state} exchange={exchange} />\n              </>\n          )}\n      </div>\n    </Container>\n  )\n  */\n  return (\n    <div>\n    </div>\n  )\n\n}\n","module.exports = require(\"@ethersproject/abi\");","module.exports = require(\"@ethersproject/address\");","module.exports = require(\"@ethersproject/bignumber\");","module.exports = require(\"@ethersproject/constants\");","module.exports = require(\"@ethersproject/contracts\");","module.exports = require(\"@ethersproject/hash\");","module.exports = require(\"@ethersproject/units\");","module.exports = require(\"@mistswapdex/sdk\");","module.exports = require(\"@reduxjs/toolkit\");","module.exports = require(\"@web3-react/core\");","module.exports = require(\"ajv\");","module.exports = require(\"cids\");","module.exports = require(\"multicodec\");","module.exports = require(\"multihashes\");","module.exports = require(\"numeral\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");","module.exports = require(\"react/jsx-runtime\");","module.exports = require(\"styled-components\");"],"names":["React","classNames","Column","children","className","rest","ColumnCenter","AutoColumn","gap","justify","style","gridRowGap","justifyItems","JSBI","styled","Input","ZERO","BigInt","StyledNumericalInput","Numeric","AmountInput","state","LPTokenSelect","lpToken","onToggle","isSelected","updating","exchange","MigrateModeSelect","MigrateButtons","ExchangeLiquidityPairs","setSelectedLPToken","selectedLPToken","undefined","setAmount","mode","lpTokens","length","minHeight","justifyContent","alignItems","reduce","acc","balance","greaterThan","push","updatingLPTokens","MigrateV2"],"sourceRoot":""}