{"version":3,"file":"6197.js","mappings":"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","sources":["webpack://mistswap-interface/./src/entities/Fraction.ts"],"sourcesContent":["import { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { One, Zero } from '@ethersproject/constants'\nimport { formatBalance, parseBalance } from '../functions'\n\nimport { Fraction as SDKFraction } from '@mistswapdex/sdk'\nimport { isEmptyValue } from '../functions/validate'\n\nclass Fraction {\n  static BASE = BigNumber.from(10).pow(18)\n\n  static NAN = new Fraction(Zero, Zero)\n\n  static ZERO = new Fraction(Zero, One)\n\n  static convert(sdk: SDKFraction): Fraction {\n    return new Fraction(BigNumber.from(sdk.numerator.toString()), BigNumber.from(sdk.denominator.toString()))\n  }\n\n  static from(numerator: BigNumberish, denominator: BigNumberish): Fraction {\n    return new Fraction(BigNumber.from(numerator), BigNumber.from(denominator))\n  }\n\n  static parse(value: string): Fraction {\n    return value === ''\n      ? Fraction.NAN\n      : isEmptyValue(value)\n      ? Fraction.ZERO\n      : new Fraction(parseBalance(value, 18), Fraction.BASE)\n  }\n\n  numerator: BigNumber\n  denominator: BigNumber\n\n  private constructor(numerator: BigNumber, denominator: BigNumber) {\n    this.numerator = numerator\n    this.denominator = denominator\n  }\n\n  isZero(): boolean {\n    return !this.isNaN() && this.numerator.isZero()\n  }\n\n  isNaN(): boolean {\n    return this.denominator.isZero()\n  }\n\n  eq(fraction: Fraction): boolean {\n    return this.numerator.mul(fraction.denominator).div(fraction.numerator).eq(this.denominator)\n  }\n\n  gt(fraction: Fraction): boolean {\n    return this.numerator.mul(fraction.denominator).div(fraction.numerator).gt(this.denominator)\n  }\n\n  lt(fraction: Fraction): boolean {\n    return this.numerator.mul(fraction.denominator).div(fraction.numerator).lt(this.denominator)\n  }\n\n  toString(maxFractions = 8): string {\n    if (this.isNaN()) return ''\n    if (this.isZero()) return '0'\n    let str = formatBalance(this.numerator.mul(Fraction.BASE).div(this.denominator), 18, maxFractions)\n    if (str.endsWith('.0')) str = str.substring(0, str.length - 2)\n    return str\n  }\n\n  apply(value: BigNumberish): BigNumber {\n    return this.denominator.isZero() ? Zero : this.numerator.mul(value).div(this.denominator)\n  }\n}\n\nexport default Fraction\n"],"names":["BigNumber","One","Zero","formatBalance","parseBalance","isEmptyValue","Fraction","convert","sdk","from","numerator","toString","denominator","parse","value","NAN","ZERO","BASE","constructor","isZero","isNaN","eq","fraction","mul","div","gt","lt","maxFractions","str","endsWith","substring","length","apply","pow"],"sourceRoot":""}