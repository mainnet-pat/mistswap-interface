{"version":3,"file":"3719.js","mappings":"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","sources":["webpack://mistswap-interface/./src/config/tokens.ts","webpack://mistswap-interface/./src/state/transactions/actions.ts","webpack://mistswap-interface/./src/state/transactions/hooks.tsx"],"sourcesContent":["import { ChainId, MIST_ADDRESS, BAR_ADDRESS, Token, WBCH} from '@mistswapdex/sdk'\n\nexport const FLEXUSD = new Token(ChainId.SMARTBCH, '0x7b2B3C5308ab5b2a1d9a94d20D35CCDf61e05b72', 18, 'flexUSD', 'flexUSD')\n\nexport const XMIST: ChainTokenMap = {\n    [ChainId.SMARTBCH]: new Token(ChainId.SMARTBCH, BAR_ADDRESS[ChainId.SMARTBCH], 18, 'xMIST', 'MistBar'),\n    [ChainId.SMARTBCH_AMBER]: new Token(ChainId.SMARTBCH_AMBER, BAR_ADDRESS[ChainId.SMARTBCH_AMBER], 18, 'xMIST', 'MistBar'),\n}\n\ntype ChainTokenMap = {\n  readonly [chainId in ChainId]?: Token\n}\n\nexport const MIST: ChainTokenMap = {\n  [ChainId.SMARTBCH]: new Token(ChainId.SMARTBCH, MIST_ADDRESS[ChainId.SMARTBCH], 18, 'MIST', 'MistToken'),\n  [ChainId.SMARTBCH_AMBER]: new Token(ChainId.SMARTBCH_AMBER, MIST_ADDRESS[ChainId.SMARTBCH_AMBER], 18, 'MIST', 'MistToken'),\n}\n\nexport const WBCH_EXTENDED: { [chainId: number]: Token } = {\n  ...WBCH,\n}\n\ntype ChainTokenMapList = {\n  readonly [chainId in ChainId]?: Token[]\n}\n\n// These are available for migrate\nexport const BENSWAP_TOKENS: ChainTokenMapList = {\n  [ChainId.SMARTBCH]: [\n  ],\n  [ChainId.SMARTBCH_AMBER]: [\n    new Token(ChainId.SMARTBCH_AMBER, '0x842692f8A4D0743e942dF5D52155a037327d4f3f', 18, 'EBENS/BCH LP Token', 'EBEN-BCH'),\n  ],\n}\n","import { ChainId } from '@mistswapdex/sdk'\nimport { createAction } from '@reduxjs/toolkit'\n\nexport interface SerializableTransactionReceipt {\n  to: string\n  from: string\n  contractAddress: string\n  transactionIndex: number\n  blockHash: string\n  transactionHash: string\n  blockNumber: number\n  status?: number\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId\n  hash: string\n  from: string\n  approval?: { tokenAddress: string; spender: string }\n  claim?: { recipient: string }\n  summary?: string\n  archer?: {\n    rawTransaction: string\n    deadline: number\n    nonce: number\n    ethTip: string\n  }\n}>('transactions/addTransaction')\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions')\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId\n  hash: string\n  receipt: SerializableTransactionReceipt\n}>('transactions/finalizeTransaction')\nexport const checkedTransaction = createAction<{\n  chainId: ChainId\n  hash: string\n  blockNumber: number\n}>('transactions/checkedTransaction')\n","import { AppDispatch, AppState } from '../index'\nimport { useAppDispatch, useAppSelector } from '../hooks'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { TransactionDetails } from './reducer'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { addTransaction } from './actions'\nimport { useActiveWeb3React } from '../../hooks/useActiveWeb3React'\n\nexport interface TransactionResponseLight {\n  hash: string\n}\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponseLight,\n  customData?: {\n    summary?: string\n    approval?: { tokenAddress: string; spender: string }\n    claim?: { recipient: string }\n    archer?: {\n      rawTransaction: string\n      deadline: number\n      nonce: number\n      ethTip: string\n    }\n  }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    (\n      response: TransactionResponseLight,\n      {\n        summary,\n        approval,\n        claim,\n        archer,\n      }: {\n        summary?: string\n        claim?: { recipient: string }\n        approval?: { tokenAddress: string; spender: string }\n        archer?: {\n          rawTransaction: string\n          deadline: number\n          nonce: number\n          ethTip: string\n        }\n      } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(\n        addTransaction({\n          hash,\n          from: account,\n          chainId,\n          approval,\n          summary,\n          claim,\n          archer,\n        })\n      )\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useAppSelector((state) => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account?: string): {\n  claimSubmitted: boolean\n  claimTxn: TransactionDetails | undefined\n} {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n"],"names":["ChainId","MIST_ADDRESS","BAR_ADDRESS","Token","WBCH","FLEXUSD","SMARTBCH","XMIST","SMARTBCH_AMBER","MIST","WBCH_EXTENDED","BENSWAP_TOKENS","createAction","addTransaction","clearAllTransactions","finalizeTransaction","checkedTransaction","useAppDispatch","useAppSelector","useCallback","useMemo","useActiveWeb3React","useTransactionAdder","chainId","account","dispatch","response","summary","approval","claim","archer","hash","Error","from","useAllTransactions","state","transactions","useIsTransactionPending","transactionHash","receipt","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","allTransactions","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","undefined","claimSubmitted","Boolean"],"sourceRoot":""}