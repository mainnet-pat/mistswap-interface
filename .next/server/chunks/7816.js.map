{"version":3,"file":"7816.js","mappings":";;;;;;;;;;;;;CAEA;;AACe,SAASE,WAAT,CAAwBC,KAAxB,EAAkCC,KAAlC,EAAoD;AACjE,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCL,+CAAQ,CAAIE,KAAJ,CAApD;AAEAH,EAAAA,gDAAS,CAAC,MAAM;AACd;AACA,UAAMO,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B,CAFc,CAMd;AACA;AACA;;AACA,WAAO,MAAM;AACXK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAZQ,EAYN,CAACJ,KAAD,EAAQC,KAAR,CAZM,CAAT;AAcA,SAAOC,cAAP;AACD;;;;;;;;;;;;;;;;;;;;ACrBD;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACe,SAASY,UAAT,CAAoBC,OAApB,EAGb;AAAA;;AACA,QAAMC,gBAAgB,GAAGjB,8DAAW,CAACgB,OAAD,EAAU,GAAV,CAApC;AACA,QAAME,eAAe,GAAGL,8CAAO,CAAC,MAAM;AACpC,QAAI,CAACI,gBAAD,IAAqB,CAACT,iEAAS,CAACS,gBAAD,CAAnC,EAAuD,OAAO,CAACE,SAAD,CAAP;;AACvD,QAAI;AACF,aAAOF,gBAAgB,GAAG,CAACR,6DAAQ,CAAE,GAAEQ,gBAAgB,CAACG,WAAjB,GAA+BC,MAA/B,CAAsC,CAAtC,CAAyC,eAA7C,CAAT,CAAH,GAA4E,CAACF,SAAD,CAAnG;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACd,aAAO,CAACH,SAAD,CAAP;AACD;AACF,GAP8B,EAO5B,CAACF,gBAAD,CAP4B,CAA/B;AAQA,QAAMM,iBAAiB,GAAGb,+EAAuB,CAAC,KAAD,CAAjD;AACA,QAAMc,eAAe,GAAGV,qFAAmB,CAACS,iBAAD,EAAoB,UAApB,EAAgCL,eAAhC,CAA3C;AACA,QAAMO,qBAAqB,4BAAGD,eAAe,CAACE,MAAnB,0DAAG,sBAAyB,CAAzB,CAA9B;AACA,QAAMC,gBAAgB,GAAGhB,8EAAsB,CAC7Cc,qBAAqB,IAAI,CAACb,4DAAM,CAACa,qBAAD,CAAhC,GAA0DA,qBAA1D,GAAkFN,SADrC,EAE7C,KAF6C,CAA/C;AAIA,QAAMS,IAAI,GAAGd,qFAAmB,CAACa,gBAAD,EAAmB,MAAnB,EAA2BT,eAA3B,CAAhC;AAEA,QAAMW,OAAO,GAAGZ,gBAAgB,KAAKD,OAArC;AACA,SAAO;AACLc,IAAAA,OAAO,EAAED,OAAO,GAAG,IAAH,oCAAUD,IAAI,CAACF,MAAf,iDAAU,aAAc,CAAd,CAAV,yDAA8B,IADzC;AAELK,IAAAA,OAAO,EAAEF,OAAO,IAAIL,eAAe,CAACO,OAA3B,IAAsCH,IAAI,CAACG;AAF/C,GAAP;AAID","sources":["webpack://mistswap-interface/./src/hooks/useDebounce.ts","webpack://mistswap-interface/./src/hooks/useENSName.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { isAddress } from '@ethersproject/address'\nimport { namehash } from '@ethersproject/hash'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\n\nimport { isZero } from '../functions'\nimport useDebounce from './useDebounce'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): {\n  ENSName: string | null\n  loading: boolean\n} {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n\n  const changed = debouncedAddress !== address\n  return {\n    ENSName: changed ? null : name.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || name.loading,\n  }\n}\n"],"names":["useEffect","useState","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","isAddress","namehash","useENSRegistrarContract","useENSResolverContract","isZero","useMemo","useSingleCallResult","useENSName","address","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","changed","ENSName","loading"],"sourceRoot":""}