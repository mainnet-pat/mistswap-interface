{"version":3,"file":"2319.js","mappings":"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","sources":["webpack://mistswap-interface/./src/state/wallet/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, NATIVE, JSBI, Token } from '@mistswapdex/sdk'\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from '../multicall/hooks'\n\nimport ERC20_ABI from '../../constants/abis/erc20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { MIST } from './../../config/tokens'\nimport { isAddress } from '../../functions/validate'\nimport { useActiveWeb3React } from '../../hooks/useActiveWeb3React'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useMemo } from 'react'\nimport { useMulticall2Contract } from '../../hooks/useContract'\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount<Currency> | undefined\n} {\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticall2Contract()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map((address) => [address])\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount<Currency> }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value && chainId)\n          memo[address] = CurrencyAmount.fromRawAmount(NATIVE[chainId], JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, chainId, results]\n  )\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n  const ERC20Interface = new Interface(ERC20_ABI)\n  const balances = useMultipleContractSingleData(\n    validatedTokenAddresses,\n    ERC20Interface,\n    'balanceOf',\n    [address],\n    undefined,\n    100_000\n  )\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{\n              [tokenAddress: string]: CurrencyAmount<Token> | undefined\n            }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token.address] = CurrencyAmount.fromRawAmount(token, amount)\n              }\n              return memo\n            }, {})\n          : {},\n      [address, validatedTokens, balances]\n    ),\n    anyLoading,\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  const balances = useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n  const memoizedBalances = useMemo(() => JSON.stringify(balances), [balances])\n  return useMemo(() => balances, [memoizedBalances])\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): CurrencyAmount<Token> | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount<Currency> | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency?.isToken ?? false) ?? [],\n    [currencies]\n  )\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some((currency) => currency?.isNative) ?? false, [currencies])\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency) return undefined\n        if (currency.isToken) return tokenBalances[currency.address]\n        if (currency.isNative) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount<Currency> | undefined {\n  return useCurrencyBalances(account, [currency])[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): {\n  [tokenAddress: string]: CurrencyAmount<Token> | undefined\n} {\n  const { account } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n\n// TODO: Replace\n// get the total owned, unclaimed, and unharvested UNI for account\n// export function useAggregateUniBalance(): CurrencyAmount<Token> | undefined {\n//   const { account, chainId } = useActiveWeb3React();\n\n//   const uni = chainId ? UNI[chainId] : undefined;\n\n//   const uniBalance: CurrencyAmount<Token> | undefined = useTokenBalance(\n//     account ?? undefined,\n//     uni\n//   );\n//   const uniUnclaimed: CurrencyAmount<Token> | undefined =\n//     useUserUnclaimedAmount(account);\n//   const uniUnHarvested: CurrencyAmount<Token> | undefined = useTotalUniEarned();\n\n//   if (!uni) return undefined;\n\n//   return CurrencyAmount.fromRawAmount(\n//     uni,\n//     JSBI.add(\n//       JSBI.add(\n//         uniBalance?.quotient ?? JSBI.BigInt(0),\n//         uniUnclaimed?.quotient ?? JSBI.BigInt(0)\n//       ),\n//       uniUnHarvested?.quotient ?? JSBI.BigInt(0)\n//     )\n//   );\n// }\n"],"names":["CurrencyAmount","NATIVE","JSBI","useMultipleContractSingleData","useSingleContractMultipleData","ERC20_ABI","Interface","isAddress","useActiveWeb3React","useAllTokens","useMemo","useMulticall2Contract","useETHBalances","uncheckedAddresses","chainId","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","value","result","fromRawAmount","BigInt","toString","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","ERC20Interface","balances","undefined","anyLoading","some","callState","loading","length","token","amount","useTokenBalances","memoizedBalances","JSON","stringify","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","isToken","containsETH","isNative","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values"],"sourceRoot":""}