{"version":3,"file":"7898.js","mappings":"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","sources":["webpack://mistswap-interface/./src/components/Input/Address/index.tsx","webpack://mistswap-interface/./src/components/Input/Numeric/index.tsx","webpack://mistswap-interface/./src/components/Input/Percent/index.tsx","webpack://mistswap-interface/./src/components/Input/index.tsx","webpack://mistswap-interface/./src/hooks/useENS.ts","webpack://mistswap-interface/./src/hooks/useENSAddress.ts"],"sourcesContent":["import { classNames, escapeRegExp } from '../../../functions'\n\nimport React from 'react'\nimport useENS from '../../../hooks/useENS'\n\nconst inputRegex = RegExp(`^\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const AddressInput = React.memo(\n  ({\n    value,\n    onUserInput,\n    placeholder,\n    className = 'flex w-full h-full p-3 font-bold rounded overflow-ellipsis recipient-address-input bg-dark-900 placeholder-low-emphesis',\n    align,\n    fontSize = '24px',\n    ...rest\n  }: {\n    value: string\n    onUserInput: (input: string) => void\n    error?: boolean\n    fontSize?: string\n    align?: 'right' | 'left'\n  } & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) => {\n    const { address, loading } = useENS(value)\n\n    const enforcer = (nextUserInput: string) => {\n      onUserInput(nextUserInput)\n    }\n\n    return (\n      <>\n        <input\n          value={value}\n          onChange={(event) => {\n            enforcer(event.target.value.replace(/\\s+/g, ''))\n          }}\n          // universal input options\n          inputMode=\"text\"\n          title=\"Wallet Address or ENS name\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          placeholder=\"Wallet Address or ENS name\"\n          pattern=\"^(0x[a-fA-F0-9]{40})$\"\n          // text-specific options\n          type=\"text\"\n          className={classNames(\n            align === 'right' && 'text-right',\n            'font-medium bg-transparent whitespace-nowrap overflow-ellipsis flex-auto',\n            className\n          )}\n          style={{ fontSize }}\n          {...rest}\n        />\n      </>\n    )\n  }\n)\n\nAddressInput.displayName = 'AddressInput'\n\nexport default AddressInput\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n","import { classNames, escapeRegExp } from '../../../functions'\n\nimport React from 'react'\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nconst defaultClassName = 'w-0 p-0 text-2xl bg-transparent'\n\nexport const Input = React.memo(\n  ({\n    value,\n    onUserInput,\n    placeholder,\n    className = defaultClassName,\n    ...rest\n  }: {\n    value: string | number\n    onUserInput: (input: string) => void\n    error?: boolean\n    fontSize?: string\n    align?: 'right' | 'left'\n  } & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) => {\n    const enforcer = (nextUserInput: string) => {\n      if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n        onUserInput(nextUserInput)\n      }\n    }\n\n    return (\n      <input\n        {...rest}\n        value={value}\n        onChange={(event) => {\n          // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n          enforcer(event.target.value.replace(/,/g, '.'))\n        }}\n        // universal input options\n        inputMode=\"decimal\"\n        title=\"Token Amount\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        // text-specific options\n        type=\"text\"\n        pattern=\"^[0-9]*[.,]?[0-9]*$\"\n        placeholder={placeholder || '0.0'}\n        min={0}\n        minLength={1}\n        maxLength={79}\n        spellCheck=\"false\"\n        className={classNames(\n          'relative font-bold outline-none border-none flex-auto overflow-hidden overflow-ellipsis placeholder-low-emphesis focus:placeholder-primary',\n          className\n        )}\n      />\n    )\n  }\n)\n\nInput.displayName = 'NumericalInput'\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n","import { classNames, escapeRegExp } from '../../../functions'\n\nimport React from 'react'\n\nconst inputRegex = RegExp(`^\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(\n  ({\n    value,\n    onUserInput,\n    placeholder,\n    className,\n    align,\n    fontSize = '24px',\n    ...rest\n  }: {\n    value: string | number\n    onUserInput: (input: string) => void\n    error?: boolean\n    fontSize?: string\n    align?: 'right' | 'left'\n  } & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) => {\n    const enforcer = (nextUserInput: string) => {\n      if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n        if (Number(nextUserInput) <= 100) {\n          onUserInput(nextUserInput)\n        }\n      }\n    }\n\n    return (\n      <>\n        <input\n          value={value}\n          onChange={(event) => {\n            // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n            enforcer(event.target.value.replace(/,/g, '.').replace(/%/g, ''))\n          }}\n          // universal input options\n          inputMode=\"decimal\"\n          title=\"Token Amount\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          // text-specific options\n          type=\"text\"\n          pattern=\"^[0-9]*$\"\n          placeholder={placeholder || '100'}\n          maxLength={3}\n          className={classNames(\n            align === 'right' && 'text-right',\n            'relative font-medium bg-transparent whitespace-nowrap overflow-ellipsis flex-auto percent-translate',\n            className\n          )}\n          style={{ fontSize }}\n          {...rest}\n        />\n      </>\n    )\n  }\n)\n\nInput.displayName = 'PercentInput'\n\nexport default Input\n","import Address from './Address'\nimport Numeric from './Numeric'\nimport Percent from './Percent'\n\nconst Input = {\n  Address,\n  Percent,\n  Numeric,\n}\n\nexport default Input\n","import { isAddress } from '../functions/validate'\nimport useENSAddress from './useENSAddress'\nimport useENSName from './useENSName'\n\n/**\n * Given a name or address, does a lookup to resolve to an address and name\n * @param nameOrAddress ENS name or address\n */\nexport default function useENS(nameOrAddress?: string | null): {\n  loading: boolean\n  address: string | null\n  name: string | null\n} {\n  const validated = isAddress(nameOrAddress)\n  const reverseLookup = useENSName(validated ? validated : undefined)\n  const lookup = useENSAddress(nameOrAddress)\n\n  return {\n    loading: reverseLookup.loading || lookup.loading,\n    address: validated ? validated : lookup.address,\n    name: reverseLookup.ENSName ? reverseLookup.ENSName : !validated && lookup.address ? nameOrAddress || null : null,\n  }\n}\n","import { useENSRegistrarContract, useENSResolverContract } from './useContract'\n\nimport { isZero } from '../functions'\nimport { namehash } from '@ethersproject/hash'\nimport useDebounce from './useDebounce'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n/**\n * Does a lookup for an ENS name to find its address.\n */\nexport default function useENSAddress(ensName?: string | null): {\n  loading: boolean\n  address: string | null\n} {\n  const debouncedName = useDebounce(ensName, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined]\n    try {\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\n\n  const changed = debouncedName !== ensName\n  return {\n    address: changed ? null : addr.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || addr.loading,\n  }\n}\n"],"names":["classNames","React","useENS","inputRegex","RegExp","AddressInput","memo","value","onUserInput","placeholder","className","align","fontSize","rest","address","loading","enforcer","nextUserInput","event","target","replace","displayName","escapeRegExp","defaultClassName","Input","test","Number","Address","Numeric","Percent","isAddress","useENSAddress","useENSName","nameOrAddress","validated","reverseLookup","undefined","lookup","name","ENSName","useENSRegistrarContract","useENSResolverContract","isZero","namehash","useDebounce","useMemo","useSingleCallResult","ensName","debouncedName","ensNodeArgument","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","addr","changed"],"sourceRoot":""}