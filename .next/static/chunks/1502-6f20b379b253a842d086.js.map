{"version":3,"file":"static/chunks/1502-6f20b379b253a842d086.js","mappings":"6vBAEA,IAAMA,EAAY,CAChBC,KAAM,aACN,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACPC,GAAI,WACJC,GAAI,WACJC,GAAI,WACJC,GAAI,WACJC,GAAI,YASN,IANkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,IAAaC,SAAAA,OAAb,MAAwB,MAAxB,MAA+BC,UAAAA,OAA/B,MAA2C,GAA3C,EAAkDC,GAAlD,mBAChB,oBAAKD,WAAWE,EAAAA,EAAAA,IAAWF,EAAWT,EAAUQ,GAAW,WAAeE,GAA1E,aACGH,O,sBCnBE,IAAKK,EAKAC,EAMAC,E,kEAXAF,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gB,CAAAA,IAAAA,EAAAA,K,SAKAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,IAAAA,EAAAA,K,SAMAC,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,MAAAA,GAAAA,Q,CAAAA,IAAAA,EAAAA,M,sDCVZ,IAEaC,EAAa,I,8/BCgBnB,IAAMC,GAAW,UACrBC,EAAAA,GAAAA,SAAmB,wBAGTC,EAAQ,mCAAG,2GAAOC,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBG,EAAnC,uBAA0CC,EAA1C,+BAAsD,GAAtD,mBACtBC,EAAAA,EAAAA,IAAM,GAAD,OAAIP,EAAAA,EAAWI,GAAf,2BAA0CH,EAASG,IAAYC,EAAOC,IADrD,2CAAH,qDAGRE,EAAQ,mCAAG,+GAAOJ,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAAWJ,EAA1D,+BAAkEK,EAAAA,GAAlE,SACEP,EAASC,EAASC,EAAOC,GAD3B,uBACdK,EADc,EACdA,MADc,kBAEfA,GAFe,2CAAH,qDAKRC,EAAc,mCAAG,6GAAOR,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,gCAEHH,EAASC,EAASS,EAAAA,GAAkBP,GAFjC,uBAEpBQ,EAFoB,EAEpBA,OAFoB,kBAGrBA,GAHqB,2CAAH,qDAMdC,EAAS,mCAAG,6GAAOX,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,gCAEEH,EAASC,EAASY,EAAAA,GAAaV,GAFjC,uBAEfQ,EAFe,EAEfA,OAFe,kBAGhBA,GAHgB,2CAAH,qDAYTG,EAAe,mCAAG,6GAAOb,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,gCAEGH,EAASC,EAASc,EAAAA,GAAoBZ,GAFzC,uBAErBa,EAFqB,EAErBA,cAFqB,kBAGtBA,GAHsB,2CAAH,qDAYfC,EAAa,mCAAG,iHAAOhB,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBG,EAAnC,uBAA0CC,EAA1C,gCAEDe,EAAejB,GAFd,cAErBkB,EAFqB,gBAIHnB,EAASC,EAASC,EAAOC,GAJtB,uBAInBiB,EAJmB,EAInBA,MAJmB,mBAKf,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOC,YAAaF,GALA,4CAAH,qDAQbD,EAAc,mCAAG,6GAAOjB,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAA/C,SAETgB,EAAUrB,OAASK,EAAWH,GAFrB,cAEtBoB,EAFsB,gCAGrBA,QAHqB,IAGrBA,GAHqB,UAGrBA,EAAMC,QAAQ,UAHO,aAGrB,EAAkBC,UAHG,2CAAH,qDAsCdC,EAAa,mCAAG,6HAAmB,GAC9CC,QAAQC,IAAI,iBADe,2CAAH,qDA8BbC,EAAa,mCAAG,uGAAO1B,EAAP,+BAAmB,GAAnB,kBAEpBc,EAAclB,EAAAA,GAAAA,SAAkB+B,EAAAA,GAAnB,GAClBC,GAAI,8CACD5B,KAJsB,2CAAH,qDAQb6B,EAAa,mCAAG,6HAAmB,GAAnB,2CAAH,qDAebV,EAAS,mCAAG,2GACvBrB,EADuB,+BACbF,EAAAA,GAAAA,SACVG,EAFuB,+BAEf+B,EAAAA,GACR9B,EAHuB,+BAGX,CACV4B,GAAI,GAJiB,kBAOhB/B,EAASC,EAASC,EAAOC,IAPT,2CAAH,qDAUT+B,EAAqB,mCAAG,6GAAOjC,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,gCACEH,EAASC,EAASkC,EAAAA,GAAyBhC,GAD7C,uBAC3BiC,EAD2B,EAC3BA,mBAD2B,kBAE5BA,GAF4B,2CAAH,qDAKrBC,EAAU,mCAAG,6GAAOpC,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAA/C,SACGN,EAASC,EAASqC,EAAAA,GAAenC,GADpC,uBAChBoC,EADgB,EAChBA,SADgB,kBAEjBA,GAFiB,2CAAH,qDAKVC,EAAU,mCAAG,6GAAOvC,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAA/C,SACIN,EAASC,EAASwC,EAAAA,GAActC,GADpC,uBAChBuC,EADgB,EAChBA,UADgB,kBAEjBA,EAAU,IAFO,2CAAH,qDAKVC,EAAe,mCAAG,6GAAO1C,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAA/C,SACLN,EAASC,EAAS2C,EAAAA,GAAmBzC,GADhC,uBACrB0C,EADqB,EACrBA,MADqB,kBAEtBA,GAFsB,2CAAH,qDAKfC,EAAa,mCAAG,+GAAO7C,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAA/C,SACMN,EAASC,EAAS8C,EAAAA,EAAiB5C,GADzC,uBACnB6C,EADmB,EACnBA,OAAQC,EADW,EACXA,OADW,kBAEpBD,GAAUC,EAAV,kBAAwBD,GAAkB,KAA1C,OAAmDC,GAAkB,UAAO3C,GAFxD,2CAAH,sD,gpBCvLb4C,EAAS,GAETC,EAAO,mCAAG,2GAAOlD,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBG,EAAnC,uBAA0CC,EAA1C,oCAAsDG,EAAtD,mBACd8C,EAAAA,EAAAA,SAAQ,GAAD,OAAIvD,EAAAA,EAAWI,GAAf,2BAA0CiD,EAAOjD,IAAYC,EAAOC,IAD7D,2CAAH,qDAIPkD,EAAQ,mCAAG,+GAAOpD,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBuD,EAAnC,gCACGH,EACvBlD,EACAsD,EAAAA,GACAD,EACI,CACEE,MAAO,CACLC,aAAcH,EAAY,IAC1BI,aAAcJ,IAGlB,IAXgB,uBACdK,EADc,EACdA,OADc,kBAcfC,OAAM,OAACD,QAAD,IAACA,GAAD,UAACA,EAAS,UAAV,aAAC,EAAaE,SAdL,2CAAH,qDAiBRC,EAAS,mCAAG,+GAAO7D,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBgE,EAAnC,uBAA0CC,EAA1C,gCACEb,EAAQlD,EAASgE,EAAAA,GAAa,CACrDF,MAAAA,EACAC,IAAAA,IAHqB,uBACfL,EADe,EACfA,OADe,kBAKhBA,GALgB,2CAAH,qDAkBTO,EAAmB,mCAAG,iHAAOjE,EAAP,+BAAiBF,EAAAA,GAAAA,SAE5CoE,GAAMC,EAAAA,EAAAA,GAAYC,KAAKF,OACvBJ,GAAQO,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,GAASJ,EAAK,IAClCH,GAAMM,EAAAA,EAAAA,GAAYH,GAJS,SAKZL,EAAU7D,EAAS8D,EAAOC,GALd,cAK3BL,EAL2B,OAM3Ba,EAN2B,OAMRb,QANQ,IAMRA,OANQ,EAMRA,EAAQc,QAC/B,SAACC,EAAeC,EAAcC,GAC5B,GAAIF,EAAcpB,UAAW,CAC3B,IAAMuB,EAAaH,EAAcpB,UAAYqB,EAAarB,UAE1DoB,EAAcF,iBAAmBE,EAAcF,iBAAmBK,EAKpE,OAFAH,EAAcpB,UAAYqB,EAAarB,UAEnCsB,IAAiBjB,EAAOmB,OAAS,EAC5BJ,EAAcF,iBAAmBb,EAAOmB,OAG1CJ,IAET,CAAEpB,UAAW,KAAMkB,iBAAkB,IAtBN,kBAyB1BA,GAzB0B,2CAAH,qD,8kBClCzB,IAAMO,GAAgB,UAC1BhF,EAAAA,GAAAA,SAAmB,2BAGTiF,EAAY,mCAAG,WAAO9E,GAAP,4FAAcD,EAAd,+BAAwBF,EAAAA,GAAAA,SAAkBI,EAA1C,oCAAsDG,EAAtD,mBAC1B8C,EAAAA,EAAAA,SAAQ,GAAD,OAAIvD,EAAAA,EAAWI,GAAf,2BAA0C8E,EAAc9E,IAAYC,EAAOC,IADxD,2CAAH,sDAGZ8E,GAAgB,UAC1BlF,EAAAA,GAAAA,SAAmB,yBAGTmF,EAAY,mCAAG,WAAOhF,GAAP,4FAAcD,EAAd,+BAAwBF,EAAAA,GAAAA,SAAkBI,EAA1C,oCAAsDG,EAAtD,mBAC1B8C,EAAAA,EAAAA,SAAQ,GAAD,OAAIvD,EAAAA,EAAWI,GAAf,2BAA0CgF,EAAchF,IAAYC,EAAOC,IADxD,2CAAH,sDAGZgF,EAA8B,mCAAG,sGAGlCD,EAAaE,EAAAA,IAHqB,uBAE5BC,EAF4B,EAE1CC,WAAcD,gBAF4B,kBAIrCA,GAJqC,2CAAH,qDAO9BE,EAA4B,mCAAG,sGAGhCL,EAAaM,EAAAA,GAHmB,uBAE1BC,EAF0B,EAExCH,WAAcG,cAF0B,kBAInCA,EAAgB,MAJmB,2CAAH,qDAO5BC,EAAoB,mCAAG,2GAAOvF,EAAP,oCAAmBG,EAAnB,SACV4E,EAAaS,EAAAA,QAAYrF,EAAWH,GAD1B,uBAC1ByF,EAD0B,EAC1BA,MAD0B,kBAE3BA,GAF2B,2CAAH,qDAUpBC,EAAoB,mCAAG,6GAAO1F,EAAP,oCAAmBG,EAAnB,SACV0E,EAAac,EAAAA,QAAcxF,EAAWH,GAD5B,uBAC1ByF,EAD0B,EAC1BA,MAD0B,UAGbnF,EAAAA,EAAAA,IAAeV,EAAAA,GAAAA,SAAkB,CACpDgG,eAAgBC,MAAMC,KAAKL,EAAMM,KAAI,SAACC,GAAD,OAAUA,EAAKC,SAASC,kBAJ7B,cAG5B1F,EAH4B,yBAO3BiF,EAAMM,KAAI,SAACC,GAAD,cACZA,GADY,IAEfE,YAAa,EAAF,GACN1F,EAAO2F,MAAK,SAAClF,GAAD,OAAWA,EAAMW,KAAOoE,EAAKC,SAASC,sBAVvB,2CAAH,qD,qkBClD1B,SAAejG,EAAtB,oC,wCAAO,WAAqBmG,EAAUrG,GAA/B,8FAAsCC,EAAtC,+BAAkD,IACnDoG,EAASC,SAAS,aADjB,yCACsC,IADtC,OAGDjF,EAAY,GACZkF,EAAO,EACPC,GAAO,EALN,uGAOHA,GAAO,EAPJ,UAQetD,EAAAA,EAAAA,SAAQmD,EAAUrG,EAAOC,GARxC,UAQGwG,EARH,OASHC,OAAOC,KAAKF,GAAKG,SAAQ,SAACC,GACxBxF,EAAKwF,GAAOxF,EAAKwF,GAAL,kBAAgBxF,EAAKwF,KAArB,OAA8BJ,EAAII,KAAQJ,EAAII,MAG5DH,OAAOI,OAAOL,GAAKG,SAAQ,SAACG,GACL,MAAjBA,EAAMnC,SAAiB4B,GAAO,OAGhCE,OAAOC,KAAK1G,GAAWqG,SAAS,SAjBjC,yDAmBHC,GAAQ,IACRtG,EAAY,OAAKA,GAAR,IAAmBsG,KAAAA,IApBzB,sDAMEC,EANF,kLAsBEnF,GAtBF,6C,uJCWA,SAAS2F,IAGd,6DAFoG,GAAlG5D,EAEF,EAFEA,UAAW6D,EAEb,EAFaA,QAEb,IAFsBlH,QAAAA,OAEtB,OAFgCmH,EAAAA,EAAAA,MAAqBnH,QAErD,MAF8DoH,YAAAA,OAE9D,SADAC,EACA,4DAD8BhH,EAE9B+G,EAAcA,KAAiBpH,EAC/BqD,EAAYA,EACqB,KAA7BiE,OAAOjE,GAAWwB,OAChBlB,OAAON,GACPkE,KAAKC,MAAM7D,OAAON,GAAa,UACjChD,EACJgD,GAAYoE,EAAAA,EAAAA,UAAQ,kBAAOP,EAAUK,KAAKC,MAAMpD,KAAKF,MAAQ,KAAkB,MAAVgD,EAAkB7D,IAAY,CAAC6D,IAEpG,OAAiBQ,EAAAA,EAAAA,IACfN,EAAc,CAAC,QAASpH,EAASqD,GAAa,MAC9C,SAACsE,EAAG3H,EAASqD,GAAb,OAA2BD,EAAAA,EAAAA,IAASpD,EAASqD,KAC7CgE,GAHM/F,EAAR,EAAQA,KAMR,OAAOA,EAeF,SAASsG,IAA2C,IAAvBP,EAAuB,4DAAXhH,EAC9C,GAAoB8G,EAAAA,EAAAA,MAAZnH,EAAR,EAAQA,QAER,GAAiB0H,EAAAA,EAAAA,IACf1H,EAAU,CAAC,mBAAoBA,GAAW,MAC1C,SAAC2H,EAAG3H,GAAJ,OAAgBiE,EAAAA,EAAAA,IAAoBjE,KACpCqH,GAHM/F,EAAR,EAAQA,KAMR,OAAOA,I,6qBCrDIuG,GAAwBC,EAAAA,EAAAA,IAAH,wMAcrBC,GAAuBD,EAAAA,EAAAA,IAAH,mTAS7BD,GAGSG,GAAuBF,EAAAA,EAAAA,IAAH,0mBAmC7BD,GAGSI,GAAkBH,EAAAA,EAAAA,IAAH,gdAoBxBE,GAGSE,GAAsBJ,EAAAA,EAAAA,IAAH,wVAW5BE,G,omBC5FG,IAAMG,EAAW,GAQXjF,EAAO,mCAAG,2GAAOlD,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBG,EAAnC,uBAA0CC,EAA1C,oCAAsDG,EAAtD,mBACrBF,EAAAA,EAAAA,IAAM,GAAD,OAAIP,EAAAA,EAAWI,GAAf,2BAA0CmI,EAASnI,IAAYC,EAAOC,IADtD,2CAAH,qDAGPkI,EAAa,mCAAG,+GAAOpI,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,oCAA+CG,EAA/C,SACE6C,EAAQlD,EAASiI,EAAiB/H,GADpC,uBACnBmI,EADmB,EACnBA,WADmB,UAGN7H,EAAAA,EAAAA,IAAeR,EAAS,CAC3C8F,eAAgBC,MAAMC,KACpBqC,EAAW7D,QACT,SAACC,EAAeC,GAAhB,OAAiCD,EAAc6D,IAAI5D,EAAa6D,MAAMzG,GAAI4C,EAAa8D,WAAW1G,MAClG,IAAI2G,QAPiB,cAGrB/H,EAHqB,yBAYpB2H,EAAWpC,KAAI,SAACyC,GAAD,cACjBA,GADiB,IAEpBC,OAAQ,EAAF,KACDD,EAAKH,OACL7H,EAAO2F,MAAK,SAAClF,GAAD,OAAWA,EAAMW,KAAO4G,EAAKH,MAAMzG,OAEpD8G,OAAQ,EAAF,KACDF,EAAKF,YACL9H,EAAO2F,MAAK,SAAClF,GAAD,OAAWA,EAAMW,KAAO4G,EAAKF,WAAW1G,OAEzD+G,YAAatB,KAAKC,MAAMkB,EAAKI,gBAAiBC,EAAAA,EAAAA,IAAY,EAAD,KAAML,GAAN,IAAYC,OAAQD,EAAKH,UAAUS,WAC5FC,gBAAgBC,EAAAA,EAAAA,IACd,CACEC,YAAaT,EAAKU,mBAAmBC,YAAY,GACjDC,WAAYZ,EAAKa,gBAAgBF,YAAY,IAE/CX,EAAKU,mBAAmBC,YAAY,IACpCL,WACFQ,kBAAkBN,EAAAA,EAAAA,IAChB,CACEC,YAAaT,EAAKF,WAAWiB,mBAAmBJ,YAAY,GAC5DC,WAAYZ,EAAKF,WAAWkB,gBAAgBL,YAAY,IAE1DX,EAAKiB,qBAAqBN,YAAY,IACtCL,iBApCuB,4CAAH,qDAwCbY,EAAiB,mCAAG,6GAAO5J,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,gCACEgD,EAAQlD,EAASkI,EAAqBhI,GADxC,uBACvB2J,EADuB,EACvBA,eADuB,kBAGxBA,EAAe5D,KAAI,SAAC6D,GAAD,cACrBA,GADqB,IAExBjB,YAAatB,KAAKC,MAChBsC,EAASC,eAAgBhB,EAAAA,EAAAA,IAAY,EAAD,KAAMe,EAASpB,MAAf,IAAqBC,OAAQmB,EAASpB,KAAKH,UAC/ES,WACFC,gBAAgBC,EAAAA,EAAAA,IACd,CACEC,YAAaW,EAASpB,KAAKU,mBAAmBC,YAAY,GAC1DC,WAAYQ,EAASpB,KAAKa,gBAAgBF,YAAY,IAExDS,EAASE,WAAWX,YAAY,IAChCL,WACFQ,kBAAkBN,EAAAA,EAAAA,IAChB,CACEC,YAAaW,EAASpB,KAAKF,WAAWiB,mBAAmBJ,YAAY,GACrEC,WAAYQ,EAASpB,KAAKF,WAAWkB,gBAAgBL,YAAY,IAEnES,EAASG,gBAAgBZ,YAAY,IACrCL,iBArB2B,2CAAH,qDAyBjBkB,EAAkB,mCAAG,6GAAOlK,EAAP,+BAAiBF,EAAAA,GAAAA,SAAkBI,EAAnC,gCACHgD,EAAQlD,EAAS+H,EAAsB7H,GADpC,uBACxBiK,EADwB,EACxBA,WADwB,kBAGzBA,EACJlE,KAAI,SAAC9E,GAAD,cACCA,EAAMA,OADP,IAEHiJ,OAAQjJ,EAAMkJ,WAEfpE,KAAI,SAAC9E,GAAD,cACAA,GADA,IAEHmJ,QAAQpB,EAAAA,EAAAA,IACN,CACEC,YAAahI,EAAMsI,mBAAmBJ,YAAY,GAClDC,WAAYnI,EAAMuI,gBAAgBL,YAAY,IAEhDlI,EAAMiJ,OAAOf,YAAY,IACzBL,iBAhB0B,2CAAH,qD,smBClExB,SAASuB,IAUd,+DAFwB,GANtBlH,EAQF,EAREA,UACAmH,EAOF,EAPEA,MAOF,IANExK,QAAAA,OAMF,OANYmH,EAAAA,EAAAA,MAAqBnH,QAMjC,MALEoH,YAAAA,OAKF,SAJEqD,EAIF,EAJEA,KACAC,EAGF,EAHEA,OAEFrD,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IACzEmH,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,EAE7C+G,IAAcA,IAAcwD,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,MAAkB7K,GAE7D,IAAME,EAAY,CAChBsK,MAAOA,EAAQ,CAAE5G,OAAQ4G,QAAUnK,EACnCkD,MAAO,CACLkH,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMK,cACZC,MAAK,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAQzE,KAAI,SAACnE,GAAD,OAAQA,EAAGgJ,mBAIlC,GAAiBpD,EAAAA,EAAAA,IACfN,EAAc,iBAAM,CAAC,aAAcpH,EAASgL,KAAKC,UAAU/K,KAAc,MACzE,SAACyH,EAAG3H,GAAJ,OAAgBoI,EAAcpI,EAASE,KACvCmH,GAHM/F,EAAR,EAAQA,KAMR,OAAOA,EAGF,SAAS4J,IAAuG,QAArFhL,EAAqF,4DAAzEG,EAAWL,EAA8D,4DAApDK,EAAWgH,EAAyC,4DAAXhH,EAC1G,GAA8C8G,EAAAA,EAAAA,MAA7BgE,EAAjB,EAAQnL,QAA0BoL,EAAlC,EAAkCA,QAG5BhE,GAFNpH,EAAO,UAAGA,SAAH,QAAcmL,IAEUC,EAE/BlL,EACEyG,OAAOC,KAAP,UAAY1G,SAAZ,QAAyB,IAAIqG,SAAS,SAAW6E,EAC7ClL,EACAkL,EAAO,OACFlL,GADE,IACSuK,KAAMW,EAAQN,gBAC9B,GAEN,OAAiBpD,EAAAA,EAAAA,IACfN,EAAc,CAAC,iBAAkBpH,EAASgL,KAAKC,UAAU/K,IAAc,MACvE,kBAAM0J,EAAkB5J,EAASE,KACjCmH,GAHM/F,EAAR,EAAQA,KAMR,OAAOA,EAGF,SAAS+J,IAId,QAHAnL,EAGA,4DAHYG,EACZL,EAEA,4DAFUK,EACVgH,EACA,4DAD8BhH,EAE9B,GAA8C8G,EAAAA,EAAAA,MAA7BgE,EAAjB,EAAQnL,QAA0BoL,EAAlC,EAAkCA,QAG5BhE,GAFNpH,EAAO,UAAGA,SAAH,QAAcmL,IAEUC,EAE/BlL,EAAYyG,OAAOC,KAAP,UAAY1G,SAAZ,QAAyB,IAAIqG,SAAS,QAC9CrG,EACAkL,EAAO,OACFlL,GADE,IACSuK,KAAMW,EAAQN,gBAC9B,GAEJ,OAAiBpD,EAAAA,EAAAA,IACfN,EAAc,CAAC,kBAAmBpH,EAASgL,KAAKC,UAAU/K,IAAc,MACxE,kBAAMgK,EAAmBlK,EAASE,KAClCmH,GAHM/F,EAAR,EAAQA,KAMR,OAAOA,E,SCtDF,SAASgK,IAGd,+DAFoG,GAAlGjI,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SADAC,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IACzEmH,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,EAE7C+G,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChBsK,MAAOA,EAAQ,CAAE5G,OAAQ4G,QAAUnK,GAGrC,GAAiBqH,EAAAA,EAAAA,IACfN,EAAc,CAAC,UAAWpH,EAASgL,KAAKC,UAAU/K,IAAc,MAChE,kBAAMqC,EAAAA,EAAAA,IAAWvC,EAASE,KAC1BmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAUF,SAASiK,IAGd,+DAFwG,GAAtGlI,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SADAC,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAWrD,QAAAA,EAASoH,YAAaA,KAAiB/D,IAClFmH,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,EAE7C+G,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChBsK,MAAOA,EAAQ,CAAE5G,OAAQ4G,QAAUnK,GAGrC,GAAiBqH,EAAAA,EAAAA,IACfN,EAAc,CAAC,cAAepH,EAASgL,KAAKC,UAAU/K,IAAc,MACpE,kBAAMe,EAAAA,EAAAA,IAAejB,EAASE,KAC9BmH,GAHM/F,EAAR,EAAQA,KAMR,OAAOA,EAQF,SAASkK,IAA8E,IAAhEtL,EAAgE,4DAApDG,EAAWgH,EAAyC,4DAAXhH,EACjF,GAAiBqH,EAAAA,EAAAA,IAAO,CAAC,aAAcsD,KAAKC,UAAU/K,KAAa,kBAAM6B,EAAAA,EAAAA,IAAc7B,KAAYmH,GAA3F/F,EAAR,EAAQA,KACR,OAAOA,EAqFF,SAASmK,IAA8E,IAAhEvL,EAAgE,4DAApDG,EAAWgH,EAAyC,4DAAXhH,EACjF,GAAiBqH,EAAAA,EAAAA,IAAO,CAAC,aAAcsD,KAAKC,UAAU/K,KAAa,kBAAMuB,EAAAA,EAAAA,IAAcvB,KAAYmH,GAA3F/F,EAAR,EAAQA,KACR,OAAOA,EAGF,SAASoK,IAA8E,IAAhExL,EAAgE,4DAApDG,EAAWgH,EAAyC,4DAAXhH,EACjF,GAAiBqH,EAAAA,EAAAA,IAAO,CAAC,aAAcsD,KAAKC,UAAU/K,KAAa,kBAAM0B,EAAAA,EAAAA,IAAc1B,KAAYmH,GAA3F/F,EAAR,EAAQA,KACR,OAAOA,EAqBF,SAASqK,IASd,+DAFgC,GAL9BtI,EAOF,EAPEA,UACAmH,EAMF,EANEA,MAMF,IALExK,QAAAA,OAKF,OALYmH,EAAAA,EAAAA,MAAqBnH,QAKjC,MAJEoH,YAAAA,OAIF,SAHEqD,EAGF,EAHEA,KAEFpD,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAWrD,QAAAA,EAASoH,YAAaA,KAAiB/D,IAGlF+D,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChBsK,OALFA,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,GAK5B,CAAEuD,OAAQ4G,QAAUnK,EACnCkD,MAAO,CACLkH,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMK,cACZc,yBAA0B,MAI9B,GAAiBlE,EAAAA,EAAAA,IACfN,EAAc,CAAC,qBAAsBpH,EAASgL,KAAKC,UAAU/K,IAAc,MAC3E,SAACyH,EAAG3H,GAAJ,OAAgBiC,EAAAA,EAAAA,IAAsBjC,EAASE,KAC/CmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAYF,SAASuK,IAUd,+DAFwB,GANtBxI,EAQF,EAREA,UACAmH,EAOF,EAPEA,MAOF,IANExK,QAAAA,OAMF,OANYmH,EAAAA,EAAAA,MAAqBnH,QAMjC,MALEoH,YAAAA,OAKF,SAJEqD,EAIF,EAJEA,KACAC,EAGF,EAHEA,OAEFrD,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IAGzE+D,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChBsK,OALFA,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,GAK5B,CAAEuD,OAAQ4G,QAAUnK,EACnCkD,MAAO,CACLkH,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMK,cACZC,MAAK,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAQzE,KAAI,SAACnE,GAAD,OAAQA,EAAGgJ,mBAIlC,GAAiBpD,EAAAA,EAAAA,IACfN,EAAc,CAAC,aAAcpH,EAASgL,KAAKC,UAAU/K,IAAc,MACnE,SAACyH,EAAG3H,GAAJ,OAAgBI,EAAAA,EAAAA,IAASJ,EAASE,KAClCmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAWF,SAASwK,IAGd,+DAF2G,GAAzGzI,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SAFgFsD,EAEhF,EAFgFA,OAChFrD,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IAGzE+D,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChBsK,OALFA,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,GAK5B,CAAEuD,OAAQ4G,QAAUnK,EACnCkD,MAAO,CACLwH,MAAK,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAQzE,KAAI,SAACnE,GAAD,OAAQA,EAAGgJ,mBAIlC,GAAiBpD,EAAAA,EAAAA,IACfN,EAAc,CAAC,SAAUpH,EAASgL,KAAKC,UAAU/K,IAAc,MAC/D,SAACyH,EAAG3H,GAAJ,OAAgBW,EAAAA,EAAAA,IAAUX,EAASE,KACnCmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAYF,SAASyK,EAAT,GAGL,MAFE1I,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SAFgFjG,EAEhF,EAFgFA,MAAO6K,EAEvF,EAFuFA,MACvF3E,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IAGzE+D,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChB8L,MAAOA,EACPxB,OANFA,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,GAM5B,CAAEuD,OAAQ4G,QAAUnK,EACnCkD,MAAO,CACLpC,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAO2J,gBAIlB,GAAiBpD,EAAAA,EAAAA,IACfN,EAAc,CAAC,eAAgBpH,EAASgL,KAAKC,UAAU/K,IAAc,MACrE,SAACyH,EAAG3H,GAAJ,OAAgBa,EAAAA,EAAAA,IAAgBb,EAASE,KACzCmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAWF,SAAS2K,KAGd,+DAF2G,GAAzG5I,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SAFgF4E,EAEhF,EAFgFA,MAChF3E,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IAGzE+D,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChB8L,MAAOA,EACPxB,OANFA,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,GAM5B,CAAEuD,OAAQ4G,QAAUnK,GAGrC,GAAiBqH,EAAAA,EAAAA,IACfN,EAAc,CAAC,UAAWpH,EAASgL,KAAKC,UAAU/K,IAAc,MAChE,SAACyH,EAAG3H,GAAJ,OAAgBoC,EAAAA,EAAAA,IAAWpC,EAASE,KACpCmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAYF,SAAS4K,GAAT,GAGL,MAFE7I,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SAFgF4E,EAEhF,EAFgFA,MAAOzL,EAEvF,EAFuFA,MACvF8G,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IAGzE+D,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChB8L,MAAOA,EACPxB,OANFA,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,GAM5B,CAAEuD,OAAQ4G,QAAUnK,EACnCkD,MAAO,CACL4I,QAAO,OAAE5L,QAAF,IAAEA,OAAF,EAAEA,EAAO0F,KAAI,SAACnE,GAAD,OAAQA,EAAGgJ,mBAInC,GAAiBpD,EAAAA,EAAAA,IACfN,EAAc,CAAC,eAAgBpH,EAASgL,KAAKC,UAAU/K,IAAc,MACrE,SAACyH,EAAG3H,GAAJ,OAAgB0C,EAAAA,EAAAA,IAAgB1C,EAASE,KACzCmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAWF,SAAS8K,GAAT,GAGL,MAFE/I,EAEF,EAFEA,UAAWmH,EAEb,EAFaA,MAEb,IAFoBxK,QAAAA,OAEpB,OAF8BmH,EAAAA,EAAAA,MAAqBnH,QAEnD,MAF4DoH,YAAAA,OAE5D,SAFgFjG,EAEhF,EAFgFA,MAChFkG,EACA,4DAD8BhH,EAExBsK,GAAe1D,EAAAA,EAAAA,IAAS,CAAE5D,UAAAA,EAAW+D,YAAaA,KAAiB/D,IACzEmH,EAAK,UAAGA,SAAH,QAAanH,EAAYsH,OAAetK,EAE7C+G,EAAcA,KAAiBpH,EAE/B,IAAME,EAAY,CAChB4B,GAAE,OAAEX,QAAF,IAAEA,OAAF,EAAEA,EAAO2J,cACXN,MAAOA,EAAQ,CAAE5G,OAAQ4G,QAAUnK,GAGrC,GAAiBqH,EAAAA,EAAAA,IACfN,EAAc,CAAC,aAAcpH,EAASgL,KAAKC,UAAU/K,IAAc,MACnE,SAACyH,EAAG3H,GAAJ,OAAgB6C,EAAAA,EAAAA,IAAc7C,EAASE,KACvCmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,E,ykBCpaF,SAAS+K,KAAsD,IAAvBhF,EAAuB,4DAAXhH,EACzD,GAAoB8G,EAAAA,EAAAA,KAAZnH,EAAR,EAAQA,QACFoH,EAAcpH,GAAWA,IAAYF,EAAAA,GAAAA,SAC3C,GAAiB4H,EAAAA,EAAAA,IACfN,EAAc,8BAAgC,MAC9C,kBAAMlC,EAAAA,EAAAA,QACNmC,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAGF,SAASgL,KAAoD,IAAvBjF,EAAuB,4DAAXhH,EACvD,GAAoB8G,EAAAA,EAAAA,KAAZnH,EAAR,EAAQA,QACFoH,EAAcpH,GAAWA,IAAYF,EAAAA,GAAAA,SAC3C,GAAiB4H,EAAAA,EAAAA,IACfN,EAAc,4BAA8B,MAC5C,kBAAM9B,EAAAA,EAAAA,QACN+B,GAHM/F,EAAR,EAAQA,KAKR,OAAOA,EAGF,SAASiL,KAAwF,MAAnErM,EAAmE,4DAAvDG,EAAWL,EAA4C,4DAAlCK,EAAWgH,EAAuB,4DAAXhH,EAErF+G,GADNpH,EAAO,UAAGA,SAAH,SAAcmH,EAAAA,EAAAA,KAAqBnH,UACXA,IAAYF,EAAAA,GAAAA,SAC3C,GAAiB4H,EAAAA,EAAAA,IACfN,EAAc,CAAC,oBAAqB4D,KAAKC,UAAU/K,IAAc,MACjE,kBAAMuF,EAAAA,EAAAA,IAAqBvF,KAC3BmH,GAHM/F,EAAR,EAAQA,KAKR,OAAOmG,EAAAA,EAAAA,UAAQ,WACb,OAAKnG,EACEA,EAAK2E,KAAI,SAAC3E,GAAD,UAAC,MAAeA,GAAhB,IAAsBkL,KAAM/M,EAAAA,GAAAA,gBAD1B,KAEjB,CAAC6B,IAGC,SAASmL,KAId,MAFAzM,EAEA,4DAFUK,EACVgH,EACA,4DAD8BhH,EAGxB+G,GADNpH,EAAO,UAAGA,SAAH,SAAcmH,EAAAA,EAAAA,KAAqBnH,UACXA,IAAYF,EAAAA,GAAAA,SAC3C,GAAiB4H,EAAAA,EAAAA,IAAON,EAAc,oBAAsB,MAAM,kBAAMxB,EAAAA,EAAAA,QAAwByB,GAAxF/F,EAAR,EAAQA,KACR,OAAOmG,EAAAA,EAAAA,UAAQ,WACb,OAAKnG,EACEA,EAAK2E,KAAI,SAAC3E,GAAD,UAAC,MAAeA,GAAhB,IAAsBkL,KAAM/M,EAAAA,GAAAA,mBAD1B,KAEjB,CAAC6B,IAGC,SAASoL,KAA8F,IAArFxM,EAAqF,4DAAzEG,EAAWL,EAA8D,4DAApDK,EAClDsM,EAAoBJ,GAAqBrM,EAAWF,GACpD4M,EAAoBH,GAAqBvM,EAAWF,GAI1D,OAAOyH,EAAAA,EAAAA,UACL,kBAAMoF,GAAAA,CAAOF,EAAmBC,GAAmBE,QAAO,SAAC5G,GAAD,OAAUA,GAAQA,EAAKwC,UACjF,CAACiE,EAAmBC,M,uhBC5ElBG,GAAmBjF,EAAAA,EAAAA,IAAH,mGAQTxE,GAAawE,EAAAA,EAAAA,IAAH,6LAMnBiF,GAGS/I,GAAc8D,EAAAA,EAAAA,IAAH,mUAYpBiF,GC7BSvK,GAAesF,EAAAA,EAAAA,IAAH,2KAsCZkF,IA5BelF,EAAAA,EAAAA,IAAH,sJAOOA,EAAAA,EAAAA,IAAH,yaAqBDA,EAAAA,EAAAA,IAAH,yFAOZ9F,GAAgB8F,EAAAA,EAAAA,IAAH,sKAMtBkF,GAGSnL,GAAkBiG,EAAAA,EAAAA,IAAH,+HASfmF,GAAqBnF,EAAAA,EAAAA,IAAH,0LAclBzF,GAAgByF,EAAAA,EAAAA,IAAH,4OAMtBmF,GAISC,GAAkBpF,EAAAA,EAAAA,IAAH,scAoFf5F,IArDY4F,EAAAA,EAAAA,IAAH,4JAMlBoF,IAGwBpF,EAAAA,EAAAA,IAAH,0HAQKA,EAAAA,EAAAA,IAAH,wGAQMA,EAAAA,EAAAA,IAAH,8gBA4BSA,EAAAA,EAAAA,IAAH,kUAevBxH,GAAawH,EAAAA,EAAAA,IAAH,2bAoBnBoF,GAuBSC,IApBuBrF,EAAAA,EAAAA,IAAH,+ZAoBDA,EAAAA,EAAAA,IAAH,6NAiChBhH,IAjBagH,EAAAA,EAAAA,IAAH,+JAMnBqF,IAGyBrF,EAAAA,EAAAA,IAAH,4HAQQA,EAAAA,EAAAA,IAAH,yYAgBlBhF,GAAkBgF,EAAAA,EAAAA,IAAH,ggBAuBxBoF,GAGStM,GAAckH,EAAAA,EAAAA,IAAH,2YAWpBqF,GAGS1M,IAAmBqH,EAAAA,EAAAA,IAAH,qcAoBzBqF,GAISxK,IAAoBmF,EAAAA,EAAAA,IAAH,0hCCtVjBpC,IAAaoC,EAAAA,EAAAA,IAAH,woBAoDV3C,KAnBiC2C,EAAAA,EAAAA,IAAH,+cAmBKA,EAAAA,EAAAA,IAAH,qMAShCvC,IAAiCuC,EAAAA,EAAAA,IAAH,gMC7D9BjC,IAAeiC,EAAAA,EAAAA,IAAH,ynBAkCqBA,EAAAA,EAAAA,IAAH","sources":["webpack://_N_E/./src/components/Container/index.tsx","webpack://_N_E/./src/features/onsen/enum.ts","webpack://_N_E/./src/services/graph/constants/index.ts","webpack://_N_E/./src/services/graph/fetchers/exchange.ts","webpack://_N_E/./src/services/graph/fetchers/blocks.ts","webpack://_N_E/./src/services/graph/fetchers/masterchef.ts","webpack://_N_E/./src/services/graph/fetchers/index.ts","webpack://_N_E/./src/services/graph/hooks/blocks.ts","webpack://_N_E/./src/services/graph/queries/bentobox.ts","webpack://_N_E/./src/services/graph/fetchers/bentobox.ts","webpack://_N_E/./src/services/graph/hooks/bentobox.ts","webpack://_N_E/./src/services/graph/hooks/exchange.ts","webpack://_N_E/./src/services/graph/hooks/index.ts","webpack://_N_E/./src/services/graph/queries/blocks.ts","webpack://_N_E/./src/services/graph/queries/exchange.ts","webpack://_N_E/./src/services/graph/queries/masterchef.ts","webpack://_N_E/./src/services/graph/queries/masterchef-v2.ts"],"sourcesContent":["import { classNames } from '../../functions'\n\nconst MAX_WIDTH = {\n  full: 'max-w-full',\n  '7xl': 'max-w-7xl',\n  '6xl': 'max-w-6xl',\n  '5xl': 'max-w-5xl',\n  '4xl': 'max-w-4xl',\n  '3xl': 'max-w-3xl',\n  '2xl': 'max-w-2xl',\n  xl: 'max-w-xl',\n  lg: 'max-w-lg',\n  md: 'max-w-md',\n  sm: 'max-w-sm',\n  xs: 'max-w-xs',\n}\n\nconst Container = ({ children, maxWidth = '2xl', className = '', ...rest }) => (\n  <div className={classNames(className, MAX_WIDTH[maxWidth], 'w-full')} {...rest}>\n    {children}\n  </div>\n)\n\nexport default Container\n","export enum Chef {\n  MASTERCHEF,\n  MASTERCHEF_V2,\n}\n\nexport enum Rewarder {\n  SIMPLE,\n  COMPLEX,\n  ALCX,\n}\n\nexport enum PairType {\n  SWAP,\n  KASHI,\n}\n","import { ChainId } from '@mistswapdex/sdk'\nconst THE_GRAPH = 'http://127.0.0.1:8000';\n\nexport const GRAPH_HOST = {\n  // [ChainId.SMARTBCH]: THE_GRAPH,\n  // [ChainId.SMARTBCH_AMBER]: THE_GRAPH,\n}\n","import {\n  dayDatasQuery,\n  ethPriceQuery,\n  factoryQuery,\n  liquidityPositionsQuery,\n  pairsQuery,\n  tokenDayDatasQuery,\n  tokenPairsQuery,\n  tokenPriceQuery,\n  tokenQuery,\n  tokenSubsetQuery,\n  tokensQuery,\n  transactionsQuery,\n} from '../queries'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { GRAPH_HOST } from '../constants'\nimport { pager } from './'\n\nexport const EXCHANGE = {\n  [ChainId.SMARTBCH]: 'mistswapdex/exchange',\n}\n\nexport const exchange = async (chainId = ChainId.SMARTBCH, query, variables = {}) =>\n  pager(`${GRAPH_HOST[chainId]}/subgraphs/name/${EXCHANGE[chainId]}`, query, variables)\n\nexport const getPairs = async (chainId = ChainId.SMARTBCH, variables = undefined, query = pairsQuery) => {\n  const { pairs } = await exchange(chainId, query, variables)\n  return pairs\n}\n\nexport const getTokenSubset = async (chainId = ChainId.SMARTBCH, variables) => {\n  // console.log('getTokenSubset')\n  const { tokens } = await exchange(chainId, tokenSubsetQuery, variables)\n  return tokens\n}\n\nexport const getTokens = async (chainId = ChainId.SMARTBCH, variables) => {\n  // console.log('getTokens')\n  const { tokens } = await exchange(chainId, tokensQuery, variables)\n  return tokens\n}\n\nexport const getToken = async (chainId = ChainId.SMARTBCH, query = tokenQuery, variables) => {\n  // console.log('getTokens')\n  const { token } = await exchange(chainId, query, variables)\n  return token\n}\n\nexport const getTokenDayData = async (chainId = ChainId.SMARTBCH, variables) => {\n  // console.log('getTokens')\n  const { tokenDayDatas } = await exchange(chainId, tokenDayDatasQuery, variables)\n  return tokenDayDatas\n}\n\nexport const getTokenPrices = async (chainId = ChainId.SMARTBCH, variables) => {\n  // console.log('getTokenPrice')\n  const { tokens } = await exchange(chainId, tokensQuery, variables)\n  return tokens.map((token) => token?.derivedETH)\n}\n\nexport const getTokenPrice = async (chainId = ChainId.SMARTBCH, query, variables) => {\n  // console.log('getTokenPrice')\n  const nativePrice = await getNativePrice(chainId)\n\n  const { token } = await exchange(chainId, query, variables)\n  return token?.derivedETH * nativePrice\n}\n\nexport const getNativePrice = async (chainId = ChainId.SMARTBCH, variables = undefined) => {\n  // console.log('getEthPrice')\n  const data = await getBundle(chainId, undefined, variables)\n  return data?.bundles[0]?.ethPrice\n}\n\nexport const getEthPrice = async (variables = undefined) => {\n  return getNativePrice(ChainId.SMARTBCH, variables)\n}\n\nexport const getYggPrice = async (variables = {}) => {\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x25f8087ead173b73d6e8b84329989a8eea16cf73',\n    ...variables,\n  })\n}\n\nexport const getRulerPrice = async (variables = {}) => {\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x2aeccb42482cc64e087b6d2e5da39f5a7a7001f8',\n    ...variables,\n  })\n}\n\nexport const getTruPrice = async (variables = {}) => {\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x4c19596f5aaff459fa38b0f7ed92f11ae6543784',\n    ...variables,\n  })\n}\n\nexport const getCvxPrice = async (variables = {}) => {\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x4e3fbd56cd56c3e72c1403e103b45db9da5b9d2b',\n    ...variables,\n  })\n}\n\nexport const getMaticPrice = async (variables = {}) => {\n  console.log('getMaticPrice')\n  // return getTokenPrice(ChainId.MATIC, tokenPriceQuery, {\n  //   id: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n  //   ...variables,\n  // })\n}\n\nexport const getAlcxPrice = async (variables = {}) => {\n  // console.log('getAlcxPrice')\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0xdbdb4d16eda451d0503b854cf79d55697f90c8df',\n    ...variables,\n  })\n}\n\nexport const getPicklePrice = async (variables = {}) => {\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x429881672b9ae42b8eba0e26cd9c73711b891ca5',\n    ...variables,\n  })\n}\n\nexport const getMphPrice = async (variables = {}) => {\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x8888801af4d980682e47f1a9036e589479e835c5',\n    ...variables,\n  })\n}\n\nexport const getSushiPrice = async (variables = {}) => {\n  // console.log('getSushiPrice')\n  return getTokenPrice(ChainId.SMARTBCH, tokenPriceQuery, {\n    id: '0x6b3595068778dd592e39a122f4f5a5cf09c90fe2',\n    ...variables,\n  })\n}\n\nexport const getStakePrice = async (variables = {}) => {\n  // return getTokenPrice(ChainId.XDAI, tokenPriceQuery, {\n  //   id: '0xb7d311e2eb55f2f68a9440da38e7989210b9a05e',\n  //   ...variables,\n  // })\n}\n\nexport const getOnePrice = async (variables = undefined) => {\n  // return getNativePrice(ChainId.HARMONY, variables)\n}\n\nexport const getAvaxPrice = async (variables = undefined) => {\n  // return getNativePrice(ChainId.AVALANCHE, variables)\n}\n\nexport const getBundle = async (\n  chainId = ChainId.SMARTBCH,\n  query = ethPriceQuery,\n  variables = {\n    id: 1,\n  }\n) => {\n  return exchange(chainId, query, variables)\n}\n\nexport const getLiquidityPositions = async (chainId = ChainId.SMARTBCH, variables) => {\n  const { liquidityPositions } = await exchange(chainId, liquidityPositionsQuery, variables)\n  return liquidityPositions\n}\n\nexport const getDayData = async (chainId = ChainId.SMARTBCH, variables = undefined) => {\n  const { dayDatas } = await exchange(chainId, dayDatasQuery, variables)\n  return dayDatas\n}\n\nexport const getFactory = async (chainId = ChainId.SMARTBCH, variables = undefined) => {\n  const { factories } = await exchange(chainId, factoryQuery, variables)\n  return factories[0]\n}\n\nexport const getTransactions = async (chainId = ChainId.SMARTBCH, variables = undefined) => {\n  const { swaps } = await exchange(chainId, transactionsQuery, variables)\n  return swaps\n}\n\nexport const getTokenPairs = async (chainId = ChainId.SMARTBCH, variables = undefined) => {\n  const { pairs0, pairs1 } = await exchange(chainId, tokenPairsQuery, variables)\n  return pairs0 || pairs1 ? [...(pairs0 ? pairs0 : []), ...(pairs1 ? pairs1 : [])] : undefined\n}\n","import { blockQuery, blocksQuery, massBlocksQuery } from '../queries'\nimport { getUnixTime, startOfHour, subDays, subHours } from 'date-fns'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { GRAPH_HOST } from '../constants'\nimport { request } from 'graphql-request'\n\nexport const BLOCKS = {}\n\nexport const fetcher = async (chainId = ChainId.SMARTBCH, query, variables = undefined) => {\n  return request(`${GRAPH_HOST[chainId]}/subgraphs/name/${BLOCKS[chainId]}`, query, variables)\n}\n\nexport const getBlock = async (chainId = ChainId.SMARTBCH, timestamp: number) => {\n  const { blocks } = await fetcher(\n    chainId,\n    blockQuery,\n    timestamp\n      ? {\n          where: {\n            timestamp_gt: timestamp - 600,\n            timestamp_lt: timestamp,\n          },\n        }\n      : {}\n  )\n\n  return Number(blocks?.[0]?.number)\n}\n\nexport const getBlocks = async (chainId = ChainId.SMARTBCH, start, end) => {\n  const { blocks } = await fetcher(chainId, blocksQuery, {\n    start,\n    end,\n  })\n  return blocks\n}\n\nexport const getMassBlocks = async (chainId = ChainId.SMARTBCH, timestamps) => {\n  const data = await fetcher(chainId, massBlocksQuery(timestamps))\n  return Object.values(data).map((entry) => ({\n    number: Number(entry[0].number),\n    timestamp: Number(entry[0].timestamp),\n  }))\n}\n\n// Grabs the last 1000 (a sample statistical) blocks and averages\n// the time difference between them\nexport const getAverageBlockTime = async (chainId = ChainId.SMARTBCH) => {\n  // console.log('getAverageBlockTime')\n  const now = startOfHour(Date.now())\n  const start = getUnixTime(subHours(now, 6))\n  const end = getUnixTime(now)\n  const blocks = await getBlocks(chainId, start, end)\n  const averageBlockTime = blocks?.reduce(\n    (previousValue, currentValue, currentIndex) => {\n      if (previousValue.timestamp) {\n        const difference = previousValue.timestamp - currentValue.timestamp\n\n        previousValue.averageBlockTime = previousValue.averageBlockTime + difference\n      }\n\n      previousValue.timestamp = currentValue.timestamp\n\n      if (currentIndex === blocks.length - 1) {\n        return previousValue.averageBlockTime / blocks.length\n      }\n\n      return previousValue\n    },\n    { timestamp: null, averageBlockTime: 0 }\n  )\n\n  return averageBlockTime\n}\n","import {\n  masterChefV1PairAddressesQuery,\n  masterChefV1SushiPerBlockQuery,\n  masterChefV1TotalAllocPointQuery,\n  masterChefV2PairAddressesQuery,\n  poolsQuery,\n  poolsV2Query,\n} from '../queries'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { GRAPH_HOST } from '../constants'\nimport { getTokenSubset } from './exchange'\nimport { request } from 'graphql-request'\n\nexport const MASTERCHEF_V2 = {\n  [ChainId.SMARTBCH]: 'sushiswap/master-chefv2',\n}\n\nexport const masterChefV2 = async (query, chainId = ChainId.SMARTBCH, variables = undefined) =>\n  request(`${GRAPH_HOST[chainId]}/subgraphs/name/${MASTERCHEF_V2[chainId]}`, query, variables)\n\nexport const MASTERCHEF_V1 = {\n  [ChainId.SMARTBCH]: 'sushiswap/master-chef',\n}\n\nexport const masterChefV1 = async (query, chainId = ChainId.SMARTBCH, variables = undefined) =>\n  request(`${GRAPH_HOST[chainId]}/subgraphs/name/${MASTERCHEF_V1[chainId]}`, query, variables)\n\nexport const getMasterChefV1TotalAllocPoint = async () => {\n  const {\n    masterChef: { totalAllocPoint },\n  } = await masterChefV1(masterChefV1TotalAllocPointQuery)\n  return totalAllocPoint\n}\n\nexport const getMasterChefV1SushiPerBlock = async () => {\n  const {\n    masterChef: { sushiPerBlock },\n  } = await masterChefV1(masterChefV1SushiPerBlockQuery)\n  return sushiPerBlock / 1e18\n}\n\nexport const getMasterChefV1Farms = async (variables = undefined) => {\n  const { pools } = await masterChefV1(poolsQuery, undefined, variables)\n  return pools\n}\n\nexport const getMasterChefV1PairAddreses = async () => {\n  const { pools } = await masterChefV1(masterChefV1PairAddressesQuery)\n  return pools\n}\n\nexport const getMasterChefV2Farms = async (variables = undefined) => {\n  const { pools } = await masterChefV2(poolsV2Query, undefined, variables)\n\n  const tokens = await getTokenSubset(ChainId.SMARTBCH, {\n    tokenAddresses: Array.from(pools.map((pool) => pool.rewarder.rewardToken)),\n  })\n\n  return pools.map((pool) => ({\n    ...pool,\n    rewardToken: {\n      ...tokens.find((token) => token.id === pool.rewarder.rewardToken),\n    },\n  }))\n}\n\nexport const getMasterChefV2PairAddreses = async () => {\n  const { pools } = await masterChefV2(masterChefV2PairAddressesQuery)\n  return pools\n}\n","import { request } from 'graphql-request'\n\nexport async function pager(endpoint, query, variables = {}) {\n  if (endpoint.includes('undefined')) return {}\n\n  let data: any = {}\n  let skip = 0\n  let flag = true\n  while (flag) {\n    flag = false\n    const req = await request(endpoint, query, variables)\n    Object.keys(req).forEach((key) => {\n      data[key] = data[key] ? [...data[key], ...req[key]] : req[key]\n    })\n\n    Object.values(req).forEach((entry: any) => {\n      if (entry.length === 1000) flag = true\n    })\n\n    if (Object.keys(variables).includes('first')) break\n\n    skip += 1000\n    variables = { ...variables, skip }\n  }\n  return data\n}\n\nexport * from './blocks'\nexport * from './exchange'\nexport * from './masterchef'\nexport * from './status'\n","import { getAverageBlockTime, getBlock, getMassBlocks } from '../fetchers'\n\nimport { useActiveWeb3React } from '../../../hooks'\nimport useSWR, { SWRConfiguration } from 'swr'\nimport { useMemo } from 'react'\n\ninterface useBlockProps {\n  timestamp?: number\n  daysAgo?: number\n  chainId?: number\n  shouldFetch?: boolean\n}\n\nexport function useBlock(\n  { timestamp, daysAgo, chainId = useActiveWeb3React().chainId, shouldFetch = true }: useBlockProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  shouldFetch = shouldFetch && !!chainId\n  timestamp = timestamp\n    ? String(timestamp).length !== 13\n      ? Number(timestamp)\n      : Math.floor(Number(timestamp) / 1000)\n    : undefined\n  timestamp = useMemo(() => (daysAgo ? Math.floor(Date.now() / 1000) - daysAgo * 86400 : timestamp), [daysAgo])\n\n  const { data } = useSWR(\n    shouldFetch ? ['block', chainId, timestamp] : null,\n    (_, chainId, timestamp) => getBlock(chainId, timestamp),\n    swrConfig\n  )\n\n  return data\n}\n\nexport function useMassBlocks(timestamps: number[] | string[], swrConfig = undefined) {\n  const { chainId } = useActiveWeb3React()\n\n  const { data } = useSWR(\n    chainId ? ['massBlocks', chainId] : null,\n    (_, chainId) => getMassBlocks(chainId, timestamps),\n    swrConfig\n  )\n\n  return data\n}\n\nexport function useAverageBlockTime(swrConfig = undefined) {\n  const { chainId } = useActiveWeb3React()\n\n  const { data } = useSWR(\n    chainId ? ['averageBlockTime', chainId] : null,\n    (_, chainId) => getAverageBlockTime(chainId),\n    swrConfig\n  )\n\n  return data\n}\n","import gql from 'graphql-tag'\n\nexport const bentoTokenFieldsQuery = gql`\n  fragment bentoTokenFields on Token {\n    id\n    # bentoBox\n    name\n    symbol\n    decimals\n    totalSupplyElastic\n    totalSupplyBase\n    block\n    timestamp\n  }\n`\n\nexport const bentoUserTokensQuery = gql`\n  query bentoUserTokens($user: String!, $skip: Int = 0, $first: Int = 1000, $block: Block_height) {\n    userTokens(skip: $skip, first: $first, block: $block, where: { share_gt: 0, user: $user }) {\n      token {\n        ...bentoTokenFields\n      }\n      share\n    }\n  }\n  ${bentoTokenFieldsQuery}\n`\n\nexport const kashiPairFieldsQuery = gql`\n  fragment kashiPairFields on KashiPair {\n    id\n    # bentoBox\n    type\n    masterContract\n    owner\n    feeTo\n    name\n    symbol\n    oracle\n    asset {\n      ...bentoTokenFields\n    }\n    collateral {\n      ...bentoTokenFields\n    }\n    exchangeRate\n    totalAssetElastic\n    totalAssetBase\n    totalCollateralShare\n    totalBorrowElastic\n    totalBorrowBase\n    interestPerSecond\n    utilization\n    feesEarnedFraction\n    totalFeesEarnedFraction\n    lastAccrued\n    supplyAPR\n    borrowAPR\n    # transactions\n    # users\n    block\n    timestamp\n  }\n  ${bentoTokenFieldsQuery}\n`\n\nexport const kashiPairsQuery = gql`\n  query kashiPairs(\n    $skip: Int = 0\n    $first: Int = 1000\n    $where: KashiPair_filter\n    $block: Block_height\n    $orderBy: KashiPair_orderBy = \"utilization\"\n    $orderDirection: OrderDirection! = \"desc\"\n  ) {\n    kashiPairs(\n      skip: $skip\n      first: $first\n      where: $where\n      block: $block\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n    ) {\n      ...kashiPairFields\n    }\n  }\n  ${kashiPairFieldsQuery}\n`\n\nexport const kashiUserPairsQuery = gql`\n  query kashiUserPairs($user: String!, $skip: Int = 0, $first: Int = 1000, $block: Block_height) {\n    userKashiPairs(skip: $skip, first: $first, block: $block, where: { user: $user }) {\n      assetFraction\n      collateralShare\n      borrowPart\n      pair {\n        ...kashiPairFields\n      }\n    }\n  }\n  ${kashiPairFieldsQuery}\n`\n","import { bentoUserTokensQuery, kashiPairsQuery, kashiUserPairsQuery } from '../queries/bentobox'\nimport { getFraction, toAmount } from '../../../functions'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { GRAPH_HOST } from '../constants'\nimport { getTokenSubset } from './exchange'\nimport { pager } from '.'\n\nexport const BENTOBOX = {\n  // [ChainId.MAINNET]: 'sushiswap/bentobox',\n  // [ChainId.XDAI]: 'sushiswap/xdai-bentobox',\n  // [ChainId.MATIC]: 'sushiswap/matic-bentobox',\n  // [ChainId.FANTOM]: 'sushiswap/fantom-bentobox',\n  // [ChainId.BSC]: 'sushiswap/bsc-bentobox',\n  // [ChainId.ARBITRUM]: 'sushiswap/arbitrum-bentobox',\n}\nexport const fetcher = async (chainId = ChainId.SMARTBCH, query, variables = undefined) =>\n  pager(`${GRAPH_HOST[chainId]}/subgraphs/name/${BENTOBOX[chainId]}`, query, variables)\n\nexport const getKashiPairs = async (chainId = ChainId.SMARTBCH, variables = undefined) => {\n  const { kashiPairs } = await fetcher(chainId, kashiPairsQuery, variables)\n\n  const tokens = await getTokenSubset(chainId, {\n    tokenAddresses: Array.from(\n      kashiPairs.reduce(\n        (previousValue, currentValue) => previousValue.add(currentValue.asset.id, currentValue.collateral.id),\n        new Set() // use set to avoid duplicates\n      )\n    ),\n  })\n\n  return kashiPairs.map((pair) => ({\n    ...pair,\n    token0: {\n      ...pair.asset,\n      ...tokens.find((token) => token.id === pair.asset.id),\n    },\n    token1: {\n      ...pair.collateral,\n      ...tokens.find((token) => token.id === pair.collateral.id),\n    },\n    assetAmount: Math.floor(pair.totalAssetBase / getFraction({ ...pair, token0: pair.asset })).toString(),\n    borrowedAmount: toAmount(\n      {\n        bentoAmount: pair.totalBorrowElastic.toBigNumber(0),\n        bentoShare: pair.totalBorrowBase.toBigNumber(0),\n      },\n      pair.totalBorrowElastic.toBigNumber(0)\n    ).toString(),\n    collateralAmount: toAmount(\n      {\n        bentoAmount: pair.collateral.totalSupplyElastic.toBigNumber(0),\n        bentoShare: pair.collateral.totalSupplyBase.toBigNumber(0),\n      },\n      pair.totalCollateralShare.toBigNumber(0)\n    ).toString(),\n  }))\n}\n\nexport const getUserKashiPairs = async (chainId = ChainId.SMARTBCH, variables) => {\n  const { userKashiPairs } = await fetcher(chainId, kashiUserPairsQuery, variables)\n\n  return userKashiPairs.map((userPair) => ({\n    ...userPair,\n    assetAmount: Math.floor(\n      userPair.assetFraction / getFraction({ ...userPair.pair, token0: userPair.pair.asset })\n    ).toString(),\n    borrowedAmount: toAmount(\n      {\n        bentoAmount: userPair.pair.totalBorrowElastic.toBigNumber(0),\n        bentoShare: userPair.pair.totalBorrowBase.toBigNumber(0),\n      },\n      userPair.borrowPart.toBigNumber(0)\n    ).toString(),\n    collateralAmount: toAmount(\n      {\n        bentoAmount: userPair.pair.collateral.totalSupplyElastic.toBigNumber(0),\n        bentoShare: userPair.pair.collateral.totalSupplyBase.toBigNumber(0),\n      },\n      userPair.collateralShare.toBigNumber(0)\n    ).toString(),\n  }))\n}\n\nexport const getBentoUserTokens = async (chainId = ChainId.SMARTBCH, variables) => {\n  const { userTokens } = await fetcher(chainId, bentoUserTokensQuery, variables)\n\n  return userTokens\n    .map((token) => ({\n      ...(token.token as any),\n      shares: token.share as string,\n    }))\n    .map((token) => ({\n      ...token,\n      amount: toAmount(\n        {\n          bentoAmount: token.totalSupplyElastic.toBigNumber(0),\n          bentoShare: token.totalSupplyBase.toBigNumber(0),\n        },\n        token.shares.toBigNumber(0)\n      ).toString(),\n    }))\n}\n","import { useEffect, useMemo } from 'react'\nimport useSWR, { SWRConfiguration } from 'swr'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { getKashiPairs, getUserKashiPairs, getBentoUserTokens } from '../fetchers/bentobox'\nimport { useActiveWeb3React } from '../../../hooks'\nimport { useBlock } from './blocks'\nimport { Feature, featureEnabled } from '../../../functions/feature'\n\ninterface useKashiPairsProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  user?: string\n  subset?: string[]\n}\n\nexport function useKashiPairs(\n  {\n    timestamp,\n    block,\n    chainId = useActiveWeb3React().chainId,\n    shouldFetch = true,\n    user,\n    subset,\n  }: useKashiPairsProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch ? featureEnabled(Feature['KASHI'], chainId) : false\n\n  const variables = {\n    block: block ? { number: block } : undefined,\n    where: {\n      user: user?.toLowerCase(),\n      id_in: subset?.map((id) => id.toLowerCase()),\n    },\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? () => ['kashiPairs', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getKashiPairs(chainId, variables),\n    swrConfig\n  )\n\n  return data\n}\n\nexport function useUserKashiPairs(variables = undefined, chainId = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId: chainIdSelected, account } = useActiveWeb3React()\n  chainId = chainId ?? chainIdSelected\n\n  const shouldFetch = chainId && account\n\n  variables =\n    Object.keys(variables ?? {}).includes('user') && account\n      ? variables\n      : account\n      ? { ...variables, user: account.toLowerCase() }\n      : ''\n\n  const { data } = useSWR(\n    shouldFetch ? ['userKashiPairs', chainId, JSON.stringify(variables)] : null,\n    () => getUserKashiPairs(chainId, variables),\n    swrConfig\n  )\n\n  return data\n}\n\nexport function useBentoUserTokens(\n  variables = undefined,\n  chainId = undefined,\n  swrConfig: SWRConfiguration = undefined\n) {\n  const { chainId: chainIdSelected, account } = useActiveWeb3React()\n  chainId = chainId ?? chainIdSelected\n\n  const shouldFetch = chainId && account\n\n  variables = Object.keys(variables ?? {}).includes('user')\n    ? variables\n    : account\n    ? { ...variables, user: account.toLowerCase() }\n    : ''\n\n  const { data } = useSWR(\n    shouldFetch ? ['bentoUserTokens', chainId, JSON.stringify(variables)] : null,\n    () => getBentoUserTokens(chainId, variables),\n    swrConfig\n  )\n\n  return data\n}\n","import {\n  exchange,\n  getAlcxPrice,\n  getAvaxPrice,\n  getBundle,\n  getCvxPrice,\n  getDayData,\n  getFactory,\n  getLiquidityPositions,\n  getMaticPrice,\n  getMphPrice,\n  getNativePrice,\n  getOnePrice,\n  getPicklePrice,\n  getRulerPrice,\n  getStakePrice,\n  getSushiPrice,\n  getToken,\n  getTokenDayData,\n  getTokenPairs,\n  getTokens,\n  getTransactions,\n  getTruPrice,\n  getYggPrice,\n} from '../fetchers'\nimport { getEthPrice, getPairs } from '../fetchers'\nimport useSWR, { SWRConfiguration } from 'swr'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { ethPriceQuery } from '../queries'\nimport { useActiveWeb3React } from '../../../hooks'\nimport { useBlock } from './blocks'\nimport { first } from 'lodash'\n\ninterface useFactoryProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n}\n\nexport function useFactory(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true }: useFactoryProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    block: block ? { number: block } : undefined,\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['factory', chainId, JSON.stringify(variables)] : null,\n    () => getFactory(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useNativePriceProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n}\n\nexport function useNativePrice(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true }: useNativePriceProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, chainId, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    block: block ? { number: block } : undefined,\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['nativePrice', chainId, JSON.stringify(variables)] : null,\n    () => getNativePrice(chainId, variables),\n    swrConfig\n  )\n\n  return data\n}\n\nexport function useEthPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { data } = useSWR(['ethPrice', JSON.stringify(variables)], () => getEthPrice(variables), swrConfig)\n  return data\n}\n\nexport function useStakePrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { data } = useSWR(['stakePrice', JSON.stringify(variables)], () => getStakePrice(variables), swrConfig)\n  return data\n}\n\nexport function useOnePrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { data } = useSWR(['onePrice', JSON.stringify(variables)], () => getOnePrice(variables), swrConfig)\n  return data\n}\n\nexport function useYggPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const { data } = useSWR(\n    null,\n    () => getYggPrice(),\n    swrConfig\n  )\n  return data\n}\n\nexport function useRulerPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const { data } = useSWR(\n    null,\n    () => getRulerPrice(variables),\n    swrConfig\n  )\n  return data\n}\n\nexport function useTruPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const { data } = useSWR(\n    null,\n    () => getTruPrice(),\n    swrConfig\n  )\n  return data\n}\n\nexport function useAlcxPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const shouldFetch = false\n  const { data } = useSWR(\n    shouldFetch ? ['aclxPrice', JSON.stringify(variables)] : null,\n    () => getAlcxPrice(variables),\n    swrConfig\n  )\n  return data\n}\n\nexport function useCvxPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const shouldFetch = false\n  const { data } = useSWR(\n    shouldFetch ? ['cvxPrice', JSON.stringify(variables)] : null,\n    () => getCvxPrice(variables),\n    swrConfig\n  )\n  return data\n}\n\nexport function usePicklePrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const { data } = useSWR(\n    null,\n    () => getPicklePrice(),\n    swrConfig\n  )\n  return data\n}\n\nexport function useMphPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const { data } = useSWR(\n    null,\n    () => getMphPrice(),\n    swrConfig\n  )\n  return data\n}\n\nexport function useAvaxPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { data } = useSWR(['avaxPrice', JSON.stringify(variables)], () => getAvaxPrice(variables), swrConfig)\n  return data\n}\n\nexport function useMaticPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { data } = useSWR(['maticPrice', JSON.stringify(variables)], () => getMaticPrice(variables), swrConfig)\n  return data\n}\n\nexport function useSushiPrice(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { data } = useSWR(['sushiPrice', JSON.stringify(variables)], () => getSushiPrice(variables), swrConfig)\n  return data\n}\n\nexport function useBundle(variables = undefined, swrConfig: SWRConfiguration = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const { data } = useSWR(\n    chainId ? [chainId, ethPriceQuery, JSON.stringify(variables)] : null,\n    () => getBundle(),\n    swrConfig\n  )\n  return data\n}\n\ninterface useLiquidityPositionsProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  user?: string\n}\n\nexport function useLiquidityPositions(\n  {\n    timestamp,\n    block,\n    chainId = useActiveWeb3React().chainId,\n    shouldFetch = true,\n    user,\n  }: useLiquidityPositionsProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, chainId, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    block: block ? { number: block } : undefined,\n    where: {\n      user: user?.toLowerCase(),\n      liquidityTokenBalance_gt: '0',\n    },\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['liquidityPositions', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getLiquidityPositions(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useSushiPairsProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  user?: string\n  subset?: string[]\n}\n\nexport function useSushiPairs(\n  {\n    timestamp,\n    block,\n    chainId = useActiveWeb3React().chainId,\n    shouldFetch = true,\n    user,\n    subset,\n  }: useSushiPairsProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    block: block ? { number: block } : undefined,\n    where: {\n      user: user?.toLowerCase(),\n      id_in: subset?.map((id) => id.toLowerCase()),\n    },\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['sushiPairs', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getPairs(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useTokensProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  subset?: string[]\n}\n\nexport function useTokens(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true, subset }: useTokensProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    block: block ? { number: block } : undefined,\n    where: {\n      id_in: subset?.map((id) => id.toLowerCase()),\n    },\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['tokens', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getTokens(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useTokenDayDataProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  token: string\n  first?: number\n}\n\nexport function useTokenDayData(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true, token, first }: useTokenDayDataProps,\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    first: first,\n    block: block ? { number: block } : undefined,\n    where: {\n      token: token?.toLowerCase(),\n    },\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['tokenDayDaya', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getTokenDayData(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useDayDataProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  first?: number\n}\n\nexport function useDayData(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true, first }: useDayDataProps = {},\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    first: first,\n    block: block ? { number: block } : undefined,\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['dayData', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getDayData(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useTransactionsProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  first?: number\n  pairs: string[]\n}\n\nexport function useTransactions(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true, first, pairs }: useTransactionsProps,\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    first: first,\n    block: block ? { number: block } : undefined,\n    where: {\n      pair_in: pairs?.map((id) => id.toLowerCase()),\n    },\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['transactions', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getTransactions(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n\ninterface useTokenPairsProps {\n  timestamp?: number\n  block?: number\n  chainId?: number\n  shouldFetch?: boolean\n  token: string\n}\n\nexport function useTokenPairs(\n  { timestamp, block, chainId = useActiveWeb3React().chainId, shouldFetch = true, token }: useTokenPairsProps,\n  swrConfig: SWRConfiguration = undefined\n) {\n  const blockFetched = useBlock({ timestamp, shouldFetch: shouldFetch && !!timestamp })\n  block = block ?? (timestamp ? blockFetched : undefined)\n\n  shouldFetch = shouldFetch && !!chainId\n\n  const variables = {\n    id: token?.toLowerCase(),\n    block: block ? { number: block } : undefined,\n  }\n\n  const { data } = useSWR(\n    shouldFetch ? ['tokenPairs', chainId, JSON.stringify(variables)] : null,\n    (_, chainId) => getTokenPairs(chainId, variables),\n    swrConfig\n  )\n  return data\n}\n","import {\n  getMasterChefV1Farms,\n  getMasterChefV1PairAddreses,\n  getMasterChefV1SushiPerBlock,\n  getMasterChefV1TotalAllocPoint,\n  getMasterChefV2Farms,\n  getMasterChefV2PairAddreses,\n} from '../fetchers'\nimport { useEffect, useMemo } from 'react'\nimport useSWR, { SWRConfiguration } from 'swr'\n\nimport { ChainId } from '@mistswapdex/sdk'\nimport { Chef } from '../../../features/onsen/enum'\nimport concat from 'lodash/concat'\nimport useActiveWeb3React from '../../../hooks/useActiveWeb3React'\n\nexport * from './bentobox'\nexport * from './blocks'\nexport * from './exchange'\n\nexport function useMasterChefV1TotalAllocPoint(swrConfig = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const shouldFetch = chainId && chainId === ChainId.SMARTBCH\n  const { data } = useSWR(\n    shouldFetch ? 'masterChefV1TotalAllocPoint' : null,\n    () => getMasterChefV1TotalAllocPoint(),\n    swrConfig\n  )\n  return data\n}\n\nexport function useMasterChefV1SushiPerBlock(swrConfig = undefined) {\n  const { chainId } = useActiveWeb3React()\n  const shouldFetch = chainId && chainId === ChainId.SMARTBCH\n  const { data } = useSWR(\n    shouldFetch ? 'masterChefV1SushiPerBlock' : null,\n    () => getMasterChefV1SushiPerBlock(),\n    swrConfig\n  )\n  return data\n}\n\nexport function useMasterChefV1Farms(variables = undefined, chainId = undefined, swrConfig = undefined) {\n  chainId = chainId ?? useActiveWeb3React().chainId\n  const shouldFetch = chainId && chainId === ChainId.SMARTBCH\n  const { data } = useSWR(\n    shouldFetch ? ['masterChefV1Farms', JSON.stringify(variables)] : null,\n    () => getMasterChefV1Farms(variables),\n    swrConfig\n  )\n  return useMemo(() => {\n    if (!data) return []\n    return data.map((data) => ({ ...data, chef: Chef.MASTERCHEF }))\n  }, [data])\n}\n\nexport function useMasterChefV2Farms(\n  variables = undefined,\n  chainId = undefined,\n  swrConfig: SWRConfiguration = undefined\n) {\n  chainId = chainId ?? useActiveWeb3React().chainId\n  const shouldFetch = chainId && chainId === ChainId.SMARTBCH\n  const { data } = useSWR(shouldFetch ? 'masterChefV2Farms' : null, () => getMasterChefV2Farms(), swrConfig)\n  return useMemo(() => {\n    if (!data) return []\n    return data.map((data) => ({ ...data, chef: Chef.MASTERCHEF_V2 }))\n  }, [data])\n}\n\nexport function useFarms(variables = undefined, chainId = undefined, swrConfig: SWRConfiguration = undefined) {\n  const masterChefV1Farms = useMasterChefV1Farms(variables, chainId)\n  const masterChefV2Farms = useMasterChefV2Farms(variables, chainId)\n  // useEffect(() => {\n  //   console.log('debug', { masterChefV1Farms, masterChefV2Farms})\n  // }, [masterChefV1Farms, masterChefV2Farms])\n  return useMemo(\n    () => concat(masterChefV1Farms, masterChefV2Farms).filter((pool) => pool && pool.pair),\n    [masterChefV1Farms, masterChefV2Farms]\n  )\n}\n\nexport function useMasterChefV1PairAddresses() {\n  const { chainId } = useActiveWeb3React()\n  const shouldFetch = chainId && chainId === ChainId.SMARTBCH\n  const { data } = useSWR(shouldFetch ? ['masterChefV1PairAddresses', chainId] : null, (_) =>\n    getMasterChefV1PairAddreses()\n  )\n  return useMemo(() => {\n    if (!data) return []\n    return data.map((data) => data.pair)\n  }, [data])\n}\n\nexport function useMasterChefV2PairAddresses() {\n  const { chainId } = useActiveWeb3React()\n  const shouldFetch = chainId && chainId === ChainId.SMARTBCH\n  const { data } = useSWR(shouldFetch ? ['masterChefV2PairAddresses', chainId] : null, (_) =>\n    getMasterChefV2PairAddreses()\n  )\n  return useMemo(() => {\n    if (!data) return []\n    return data.map((data) => data.pair)\n  }, [data])\n}\n\nexport function useFarmPairAddresses() {\n  const masterChefV1PairAddresses = useMasterChefV1PairAddresses()\n  const masterChefV2PairAddresses = useMasterChefV2PairAddresses()\n  return useMemo(\n    () => concat(masterChefV1PairAddresses, masterChefV2PairAddresses),\n    [masterChefV1PairAddresses, masterChefV2PairAddresses]\n  )\n}\n","import gql from 'graphql-tag'\n\nconst blockFieldsQuery = gql`\n  fragment blockFields on Block {\n    id\n    number\n    timestamp\n  }\n`\n\nexport const blockQuery = gql`\n  query blockQuery($where: Block_filter) {\n    blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: $where) {\n      ...blockFields\n    }\n  }\n  ${blockFieldsQuery}\n`\n\nexport const blocksQuery = gql`\n  query blocksQuery($first: Int! = 1000, $skip: Int! = 0, $start: Int!, $end: Int!) {\n    blocks(\n      first: $first\n      skip: $skip\n      orderBy: number\n      orderDirection: desc\n      where: { timestamp_gt: $start, timestamp_lt: $end }\n    ) {\n      ...blockFields\n    }\n  }\n  ${blockFieldsQuery}\n`\n\nexport const massBlocksQuery = (timestamps: number[] | string[]) =>\n  gql`\n  {\n    ${timestamps.map(\n      (timestamp) =>\n        `\n        block${timestamp}: blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: ${timestamp} }) {\n            ...blockFields\n        },\n      `\n    )},\n  }\n  ${blockFieldsQuery}\n  `\n","import gql from 'graphql-tag'\n\nexport const factoryQuery = gql`\n  query factoryQuery($block: Block_height) {\n    factories(first: 1, block: $block) {\n      id\n      volumeUSD\n      liquidityUSD\n    }\n  }\n`\n\nexport const userIdsQuery = gql`\n  query userIdsQuery($first: Int! = 1000, $skip: Int! = 0) {\n    users(first: $first, skip: $skip) {\n      id\n    }\n  }\n`\nexport const uniswapUserQuery = gql`\n  query uniswapUserQuery($id: String!) {\n    uniswapUser: user(id: $id) {\n      id\n      liquidityPositions {\n        id\n        liquidityTokenBalance\n        # historicalSnapshots {\n        #   id\n        #   reserve0\n        #   reserve1\n        #   block\n        #   timestamp\n        #   liquidityTokenBalance\n        #   liquidityTokenTotalSupply\n        # }\n      }\n    }\n  }\n`\n\nexport const bundleFields = gql`\n  fragment bundleFields on Bundle {\n    id\n    ethPrice\n  }\n`\n\nexport const ethPriceQuery = gql`\n  query ethPriceQuery($id: Int! = 1, $block: Block_height) {\n    bundles(id: $id, block: $block) {\n      ...bundleFields\n    }\n  }\n  ${bundleFields}\n`\n\nexport const tokenPriceQuery = gql`\n  query tokenPriceQuery($id: String!) {\n    token(id: $id) {\n      id\n      derivedETH\n    }\n  }\n`\n\nexport const dayDataFieldsQuery = gql`\n  fragment dayDataFields on DayData {\n    id\n    date\n    volumeETH\n    volumeUSD\n    untrackedVolume\n    liquidityETH\n    liquidityUSD\n    txCount\n  }\n`\n\n// Dashboard...\nexport const dayDatasQuery = gql`\n  query dayDatasQuery($first: Int! = 1000, $date: Int! = 0, $where: DayData_filter) {\n    dayDatas(first: $first, orderBy: date, orderDirection: desc, where: $where) {\n      ...dayDataFields\n    }\n  }\n  ${dayDataFieldsQuery}\n`\n\n// Pairs...\nexport const pairFieldsQuery = gql`\n  fragment pairFields on Pair {\n    id\n    reserveUSD\n    reserveETH\n    volumeUSD\n    untrackedVolumeUSD\n    trackedReserveETH\n    token0 {\n      ...PairToken\n    }\n    token1 {\n      ...PairToken\n    }\n    reserve0\n    reserve1\n    token0Price\n    token1Price\n    totalSupply\n    txCount\n    timestamp\n  }\n  fragment PairToken on Token {\n    id\n    name\n    symbol\n    totalSupply\n    derivedETH\n  }\n`\n\nexport const pairQuery = gql`\n  query pairQuery($id: String!, $block: Block_height) {\n    pair(id: $id, block: $block) {\n      ...pairFields\n    }\n  }\n  ${pairFieldsQuery}\n`\n\nexport const pairIdsQuery = gql`\n  query pairIdsQuery($skip: Int) {\n    pairs(first: 1000, skip: $skip) {\n      id\n    }\n  }\n`\n\nexport const pairCountQuery = gql`\n  query pairCountQuery {\n    uniswapFactories {\n      pairCount\n    }\n  }\n`\n\nexport const pairDayDatasQuery = gql`\n  query pairDayDatasQuery($first: Int = 1000, $skip: Int, $date: Int = 0, $pairs: [Bytes]!) {\n    pairDayDatas(\n      first: $first\n      skip: $skip\n      orderBy: date\n      orderDirection: desc\n      where: { pair_in: $pairs, date_gt: $date }\n    ) {\n      date\n      pair {\n        id\n      }\n      token0 {\n        derivedETH\n      }\n      token1 {\n        derivedETH\n      }\n      reserveUSD\n      volumeToken0\n      volumeToken1\n      volumeUSD\n      txCount\n    }\n  }\n`\n\nexport const liquidityPositionsQuery = gql`\n  query liquidityPositionSubsetQuery($first: Int! = 1000, $skip: Int, $where: LiquidityPosition_filter) {\n    liquidityPositions(first: $first, skip: $skip, where: $where) {\n      id\n      liquidityTokenBalance\n      user {\n        id\n      }\n      pair {\n        id\n      }\n    }\n  }\n`\n\nexport const pairsQuery = gql`\n  query pair(\n    $skip: Int = 0\n    $first: Int = 1000\n    $where: Pair_filter\n    $block: Block_height\n    $orderBy: Pair_orderBy = \"trackedReserveETH\"\n    $orderDirection: OrderDirection = \"desc\"\n  ) {\n    pairs(\n      skip: $skip\n      first: $first\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      block: $block\n      where: $where\n    ) {\n      ...pairFields\n    }\n  }\n  ${pairFieldsQuery}\n`\n\nexport const pairsTimeTravelQuery = gql`\n  query pairsTimeTravelQuery($first: Int! = 1000, $pairAddresses: [Bytes]!, $block: Block_height!) {\n    pairs(\n      first: $first\n      block: $block\n      orderBy: trackedReserveETH\n      orderDirection: desc\n      where: { id_in: $pairAddresses }\n    ) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      untrackedVolumeUSD\n      txCount\n    }\n  }\n`\n\n// Tokens...\nexport const tokenFieldsQuery = gql`\n  fragment tokenFields on Token {\n    id\n    symbol\n    name\n    decimals\n    totalSupply\n    volume\n    volumeUSD\n    untrackedVolumeUSD\n    txCount\n    liquidity\n    derivedETH\n  }\n`\n\nexport const tokenQuery = gql`\n  query tokenQuery($id: String!, $block: Block_height) {\n    token(id: $id, block: $block) {\n      ...tokenFields\n    }\n  }\n  ${tokenFieldsQuery}\n`\n\nexport const tokenIdsQuery = gql`\n  query tokenIdsQuery($skip: Int) {\n    tokens(first: 1000, skip: $skip) {\n      id\n    }\n  }\n`\n\nexport const tokenDayDatasQuery = gql`\n  query tokenDayDatasQuery($first: Int! = 1000, $skip: Int, $block: Block_height, $where: TokenDayData_filter) {\n    tokenDayDatas(first: $first, skip: $skip, orderBy: date, orderDirection: desc, where: $where, block: $block) {\n      id\n      date\n      token {\n        id\n      }\n      volumeUSD\n      liquidityUSD\n      priceUSD\n      txCount\n    }\n  }\n`\n\nexport const tokenPairsQuery = gql`\n  query tokenPairsQuery($id: String!, $skip: Int, $block: Block_height) {\n    pairs0: pairs(\n      first: 1000\n      skip: $skip\n      orderBy: reserveUSD\n      orderDirection: desc\n      where: { token0: $id }\n      block: $block\n    ) {\n      ...pairFields\n    }\n    pairs1: pairs(\n      first: 1000\n      skip: $skip\n      orderBy: reserveUSD\n      orderDirection: desc\n      where: { token1: $id }\n      block: $block\n    ) {\n      ...pairFields\n    }\n  }\n  ${pairFieldsQuery}\n`\n\nexport const tokensQuery = gql`\n  query tokensQuery($first: Int! = 1000, $skip: Int, $block: Block_height, $where: Token_filter) {\n    tokens(first: $first, skip: $skip, orderBy: volumeUSD, orderDirection: desc, block: $block, where: $where) {\n      ...tokenFields\n      dayData(first: 7, orderBy: date, orderDirection: desc) {\n        id\n        priceUSD\n        date\n      }\n    }\n  }\n  ${tokenFieldsQuery}\n`\n\nexport const tokenSubsetQuery = gql`\n  query tokenSubsetQuery(\n    $first: Int! = 1000\n    $skip: Int\n    $tokenAddresses: [Bytes]!\n    $orderBy: String! = \"id\"\n    $orderDirection: String! = \"desc\"\n    $block: Block_height\n  ) {\n    tokens(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      where: { id_in: $tokenAddresses }\n      block: $block\n    ) {\n      ...tokenFields\n    }\n  }\n  ${tokenFieldsQuery}\n`\n\n// Transactions...\nexport const transactionsQuery = gql`\n  query transactionsQuery($first: Int! = 1000, $skip: Int, $block: Block_height, $where: Swap_filter) {\n    swaps(orderBy: timestamp, orderDirection: desc, where: $where) {\n      id\n      timestamp\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      sender\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n    mints(orderBy: timestamp, orderDirection: desc, where: $where) {\n      id\n      timestamp\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n      to\n    }\n    burns(orderBy: timestamp, orderDirection: desc, where: $where) {\n      id\n      timestamp\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n      to\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const poolsQuery = gql`\n  query poolsQuery(\n    $first: Int! = 1000\n    $skip: Int! = 0\n    $orderBy: String! = \"id\"\n    $orderDirection: String! = \"desc\"\n    $block: Block_height\n    $where: Pool_filter! = { allocPoint_gt: 0, accSushiPerShare_gt: 0 }\n  ) {\n    pools(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      block: $block\n      where: $where\n    ) {\n      id\n      pair\n      allocPoint\n      lastRewardBlock\n      accSushiPerShare\n      balance\n      userCount\n      owner {\n        id\n        sushiPerBlock\n        totalAllocPoint\n      }\n    }\n  }\n`\n\nexport const masterChefV1PairAddressesQuery = gql`\n  query masterChefV1PairAddresses(\n    $first: Int! = 1000\n    $skip: Int! = 0\n    $orderBy: String! = \"id\"\n    $orderDirection: String! = \"desc\"\n    $where: Pool_filter! = { allocPoint_gt: 0, accSushiPerShare_gt: 0 }\n  ) {\n    pools(first: $first, skip: $skip, orderBy: $orderBy, orderDirection: $orderDirection, where: $where) {\n      id\n      allocPoint\n      accSushiPerShare\n      pair {\n        id\n      }\n    }\n  }\n`\n\nexport const masterChefV1TotalAllocPointQuery = gql`\n  query masterChefV1TotalAllocPoint($id: String! = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\") {\n    masterChef(id: $id) {\n      id\n      totalAllocPoint\n    }\n  }\n`\n\nexport const masterChefV1SushiPerBlockQuery = gql`\n  query masterChefV1SushiPerBlock($id: String! = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\") {\n    masterChef(id: $id) {\n      id\n      sushiPerBlock\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const poolsV2Query = gql`\n  query poolsV2Query(\n    $first: Int! = 1000\n    $skip: Int! = 0\n    $orderBy: String! = \"id\"\n    $orderDirection: String! = \"desc\"\n    $block: Block_height\n    $where: Pool_filter! = { allocPoint_gt: 0 }\n  ) {\n    pools(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      block: $block\n      where: $where\n    ) {\n      id\n      pair\n      allocPoint\n      slpBalance\n      masterChef {\n        id\n        totalAllocPoint\n      }\n      rewarder {\n        id\n        rewardToken\n        rewardPerSecond\n      }\n    }\n  }\n`\n\nexport const masterChefV2PairAddressesQuery = gql`\n  query masterChefV2PairAddresses(\n    $first: Int! = 1000\n    $skip: Int! = 0\n    $orderBy: String! = \"id\"\n    $orderDirection: String! = \"desc\"\n    $where: Pool_filter! = { allocPoint_gt: 0 }\n  ) {\n    pools(first: $first, skip: $skip, orderBy: $orderBy, orderDirection: $orderDirection, where: $where) {\n      id\n      allocPoint\n      accSushiPerShare\n      pair {\n        id\n      }\n    }\n  }\n`\n"],"names":["MAX_WIDTH","full","xl","lg","md","sm","xs","children","maxWidth","className","rest","classNames","Chef","Rewarder","PairType","GRAPH_HOST","EXCHANGE","ChainId","exchange","chainId","query","variables","pager","getPairs","undefined","pairsQuery","pairs","getTokenSubset","tokenSubsetQuery","tokens","getTokens","tokensQuery","getTokenDayData","tokenDayDatasQuery","tokenDayDatas","getTokenPrice","getNativePrice","nativePrice","token","derivedETH","getBundle","data","bundles","ethPrice","getMaticPrice","console","log","getSushiPrice","tokenPriceQuery","id","getStakePrice","ethPriceQuery","getLiquidityPositions","liquidityPositionsQuery","liquidityPositions","getDayData","dayDatasQuery","dayDatas","getFactory","factoryQuery","factories","getTransactions","transactionsQuery","swaps","getTokenPairs","tokenPairsQuery","pairs0","pairs1","BLOCKS","fetcher","request","getBlock","timestamp","blockQuery","where","timestamp_gt","timestamp_lt","blocks","Number","number","getBlocks","start","end","blocksQuery","getAverageBlockTime","now","startOfHour","Date","getUnixTime","subHours","averageBlockTime","reduce","previousValue","currentValue","currentIndex","difference","length","MASTERCHEF_V2","masterChefV2","MASTERCHEF_V1","masterChefV1","getMasterChefV1TotalAllocPoint","masterChefV1TotalAllocPointQuery","totalAllocPoint","masterChef","getMasterChefV1SushiPerBlock","masterChefV1SushiPerBlockQuery","sushiPerBlock","getMasterChefV1Farms","poolsQuery","pools","getMasterChefV2Farms","poolsV2Query","tokenAddresses","Array","from","map","pool","rewarder","rewardToken","find","endpoint","includes","skip","flag","req","Object","keys","forEach","key","values","entry","useBlock","daysAgo","useActiveWeb3React","shouldFetch","swrConfig","String","Math","floor","useMemo","useSWR","_","useAverageBlockTime","bentoTokenFieldsQuery","gql","bentoUserTokensQuery","kashiPairFieldsQuery","kashiPairsQuery","kashiUserPairsQuery","BENTOBOX","getKashiPairs","kashiPairs","add","asset","collateral","Set","pair","token0","token1","assetAmount","totalAssetBase","getFraction","toString","borrowedAmount","toAmount","bentoAmount","totalBorrowElastic","toBigNumber","bentoShare","totalBorrowBase","collateralAmount","totalSupplyElastic","totalSupplyBase","totalCollateralShare","getUserKashiPairs","userKashiPairs","userPair","assetFraction","borrowPart","collateralShare","getBentoUserTokens","userTokens","shares","share","amount","useKashiPairs","block","user","subset","blockFetched","featureEnabled","Feature","toLowerCase","id_in","JSON","stringify","useUserKashiPairs","chainIdSelected","account","useBentoUserTokens","useFactory","useNativePrice","useStakePrice","useMaticPrice","useSushiPrice","useLiquidityPositions","liquidityTokenBalance_gt","useSushiPairs","useTokens","useTokenDayData","first","useDayData","useTransactions","pair_in","useTokenPairs","useMasterChefV1TotalAllocPoint","useMasterChefV1SushiPerBlock","useMasterChefV1Farms","chef","useMasterChefV2Farms","useFarms","masterChefV1Farms","masterChefV2Farms","concat","filter","blockFieldsQuery","bundleFields","dayDataFieldsQuery","pairFieldsQuery","tokenFieldsQuery"],"sourceRoot":""}