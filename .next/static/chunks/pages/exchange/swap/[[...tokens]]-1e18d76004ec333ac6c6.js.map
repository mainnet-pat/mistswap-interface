{"version":3,"file":"static/chunks/pages/exchange/swap/[[...tokens]]-1e18d76004ec333ac6c6.js","mappings":"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","sources":["webpack://_N_E/./src/components/AddressInputPanel/index.tsx","webpack://_N_E/./src/components/Alert/index.tsx","webpack://_N_E/./src/components/CurrencyInputPanel/FiatValue.tsx","webpack://_N_E/./src/components/CurrencyInputPanel/index.tsx","webpack://_N_E/./src/features/exchange-v1/swap/FormattedPriceImpact.tsx","webpack://_N_E/./src/features/exchange-v1/swap/SwapRoute.tsx","webpack://_N_E/./src/features/exchange-v1/swap/UnsupportedCurrencyFooter.tsx","webpack://_N_E/./src/hooks/useIsArgentWallet.ts","webpack://_N_E/./src/hooks/useIsSwapUnsupported.ts","webpack://_N_E/./src/hooks/useParsedQueryString.ts","webpack://_N_E/./src/hooks/useSwapSlippageTollerence.ts","webpack://_N_E/./src/modals/TokenWarningModal/index.tsx","webpack://_N_E/./src/features/exchange-v1/swap/styleds.tsx","webpack://_N_E/./src/functions/archerRouter.ts","webpack://_N_E/./src/functions/approveAmountCalldata.ts","webpack://_N_E/./src/hooks/useArgentWalletContract.ts","webpack://_N_E/./src/hooks/useSwapCallback.ts","webpack://_N_E/./src/state/swap/hooks.ts","webpack://_N_E/./src/hooks/useWrapCallback.ts","webpack://_N_E/./src/features/exchange-v1/swap/SwapModalFooter.tsx","webpack://_N_E/./src/features/exchange-v1/swap/AdvancedSwapDetails.tsx","webpack://_N_E/./src/features/exchange-v1/swap/TradePrice.tsx","webpack://_N_E/./src/features/exchange-v1/swap/SwapModalHeader.tsx","webpack://_N_E/./src/features/exchange-v1/swap/ConfirmSwapModal.tsx","webpack://_N_E/./src/components/ProgressSteps/index.tsx","webpack://_N_E/./src/pages/exchange/swap/[[...tokens]].tsx","webpack://_N_E/./src/features/exchange-v1/swap/confirmPriceImpactWithoutFee.ts","webpack://_N_E/?88db"],"sourcesContent":["import React, { FC, useCallback } from 'react'\n\nimport Input from '../Input'\nimport { t } from '@lingui/macro'\nimport useENS from '../../hooks/useENS'\nimport { useLingui } from '@lingui/react'\n\ninterface AddressInputPanelProps {\n  id?: string\n  value: string\n  onChange: (value: string) => void\n}\n\nconst AddressInputPanel: FC<AddressInputPanelProps> = ({ id, value, onChange }) => {\n  const { i18n } = useLingui()\n  const { address, loading } = useENS(value)\n\n  const handleInput = useCallback(\n    (input) => {\n      const withoutSpaces = input.replace(/\\s+/g, '')\n      onChange(withoutSpaces)\n    },\n    [onChange]\n  )\n\n  const error = Boolean(value.length > 0 && !loading && !address)\n\n  return (\n    <div\n      className={`flex flex-row bg-dark-800 rounded items-center h-[68px] ${\n        error ? 'border border-red border-opacity-50' : ''\n      }`}\n      id={id}\n    >\n      <div className=\"flex justify-between w-full px-5 sm:w-2/5\">\n        <span className=\"text-[18px] text-primary\">{i18n._(t`Send to:`)}</span>\n        <span className=\"text-sm underline cursor-pointer text-blue\" onClick={() => onChange(null)}>\n          {i18n._(t`Remove`)}\n        </span>\n      </div>\n      <div className=\"flex w-full h-full border-2 rounded-r sm:w-3/5 border-dark-800\">\n        <Input.Address onUserInput={handleInput} value={value} />\n      </div>\n    </div>\n  )\n}\n\nexport default AddressInputPanel\n","import React, { useState } from 'react'\n\nimport { XIcon } from '@heroicons/react/solid'\nimport { classNames } from '../../functions'\n\nconst TYPE = {\n  information: {\n    color: 'bg-purple bg-opacity-20 text-high-emphesis',\n    icon: (\n      <svg\n        width=\"33\"\n        height=\"33\"\n        className=\"text-low-emphesis\"\n        viewBox=\"0 0 33 33\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        path=\"currentColor\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          d=\"M16.5 0C7.40184 0 0 7.40184 0 16.5C0 25.5982 7.40184 33 16.5 33C25.5982 33 33 25.5982 33 16.5C33 7.40184 25.5982 0 16.5 0ZM16.5 25.9909C15.5747 25.9909 14.8245 25.2407 14.8245 24.3154C14.8245 23.39 15.5747 22.6398 16.5 22.6398C17.4253 22.6398 18.1755 23.39 18.1755 24.3154C18.1755 25.2407 17.4253 25.9909 16.5 25.9909ZM18.1755 17.3898C18.1755 18.3152 17.4253 19.0654 16.5 19.0654C15.5747 19.0654 14.8245 18.3152 14.8245 17.3898V8.56534C14.8245 7.63999 15.5747 6.8898 16.5 6.8898C17.4253 6.8898 18.1755 7.63999 18.1755 8.56534V17.3898Z\"\n          fill=\"#575757\"\n        />\n      </svg>\n    ),\n  },\n  warning: {\n    color: 'bg-yellow bg-opacity-25 text-high-emphesis',\n    icon: (\n      <svg\n        className=\"w-5 h-5 text-yellow\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n    ),\n  },\n  error: {\n    color: 'bg-red bg-opacity-25 text-high-emphesis',\n    icon: (\n      <svg\n        className=\"w-5 h-5 text-red\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 20 20\"\n        fill=\"currentColor\"\n        aria-hidden=\"true\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n          clipRule=\"evenodd\"\n        />\n      </svg>\n    ),\n  },\n}\n\nexport interface AlertProps {\n  title?: string\n  message?: string | React.ReactChild | React.ReactChild[]\n  type?: 'warning' | 'error' | 'information'\n  showIcon?: boolean\n  dismissable?: boolean\n}\n\nexport default function Alert({\n  title,\n  message,\n  type = 'warning',\n  className = '',\n  showIcon = false,\n  dismissable = true,\n}: AlertProps & React.HTMLAttributes<HTMLDivElement>): JSX.Element | null {\n  // TODO: Persist this...\n  const [show, setShow] = useState(true)\n  const { color, icon } = TYPE[type]\n  return message && show ? (\n    <div className={classNames('block relative w-full rounded text-sm p-4', show && 'pr-10', color, className)}>\n      {title && <div className=\"mb-1 text-2xl font-medium\">{title}</div>}\n      <div className=\"flex items-center\">\n        {showIcon && <div className=\"flex-shrink-0\">{icon}</div>}\n        <div className={!showIcon ? 'ml-0' : 'ml-3'}>\n          <p className=\"text-base\">{message}</p>\n        </div>\n      </div>\n      {dismissable && (\n        <div className=\"absolute top-2 right-2\">\n          <button\n            type=\"button\"\n            onClick={() => setShow(!show)}\n            className=\"inline-flex opacity-80 hover:opacity-100 focused:opacity-100 rounded p-1.5 text-primary hover:text-high-emphesis focus:text-high-emphesis focus:outline-none focus:ring focus:ring-offset focus:ring-offset-purple focus:ring-purple\"\n          >\n            <span className=\"sr-only\">Dismiss</span>\n            <XIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      )}\n    </div>\n  ) : null\n}\n","import { Currency, CurrencyAmount, Percent } from '@mistswapdex/sdk'\nimport React, { useMemo } from 'react'\n\nimport { t } from '@lingui/macro'\nimport { warningSeverity } from '../../functions/prices'\n\nexport function FiatValue({\n  fiatValue,\n  priceImpact,\n}: {\n  fiatValue: CurrencyAmount<Currency> | null | undefined\n  priceImpact?: Percent\n}) {\n  const priceImpactClassName = useMemo(() => {\n    if (!priceImpact) return undefined\n    if (priceImpact.lessThan('0')) return 'text-green'\n    const severity = warningSeverity(priceImpact)\n    if (severity < 1) return 'text-secondary'\n    if (severity < 3) return 'text-yellow'\n    return 'text-red'\n  }, [priceImpact])\n\n  return (\n    <div className=\"flex justify-end space-x-1 text-xs font-medium text-right text-secondary\">\n      {fiatValue ? (\n        <>\n          ≈$ <div className=\"cursor-pointer\">{fiatValue?.toSignificant(6, { groupSeparator: ',' })}</div>\n        </>\n      ) : (\n        ''\n      )}\n      {priceImpact ? <span className={priceImpactClassName}>{priceImpact.multiply(-1).toSignificant(3)}%</span> : null}\n    </div>\n  )\n}\n","import { Currency, CurrencyAmount, Pair, Percent, Token } from '@mistswapdex/sdk'\nimport React, { ReactNode, useCallback, useState } from 'react'\nimport { classNames, formatCurrencyAmount } from '../../functions'\n\nimport Button from '../Button'\nimport { ChevronDownIcon } from '@heroicons/react/outline'\nimport CurrencyLogo from '../CurrencyLogo'\nimport CurrencySearchModal from '../../modals/SearchModal/CurrencySearchModal'\nimport DoubleCurrencyLogo from '../DoubleLogo'\nimport { FiatValue } from './FiatValue'\nimport Input from '../Input'\nimport Lottie from 'lottie-react'\nimport selectCoinAnimation from '../../animation/select-coin.json'\nimport { t } from '@lingui/macro'\nimport { useActiveWeb3React } from '../../hooks/useActiveWeb3React'\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\nimport { useLingui } from '@lingui/react'\n\ninterface CurrencyInputPanelProps {\n  value?: string\n  onUserInput?: (value: string) => void\n  onMax?: () => void\n  showMaxButton: boolean\n  label?: string\n  onCurrencySelect?: (currency: Currency) => void\n  currency?: Currency | null\n  disableCurrencySelect?: boolean\n  hideBalance?: boolean\n  pair?: Pair | null\n  hideInput?: boolean\n  otherCurrency?: Currency | null\n  fiatValue?: CurrencyAmount<Token> | null\n  priceImpact?: Percent\n  id: string\n  showCommonBases?: boolean\n  renderBalance?: (amount: CurrencyAmount<Currency>) => ReactNode\n  locked?: boolean\n  customBalanceText?: string\n}\n\nexport default function CurrencyInputPanel({\n  value,\n  onUserInput,\n  onMax,\n  showMaxButton,\n  label = 'Input',\n  onCurrencySelect,\n  currency,\n  disableCurrencySelect = false,\n  otherCurrency,\n  id,\n  showCommonBases,\n  renderBalance,\n  fiatValue,\n  priceImpact,\n  hideBalance = false,\n  pair = null, // used for double token logo\n  hideInput = false,\n  locked = false,\n  customBalanceText,\n}: CurrencyInputPanelProps) {\n  const { i18n } = useLingui()\n  const [modalOpen, setModalOpen] = useState(false)\n  const { account } = useActiveWeb3React()\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\n\n  const handleDismissSearch = useCallback(() => {\n    setModalOpen(false)\n  }, [setModalOpen])\n\n  return (\n    <div id={id} className={classNames(hideInput ? 'p-4' : 'p-5', 'rounded bg-dark-800')}>\n      <div className=\"flex flex-col justify-between space-y-3 sm:space-y-0 sm:flex-row\">\n        <div className={classNames('w-full sm:w-2/5')}>\n          <button\n            type=\"button\"\n            className={classNames(\n              !!currency ? 'text-primary' : 'text-high-emphesis',\n              'open-currency-select-button h-full outline-none select-none cursor-pointer border-none text-xl font-medium items-center'\n            )}\n            onClick={() => {\n              if (onCurrencySelect) {\n                setModalOpen(true)\n              }\n            }}\n          >\n            <div className=\"flex\">\n              {pair ? (\n                <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={54} margin={true} />\n              ) : currency ? (\n                <div className=\"flex items-center\">\n                  <CurrencyLogo currency={currency} size={'54px'} />\n                </div>\n              ) : (\n                <div className=\"rounded bg-dark-700\" style={{ maxWidth: 54, maxHeight: 54 }}>\n                  <div style={{ width: 54, height: 54 }}>\n                    <Lottie animationData={selectCoinAnimation} autoplay loop />\n                  </div>\n                </div>\n              )}\n              {pair ? (\n                <span\n                  className={classNames(\n                    'pair-name-container',\n                    Boolean(currency && currency.symbol) ? 'text-2xl' : 'text-xs'\n                  )}\n                >\n                  {pair?.token0.symbol}:{pair?.token1.symbol}\n                </span>\n              ) : (\n                <div className=\"flex flex-1 flex-col items-start justify-center mx-3.5\">\n                  {label && <div className=\"text-xs font-medium text-secondary whitespace-nowrap\">{label}</div>}\n                  <div className=\"flex items-center\">\n                    <div className=\"text-lg font-bold token-symbol-container md:text-2xl\">\n                      {(currency && currency.symbol && currency.symbol.length > 20\n                        ? currency.symbol.slice(0, 4) +\n                          '...' +\n                          currency.symbol.slice(currency.symbol.length - 5, currency.symbol.length)\n                        : currency?.symbol) || (\n                        <div className=\"px-2 py-1 mt-1 text-xs font-medium bg-transparent border rounded-full hover:bg-primary border-low-emphesis text-secondary whitespace-nowrap \">\n                          {i18n._(t`Select a token`)}\n                        </div>\n                      )}\n                    </div>\n\n                    {!disableCurrencySelect && currency && (\n                      <ChevronDownIcon width={16} height={16} className=\"ml-2 stroke-current\" />\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </button>\n        </div>\n        {!hideInput && (\n          <div\n            className={classNames(\n              'flex items-center w-full space-x-3 rounded bg-dark-900 focus:bg-dark-700 p-3 sm:w-3/5'\n              // showMaxButton && selectedCurrencyBalance && 'px-3'\n            )}\n          >\n            <>\n              {showMaxButton && selectedCurrencyBalance && (\n                <Button\n                  onClick={onMax}\n                  size=\"xs\"\n                  className=\"text-xs font-medium bg-transparent border rounded-full hover:bg-primary border-low-emphesis text-secondary whitespace-nowrap\"\n                >\n                  {i18n._(t`Max`)}\n                </Button>\n              )}\n              <Input.Numeric\n                id=\"token-amount-input\"\n                value={value}\n                onUserInput={(val) => {\n                  onUserInput(val)\n                }}\n              />\n              {!hideBalance && currency && selectedCurrencyBalance ? (\n                <div className=\"flex flex-col\">\n                  <div onClick={onMax} className=\"text-xs font-medium text-right cursor-pointer text-low-emphesis\">\n                    {renderBalance ? (\n                      renderBalance(selectedCurrencyBalance)\n                    ) : (\n                      <>\n                        {i18n._(t`Balance:`)} {formatCurrencyAmount(selectedCurrencyBalance, 4)} {currency.symbol}\n                      </>\n                    )}\n                  </div>\n                  <FiatValue fiatValue={fiatValue} priceImpact={priceImpact} />\n                </div>\n              ) : null}\n            </>\n          </div>\n        )}\n      </div>\n      {!disableCurrencySelect && onCurrencySelect && (\n        <CurrencySearchModal\n          isOpen={modalOpen}\n          onDismiss={handleDismissSearch}\n          onCurrencySelect={onCurrencySelect}\n          selectedCurrency={currency}\n          otherSelectedCurrency={otherCurrency}\n          showCommonBases={showCommonBases}\n        />\n      )}\n    </div>\n  )\n}\n","import { ONE_BIPS } from '../../../constants'\nimport { Percent } from '@mistswapdex/sdk'\nimport React from 'react'\nimport { warningSeverity } from '../../../functions/prices'\n\nconst SEVERITY = {\n  0: 'text-green',\n  1: 'text-high-emphesis',\n  2: 'text-yellow',\n  3: 'text-red',\n  4: 'text-red',\n}\n\nexport default function FormattedPriceImpact({ priceImpact }: { priceImpact?: Percent }) {\n  return (\n    <div className={`text-sm font-bold ${SEVERITY[warningSeverity(priceImpact)]}`}>\n      {priceImpact ? `${priceImpact.multiply(-1).toFixed(2)}%` : '-'}\n    </div>\n  )\n}\n","import { Currency, Trade, TradeType } from '@mistswapdex/sdk'\nimport React, { Fragment, memo } from 'react'\n\nimport { ChevronRightIcon } from '@heroicons/react/outline'\nimport { unwrappedToken } from '../../../functions/currency/wrappedCurrency'\n\nconst SwapRoute = memo(({ trade }: { trade: Trade<Currency, Currency, TradeType> }) => {\n  return (\n    <div className=\"flex flex-wrap items-center justify-end\">\n      {trade.route.path.map((token, i, path) => {\n        const isLastItem: boolean = i === path.length - 1\n        const currency = unwrappedToken(token)\n        return (\n          <Fragment key={i}>\n            <div className=\"flex space-x-2 flex-end\">\n              <div className=\"text-sm font-bold text-high-emphesis\">{currency.symbol}</div>\n            </div>\n            {isLastItem ? null : <ChevronRightIcon width={12} height={12} />}\n          </Fragment>\n        )\n      })}\n    </div>\n  )\n})\n\nSwapRoute.displayName = 'SwapRoute'\n\nexport default SwapRoute\n","import { AutoRow, RowBetween } from '../../../components/Row'\nimport { Currency, Token } from '@mistswapdex/sdk'\nimport React, { useState } from 'react'\n\nimport { AutoColumn } from '../../../components/Column'\nimport Button from '../../../components/Button'\nimport CloseIcon from '../../../components/CloseIcon'\nimport CurrencyLogo from '../../../components/CurrencyLogo'\nimport ExternalLink from '../../../components/ExternalLink'\nimport Modal from '../../../components/Modal'\nimport { getExplorerLink } from '../../../functions/explorer'\nimport styled from 'styled-components'\nimport { useActiveWeb3React } from '../../../hooks/useActiveWeb3React'\nimport { useUnsupportedTokens } from '../../../hooks/Tokens'\n\nconst DetailsFooter = styled.div<{ show: boolean }>`\n  padding-top: calc(16px + 2rem);\n  padding-bottom: 20px;\n  margin-top: -2rem;\n  width: 100%;\n  //max-width: 400px;\n  border-bottom-left-radius: 20px;\n  border-bottom-right-radius: 20px;\n  // color: ${({ theme }) => theme.text2};\n  // background-color: ${({ theme }) => theme.advancedBG};\n  z-index: -1;\n\n  transform: ${({ show }) => (show ? 'translateY(0%)' : 'translateY(-100%)')};\n  transition: transform 300ms ease-in-out;\n  text-align: center;\n`\n\nconst AddressText = styled.div`\n  font-size: 12px;\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n    font-size: 10px;\n`}\n`\n\nexport default function UnsupportedCurrencyFooter({\n  show,\n  currencies,\n}: {\n  show: boolean\n  currencies: (Currency | undefined)[]\n}) {\n  const { chainId } = useActiveWeb3React()\n  const [showDetails, setShowDetails] = useState(false)\n\n  const tokens =\n    chainId && currencies\n      ? currencies.map((currency) => {\n          return currency?.wrapped\n        })\n      : []\n\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return (\n    <DetailsFooter show={show}>\n      <Modal isOpen={showDetails} onDismiss={() => setShowDetails(false)}>\n        <div style={{ padding: '2rem' }}>\n          <AutoColumn gap=\"lg\">\n            <RowBetween>\n              <div>Unsupported Assets</div>\n\n              <CloseIcon onClick={() => setShowDetails(false)} />\n            </RowBetween>\n            {tokens.map((token) => {\n              return (\n                token &&\n                unsupportedTokens &&\n                Object.keys(unsupportedTokens).includes(token.address) && (\n                  <div className=\"border border-dark-700\" key={token.address?.concat('not-supported')}>\n                    <AutoColumn gap=\"10px\">\n                      <AutoRow gap=\"5px\" align=\"center\">\n                        <CurrencyLogo currency={token} size={'24px'} />\n                        <div className=\"font-medium\">{token.symbol}</div>\n                      </AutoRow>\n                      {chainId && (\n                        <ExternalLink href={getExplorerLink(chainId, token.address, 'address')}>\n                          <AddressText>{token.address}</AddressText>\n                        </ExternalLink>\n                      )}\n                    </AutoColumn>\n                  </div>\n                )\n              )\n            })}\n            <AutoColumn gap=\"lg\">\n              <div className=\"font-medium\">\n                Some assets are not available through this interface because they may not work well with our smart\n                contract or we are unable to allow trading for legal reasons.\n              </div>\n            </AutoColumn>\n          </AutoColumn>\n        </div>\n      </Modal>\n      <Button variant=\"empty\" style={{ padding: '0px' }} onClick={() => setShowDetails(true)}>\n        <div>Read more about unsupported assets</div>\n      </Button>\n    </DetailsFooter>\n  )\n}\n","import { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\n\nimport { useActiveWeb3React } from './useActiveWeb3React'\nimport { useArgentWalletDetectorContract } from './useContract'\nimport { useMemo } from 'react'\n\nexport default function useIsArgentWallet(): boolean {\n  const { account } = useActiveWeb3React()\n  const argentWalletDetector = useArgentWalletDetectorContract()\n  const inputs = useMemo(() => [account ?? undefined], [account])\n  const call = useSingleCallResult(argentWalletDetector, 'isArgentWallet', inputs, NEVER_RELOAD)\n  return call?.result?.[0] ?? false\n}\n","import { Currency, Token } from '@mistswapdex/sdk'\n\nimport { useMemo } from 'react'\nimport { useUnsupportedTokens } from './Tokens'\n\n/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */\nexport function useIsSwapUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return useMemo(() => {\n    // if unsupported list loaded & either token on list, mark as unsupported\n    return Boolean(\n      unsupportedTokens &&\n        ((currencyIn?.isToken && unsupportedTokens[currencyIn.address]) ||\n          (currencyOut?.isToken && unsupportedTokens[currencyOut.address]))\n    )\n  }, [currencyIn, currencyOut, unsupportedTokens])\n}\n","import { ParsedQs, parse } from 'qs'\n\nimport { useMemo } from 'react'\n\nexport default function useParsedQueryString(): ParsedQs {\n  // const { search } = useLocation()\n  const search = location.search\n  return useMemo(\n    () => (search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}),\n    [search]\n  )\n}\n","import { Currency, Percent, Trade, TradeType } from '@mistswapdex/sdk'\n\nimport { useMemo } from 'react'\nimport { useUserSlippageToleranceWithDefault } from '../state/user/hooks'\n\nconst V2_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10_000) // .50%\nconst ONE_TENTHS_PERCENT = new Percent(10, 10_000) // .10%\n\nexport default function useSwapSlippageTolerance(trade: Trade<Currency, Currency, TradeType> | undefined): Percent {\n  const defaultSlippageTolerance = useMemo(() => {\n    if (!trade) return ONE_TENTHS_PERCENT\n    return V2_SWAP_DEFAULT_SLIPPAGE\n  }, [trade])\n  return useUserSlippageToleranceWithDefault(defaultSlippageTolerance)\n}\n","import React, { useCallback } from 'react'\n\nimport { ImportToken } from '../SearchModal/ImportToken'\nimport Modal from '../../components/Modal'\nimport { Token } from '@mistswapdex/sdk'\n\nexport default function TokenWarningModal({\n  isOpen,\n  tokens,\n  onConfirm,\n}: {\n  isOpen: boolean\n  tokens: Token[]\n  onConfirm: () => void\n}) {\n  const handleDismiss = useCallback(() => {\n      window.location.href = \"/\"\n  }, [])\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={handleDismiss} maxHeight={90}>\n      <ImportToken tokens={tokens} handleCurrencySelect={onConfirm} />\n    </Modal>\n  )\n}\n","import React, { ReactNode } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { AlertTriangle } from 'react-feather'\nimport Slider from 'rc-slider'\nimport Typography from '../../../components/Typography'\n\nexport const Wrapper = styled.div`\n  position: relative;\n  padding: 1rem;\n`\n\nexport const ClickableText = styled(Typography)`\n  :hover {\n    cursor: pointer;\n  }\n`\n\nexport const ArrowWrapper = styled.div<{ clickable: boolean }>`\n  padding: 2px;\n\n  ${({ clickable }) =>\n    clickable\n      ? css`\n          :hover {\n            cursor: pointer;\n            opacity: 0.8;\n          }\n        `\n      : null}\n`\n\nexport const SectionBreak = styled.div`\n  height: 1px;\n  width: 100%;\n  // background-color: ${({ theme }) => theme.bg3};\n`\n\nexport const BottomGrouping = styled.div`\n  margin-top: 1rem;\n`\n\nexport const ErrorText = styled(Typography)<{ severity?: 0 | 1 | 2 | 3 | 4 }>`\n  color: ${({ theme, severity }) =>\n    severity === 3 || severity === 4\n      ? theme.red1\n      : severity === 2\n      ? theme.yellow2\n      : severity === 1\n      ? theme.text3\n      : theme.green1};\n`\n\nexport const StyledBalanceMaxMini = styled.button`\n  height: 22px;\n  width: 22px;\n  // background-color: ${({ theme }) => theme.bg2};\n  border: none;\n  border-radius: 50%;\n  padding: 0.2rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  margin-left: 0.4rem;\n  cursor: pointer;\n  // color: ${({ theme }) => theme.text2};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  float: right;\n\n  :hover {\n    // background-color: ${({ theme }) => theme.bg3};\n  }\n  :focus {\n    // background-color: ${({ theme }) => theme.bg3};\n    outline: none;\n  }\n`\n\n// styles\nexport const Dots = styled.span`\n  &::after {\n    display: inline-block;\n    animation: ellipsis 1.25s infinite;\n    content: '.';\n    width: 1em;\n    text-align: left;\n  }\n  @keyframes ellipsis {\n    0% {\n      content: '.';\n    }\n    33% {\n      content: '..';\n    }\n    66% {\n      content: '...';\n    }\n  }\n`\n\nexport function SwapCallbackError({ error }: { error: ReactNode }) {\n  return (\n    <div className=\"flex items-center justify-center pt-6 text-red\">\n      <AlertTriangle size={16} />\n      <div className=\"ml-4 text-sm\">{error}</div>\n    </div>\n  )\n}\n\nexport const StyledSlider = styled(Slider)`\n  margin: 0.8rem auto 2rem auto;\n  width: 95% !important;\n\n  .rc-slider-mark-text {\n    color: #575757;\n  }\n\n  .rc-slider-mark-text-active {\n    color: #7f7f7f;\n  }\n\n  .rc-slider-rail {\n    background-color: #202231;\n  }\n\n  .rc-slider-track {\n    background: linear-gradient(to right, #27b0e6, #fa52a0);\n  }\n\n  .rc-slider-handle {\n    border-color: #fa52a0;\n  }\n\n  .rc-slider-handle:hover {\n    border-color: #fa52a0;\n  }\n\n  .rc-slider-handle-click-focused:focus {\n    border-color: #fa52a0;\n  }\n\n  .rc-slider-dot-active {\n    border-color: #fa52a0;\n  }\n`\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  SmartBCH,\n  SwapParameters,\n  Trade,\n  TradeOptions,\n  TradeOptionsDeadline,\n  TradeType,\n} from '@mistswapdex/sdk'\n\nimport { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\nexport interface ArcherTrade {\n  amountIn: string\n  amountOut: string\n  path: string[]\n  to: string\n  deadline: string\n}\n\nexport interface ArcherTradeOptions extends TradeOptions {\n  /**\n   * ETH tip for miners\n   */\n  ethTip?: CurrencyAmount<Currency>\n}\n\nexport interface ArcherSwapParameters extends Omit<SwapParameters, 'args'> {\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | ArcherTrade)[]\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nfunction validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\n/**\n * Represents the Archer Router, and has static methods for helping execute trades.\n */\nexport abstract class ArcherRouter {\n  /**\n   * Cannot be constructed.\n   */\n\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    factoryAddress: string,\n    trade: Trade<Currency, Currency, TradeType>,\n    options: ArcherTradeOptions\n  ): ArcherSwapParameters {\n    const etherIn = trade.inputAmount.currency === SmartBCH.onChain(ChainId.SMARTBCH)\n    const etherOut = trade.outputAmount.currency === SmartBCH.onChain(ChainId.SMARTBCH)\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n    invariant('ethTip' in options && options.ethTip?.currency === SmartBCH.onChain(ChainId.SMARTBCH))\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountInCurrency = trade.maximumAmountIn(options.allowedSlippage)\n    const amountIn: string = toHex(amountInCurrency)\n    const amountOutCurrency = trade.minimumAmountOut(options.allowedSlippage)\n    const amountOut: string = toHex(amountOutCurrency)\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n\n    const ethTip = toHex(options.ethTip)\n\n    const archerTrade: ArcherTrade = {\n      amountIn,\n      amountOut,\n      path,\n      to,\n      deadline,\n    }\n\n    let methodName: string\n    let args: (string | string[] | ArcherTrade)[]\n    let value: string\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokensAndTipAmount'\n          args = [factoryAddress, archerTrade, ethTip]\n          value = toHex(amountInCurrency.add(options.ethTip))\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETHAndTipAmount'\n          args = [factoryAddress, archerTrade, ethTip]\n          value = '0x00'\n        } else {\n          methodName = 'swapExactTokensForTokensAndTipAmount'\n          args = [factoryAddress, archerTrade]\n          value = ethTip\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        if (etherIn) {\n          methodName = 'swapETHForExactTokensAndTipAmount'\n          args = [factoryAddress, archerTrade, ethTip]\n          value = toHex(amountInCurrency.add(options.ethTip))\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETHAndTipAmount'\n          args = [factoryAddress, archerTrade, ethTip]\n          value = '0x00'\n        } else {\n          methodName = 'swapTokensForExactTokensAndTipAmount'\n          args = [factoryAddress, archerTrade]\n          value = ethTip\n        }\n        break\n    }\n\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { BigintIsh, Currency, CurrencyAmount, JSBI } from '@mistswapdex/sdk'\n\nimport { Interface } from '@ethersproject/abi'\n\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh)\n  let hex = bigInt.toString(16)\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`\n  }\n  return `0x${hex}`\n}\n\nconst ERC20_INTERFACE = new Interface([\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n])\n\nexport default function approveAmountCalldata(\n  amount: CurrencyAmount<Currency>,\n  spender: string\n): { to: string; data: string; value: '0x0' } {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token')\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)])\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0',\n  }\n}\n","import ARGENT_WALLET_ABI from '../constants/abis/argent-wallet.json'\nimport { Contract } from '@ethersproject/contracts'\nimport { useActiveWeb3React } from './useActiveWeb3React'\nimport { useContract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\n\nexport function useArgentWalletContract(): Contract | null {\n  const { account } = useActiveWeb3React()\n  const isArgentWallet = useIsArgentWallet()\n  return useContract(isArgentWallet ? account ?? undefined : undefined, ARGENT_WALLET_ABI, true)\n}\n","import { BIPS_BASE, EIP_1559_ACTIVATION_BLOCK } from '../constants'\nimport {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  SmartBCH,\n  JSBI,\n  Percent,\n  Router,\n  TradeType,\n  Trade as V2Trade,\n} from '@mistswapdex/sdk'\nimport { arrayify, hexlify, splitSignature } from '@ethersproject/bytes'\nimport { isAddress, isZero } from '../functions/validate'\nimport { useFactoryContract, useRouterContract } from './useContract'\n\nimport { ARCHER_RELAY_URI } from '../config/archer'\nimport { ArcherRouter } from '../functions/archerRouter'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport Common from '@ethereumjs/common'\nimport { SignatureData } from './useERC20Permit'\nimport { TransactionFactory } from '@ethereumjs/tx'\nimport { TransactionRequest } from '@ethersproject/abstract-provider'\nimport approveAmountCalldata from '../functions/approveAmountCalldata'\nimport { calculateGasMargin, getGasPrice } from '../functions/trade'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { shortenAddress } from '../functions/format'\nimport { t } from '@lingui/macro'\nimport { useActiveWeb3React } from './useActiveWeb3React'\nimport { useArgentWalletContract } from './useArgentWalletContract'\nimport { useBlockNumber } from '../state/application/hooks'\nimport useENS from './useENS'\nimport { useMemo } from 'react'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport { useUserArcherETHTip } from '../state/user/hooks'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  address: string\n  calldata: string\n  value: string\n}\n\ninterface SwapCallEstimate {\n  call: SwapCall\n}\n\nexport interface SuccessfulCall extends SwapCallEstimate {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall extends SwapCallEstimate {\n  call: SwapCall\n  error: Error\n}\n\nexport type EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName the ENS name or address of the recipient of the swap output\n * @param signatureData the signature data of the permit of the input token amount, if available\n */\nexport function useSwapCallArguments(\n  trade: V2Trade<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  allowedSlippage: Percent, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  signatureData: SignatureData | null | undefined,\n  useArcher: boolean = false\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n\n  const routerContract = useRouterContract(useArcher)\n  const factoryContract = useFactoryContract()\n\n  const argentWalletContract = useArgentWalletContract()\n\n  const [archerETHTip] = useUserArcherETHTip()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\n\n    if (trade instanceof V2Trade) {\n      if (!routerContract) return []\n      const swapMethods = []\n      if (!useArcher) {\n        swapMethods.push(\n          Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage,\n            recipient,\n            deadline: deadline.toNumber(),\n          })\n        )\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(\n            Router.swapCallParameters(trade, {\n              feeOnTransfer: true,\n              allowedSlippage,\n              recipient,\n              deadline: deadline.toNumber(),\n            })\n          )\n        }\n      } else {\n        swapMethods.push(\n          ArcherRouter.swapCallParameters(factoryContract.address, trade, {\n            allowedSlippage,\n            recipient,\n            ttl: deadline.toNumber(),\n            ethTip: CurrencyAmount.fromRawAmount(SmartBCH.onChain(ChainId.SMARTBCH), archerETHTip),\n          })\n        )\n      }\n      return swapMethods.map(({ methodName, args, value }) => {\n        if (argentWalletContract && trade.inputAmount.currency.isToken) {\n          return {\n            address: argentWalletContract.address,\n            calldata: argentWalletContract.interface.encodeFunctionData('wc_multiCall', [\n              [\n                approveAmountCalldata(trade.maximumAmountIn(allowedSlippage), routerContract.address),\n                {\n                  to: routerContract.address,\n                  value: value,\n                  data: routerContract.interface.encodeFunctionData(methodName, args),\n                },\n              ],\n            ]),\n            value: '0x0',\n          }\n        } else {\n          // console.log({ methodName, args })\n          return {\n            address: routerContract.address,\n            calldata: routerContract.interface.encodeFunctionData(methodName, args),\n            value,\n          }\n        }\n      })\n    }\n  }, [\n    account,\n    allowedSlippage,\n    archerETHTip,\n    argentWalletContract,\n    chainId,\n    deadline,\n    library,\n    factoryContract,\n    recipient,\n    routerContract,\n    trade,\n    useArcher,\n  ])\n}\n\n/**\n * This is hacking out the revert reason from the ethers provider thrown error however it can.\n * This object seems to be undocumented by ethers.\n * @param error an error from the ethers provider\n */\nexport function swapErrorToUserReadableMessage(error: any): string {\n  let reason: string | undefined\n\n  while (Boolean(error)) {\n    reason = error.reason ?? error.message ?? reason\n    error = error.error ?? error.data?.originalError\n  }\n\n  if (reason?.indexOf('execution reverted: ') === 0) reason = reason.substr('execution reverted: '.length)\n\n  switch (reason) {\n    case 'UniswapV2Router: EXPIRED':\n      return t`The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.`\n    case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n    case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n      return t`This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.`\n    case 'TransferHelper: TRANSFER_FROM_FAILED':\n      return t`The input token cannot be transferred. There may be an issue with the input token.`\n    case 'UniswapV2: TRANSFER_FAILED':\n      return t`The output token cannot be transferred. There may be an issue with the output token.`\n    case 'UniswapV2: K':\n      return t`The Uniswap invariant x*y=k was not satisfied by the swap. This usually means one of the tokens you are swapping incorporates custom behavior on transfer.`\n    case 'Too little received':\n    case 'Too much requested':\n    case 'STF':\n      return t`This transaction will not succeed due to price movement. Try increasing your slippage tolerance.`\n    case 'TF':\n      return t`The output token cannot be transferred. There may be an issue with the output token.`\n    default:\n      if (reason?.indexOf('undefined is not an object') !== -1) {\n        console.error(error, reason)\n        return t`An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading. Note fee on transfer and rebase tokens are incompatible with Uniswap V3.`\n      }\n      return t`Unknown error${reason ? `: \"${reason}\"` : ''}. Try increasing your slippage tolerance.`\n  }\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: V2Trade<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  allowedSlippage: Percent, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  signatureData: SignatureData | undefined | null,\n  archerRelayDeadline?: number // deadline to use for archer relay -- set to undefined for no relay\n): {\n  state: SwapCallbackState\n  callback: null | (() => Promise<string>)\n  error: string | null\n} {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const blockNumber = useBlockNumber()\n\n  const eip1559 =\n    EIP_1559_ACTIVATION_BLOCK[chainId] == undefined ? false : blockNumber >= EIP_1559_ACTIVATION_BLOCK[chainId]\n\n  const useArcher = archerRelayDeadline !== undefined\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName, signatureData, useArcher)\n\n  // console.log({ swapCalls, trade })\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  const [archerETHTip] = useUserArcherETHTip()\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies',\n      }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient',\n        }\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null,\n        }\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n          swapCalls.map((call) => {\n            const { address, calldata, value } = call\n\n            const tx =\n              !value || isZero(value)\n                ? { from: account, to: address, data: calldata }\n                : {\n                    from: account,\n                    to: address,\n                    data: calldata,\n                    value,\n                  }\n\n            // console.log('Estimate gas for valid swap')\n\n            // library.getGasPrice().then((gasPrice) => console.log({ gasPrice }))\n\n            return library\n              .estimateGas(tx)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n                return library\n                  .call(tx)\n                  .then((result) => {\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return {\n                      call,\n                      error: new Error('Unexpected issue with estimating the gas. Please try again.'),\n                    }\n                  })\n                  .catch((callError) => {\n                    console.debug('Call threw error', call, callError)\n                    return {\n                      call,\n                      error: new Error(swapErrorToUserReadableMessage(callError)),\n                    }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        let bestCallOption: SuccessfulCall | SwapCallEstimate | undefined = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n        )\n\n        // check if any calls errored with a recognizable error\n        if (!bestCallOption) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          const firstNoErrorCall = estimatedCalls.find<SwapCallEstimate>(\n            (call): call is SwapCallEstimate => !('error' in call)\n          )\n          if (!firstNoErrorCall) throw new Error('Unexpected error. Could not estimate gas for the swap.')\n          bestCallOption = firstNoErrorCall\n        }\n\n        const {\n          call: { address, calldata, value },\n        } = bestCallOption\n\n        // console.log({ bestCallOption })\n\n        if (!useArcher) {\n          console.log('SWAP WITHOUT ARCHER')\n          console.log(\n            'gasEstimate' in bestCallOption ? { gasLimit: calculateGasMargin(bestCallOption.gasEstimate) } : {}\n          )\n          return library\n            .getSigner()\n            .sendTransaction({\n              from: account,\n              to: address,\n              data: calldata,\n              // let the wallet try if we can't estimate the gas\n              ...('gasEstimate' in bestCallOption ? { gasLimit: calculateGasMargin(bestCallOption.gasEstimate) } : {}),\n              ...(value && !isZero(value) ? { value } : {}),\n              gasPrice: getGasPrice(),\n            })\n            .then((response) => {\n              const inputSymbol = trade.inputAmount.currency.symbol\n              const outputSymbol = trade.outputAmount.currency.symbol\n              const inputAmount = trade.inputAmount.toSignificant(4)\n              const outputAmount = trade.outputAmount.toSignificant(4)\n\n              const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n              const withRecipient =\n                recipient === account\n                  ? base\n                  : `${base} to ${\n                      recipientAddressOrName && isAddress(recipientAddressOrName)\n                        ? shortenAddress(recipientAddressOrName)\n                        : recipientAddressOrName\n                    }`\n\n              addTransaction(response, {\n                summary: withRecipient,\n              })\n\n              return response.hash\n            })\n            .catch((error) => {\n              // if the user rejected the tx, pass this along\n              if (error?.code === 4001) {\n                throw new Error('Transaction rejected.')\n              } else {\n                // otherwise, the error was unexpected and we need to convey that\n                console.error(`Swap failed`, error, address, calldata, value)\n\n                throw new Error(`Swap failed: ${swapErrorToUserReadableMessage(error)}`)\n              }\n            })\n        } else {\n          const postToRelay = (rawTransaction: string, deadline: number) => {\n            // as a wise man on the critically acclaimed hit TV series \"MTV's Cribs\" once said:\n            // \"this is where the magic happens\"\n            const relayURI = chainId ? ARCHER_RELAY_URI[chainId] : undefined\n            if (!relayURI) throw new Error('Could not determine relay URI for this network')\n            const body = JSON.stringify({\n              method: 'archer_submitTx',\n              tx: rawTransaction,\n              deadline: deadline.toString(),\n            })\n            return fetch(relayURI, {\n              method: 'POST',\n              body,\n              headers: {\n                Authorization: process.env.NEXT_PUBLIC_ARCHER_API_KEY ?? '',\n                'Content-Type': 'application/json',\n              },\n            }).then((res) => {\n              if (res.status !== 200) throw Error(res.statusText)\n            })\n          }\n\n          const isMetamask = library.provider.isMetaMask\n\n          if (isMetamask) {\n            // ethers will change eth_sign to personal_sign if it detects metamask\n            // https://github.com/ethers-io/ethers.js/blob/2a7dbf05718e29e550f7a208d35a095547b9ccc2/packages/providers/src.ts/web3-provider.ts#L33\n\n            library.provider.isMetaMask = false\n          }\n\n          const fullTxPromise = library.getBlockNumber().then((blockNumber) => {\n            return library.getSigner().populateTransaction({\n              from: account,\n              to: address,\n              data: calldata,\n              // let the wallet try if we can't estimate the gas\n              ...('gasEstimate' in bestCallOption ? { gasLimit: calculateGasMargin(bestCallOption.gasEstimate) } : {}),\n              ...(value && !isZero(value) ? { value } : {}),\n              gasPrice: getGasPrice(),\n            })\n          })\n\n          let signedTxPromise: Promise<{ signedTx: string; fullTx: TransactionRequest }>\n          if (isMetamask) {\n            signedTxPromise = fullTxPromise.then((fullTx) => {\n              // metamask doesn't support Signer.signTransaction, so we have to do all this manually\n              const chainNames: {\n                [chainId in ChainId]?: string\n              } = {\n                [ChainId.SMARTBCH]: 'smartbch',\n              }\n              const chain = chainNames[chainId]\n              if (!chain) throw new Error(`Unknown chain ID ${chainId} when building transaction`)\n              const common = new Common({\n                chain,\n                hardfork: 'berlin',\n              })\n              const txParams = {\n                nonce:\n                  fullTx.nonce !== undefined\n                    ? hexlify(fullTx.nonce, {\n                        hexPad: 'left',\n                      })\n                    : undefined,\n                gasPrice: fullTx.gasPrice !== undefined ? hexlify(fullTx.gasPrice, { hexPad: 'left' }) : undefined,\n                gasLimit: fullTx.gasLimit !== undefined ? hexlify(fullTx.gasLimit, { hexPad: 'left' }) : undefined,\n                to: fullTx.to,\n                value:\n                  fullTx.value !== undefined\n                    ? hexlify(fullTx.value, {\n                        hexPad: 'left',\n                      })\n                    : undefined,\n                data: fullTx.data?.toString(),\n                chainId: fullTx.chainId !== undefined ? hexlify(fullTx.chainId) : undefined,\n                type: fullTx.type !== undefined ? hexlify(fullTx.type) : undefined,\n              }\n              const tx: any = TransactionFactory.fromTxData(txParams, {\n                common,\n              })\n              const unsignedTx = tx.getMessageToSign()\n              // console.log('unsignedTx', unsignedTx)\n\n              return library.provider\n                .request({ method: 'eth_sign', params: [account, hexlify(unsignedTx)] })\n                .then((signature) => {\n                  const signatureParts = splitSignature(signature)\n                  // really crossing the streams here\n                  // eslint-disable-next-line\n                  // @ts-ignore\n                  const txWithSignature = tx._processSignature(\n                    signatureParts.v,\n                    arrayify(signatureParts.r),\n                    arrayify(signatureParts.s)\n                  )\n                  return {\n                    signedTx: hexlify(txWithSignature.serialize()),\n                    fullTx,\n                  }\n                })\n            })\n          } else {\n            signedTxPromise = fullTxPromise.then((fullTx) => {\n              return library\n                .getSigner()\n                .signTransaction(fullTx)\n                .then((signedTx) => {\n                  return { signedTx, fullTx }\n                })\n            })\n          }\n\n          return signedTxPromise\n            .then(({ signedTx, fullTx }) => {\n              const hash = keccak256(signedTx)\n              const inputSymbol = trade.inputAmount.currency.symbol\n              const outputSymbol = trade.outputAmount.currency.symbol\n              const inputAmount = trade.inputAmount.toSignificant(3)\n              const outputAmount = trade.outputAmount.toSignificant(3)\n              const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n              const withRecipient =\n                (recipient === account\n                  ? base\n                  : `${base} to ${\n                      recipientAddressOrName && isAddress(recipientAddressOrName)\n                        ? shortenAddress(recipientAddressOrName)\n                        : recipientAddressOrName\n                    }`) + (archerRelayDeadline ? ' 🏹' : '')\n              const archer =\n                useArcher && archerRelayDeadline\n                  ? {\n                      rawTransaction: signedTx,\n                      deadline: Math.floor(archerRelayDeadline + new Date().getTime() / 1000),\n                      nonce: BigNumber.from(fullTx.nonce).toNumber(),\n                      ethTip: archerETHTip,\n                    }\n                  : undefined\n              // console.log('archer', archer)\n              addTransaction(\n                { hash },\n                {\n                  summary: withRecipient,\n                  archer,\n                }\n              )\n              return archer ? postToRelay(archer.rawTransaction, archer.deadline).then(() => hash) : hash\n            })\n            .catch((error: any) => {\n              // if the user rejected the tx, pass this along\n              if (error?.code === 4001) {\n                throw new Error('Transaction rejected.')\n              } else {\n                // otherwise, the error was unexpected and we need to convey that\n                console.error(`Swap failed`, error)\n                throw new Error(`Swap failed: ${error.message}`)\n              }\n            })\n            .finally(() => {\n              if (isMetamask) library.provider.isMetaMask = true\n            })\n        }\n      },\n      error: null,\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, useArcher, addTransaction])\n}\n","import { AppDispatch, AppState } from '../index'\nimport {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  JSBI,\n  Percent,\n  MIST_ADDRESS,\n  ROUTER_ADDRESS,\n  FACTORY_ADDRESS,\n  TradeType,\n  Trade as V2Trade,\n  WNATIVE_ADDRESS,\n} from '@mistswapdex/sdk'\nimport { DEFAULT_ARCHER_ETH_TIP, DEFAULT_ARCHER_GAS_ESTIMATE } from '../../config/archer'\nimport {\n  EstimatedSwapCall,\n  SuccessfulCall,\n  swapErrorToUserReadableMessage,\n  useSwapCallArguments,\n} from '../../hooks/useSwapCallback'\n// import {\n//   EstimatedSwapCall,\n//   SuccessfulCall,\n//   useSwapCallArguments,\n// } from \"../../hooks/useSwapCallback\";\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { isAddress, isZero } from '../../functions/validate'\nimport { useAppDispatch, useAppSelector } from '../hooks'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  useExpertModeManager,\n  useUserArcherETHTip,\n  useUserArcherGasEstimate,\n  useUserArcherGasPrice,\n  useUserArcherTipManualOverride,\n  useUserSingleHopOnly,\n  useUserSlippageTolerance,\n} from '../user/hooks'\nimport { useV2TradeExactIn as useTradeExactIn, useV2TradeExactOut as useTradeExactOut } from '../../hooks/useV2Trades'\n\nimport { ParsedQs } from 'qs'\nimport { SwapState } from './reducer'\nimport { t } from '@lingui/macro'\nimport { tryParseAmount } from '../../functions/parse'\nimport { useActiveWeb3React } from '../../hooks/useActiveWeb3React'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport useENS from '../../hooks/useENS'\nimport { useLingui } from '@lingui/react'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport useSwapSlippageTolerance from '../../hooks/useSwapSlippageTollerence'\n\nexport function useSwapState(): AppState['swap'] {\n  return useAppSelector((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useAppDispatch()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency.isToken ? currency.address : 'BCH',\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// TODO: Swtich for ours...\nconst BAD_RECIPIENT_ADDRESSES: { [chainId: string]: { [address: string]: true } } = {\n  [ChainId.SMARTBCH]: {\n    [FACTORY_ADDRESS[ChainId.SMARTBCH]]: true,\n    [ROUTER_ADDRESS[ChainId.SMARTBCH]]: true,\n  },\n  [ChainId.SMARTBCH_AMBER]: {\n    [FACTORY_ADDRESS[ChainId.SMARTBCH_AMBER]]: true,\n    [ROUTER_ADDRESS[ChainId.SMARTBCH_AMBER]]: true,\n  },\n}\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(trade: V2Trade<Currency, Currency, TradeType>, checksummedAddress: string): boolean {\n  const path = trade.route.path\n  return (\n    path.some((token) => token.address === checksummedAddress) ||\n    (trade instanceof V2Trade\n      ? trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n      : false)\n  )\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(doArcher = false): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  inputError?: string\n  v2Trade: V2Trade<Currency, Currency, TradeType> | undefined\n  allowedSlippage: Percent\n} {\n  const { i18n } = useLingui()\n\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n\n  const outputCurrency = useCurrency(outputCurrencyId)\n\n  const recipientLookup = useENS(recipient ?? undefined)\n\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined, {\n    maxHops: singleHopOnly ? 1 : undefined,\n  })\n\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined, {\n    maxHops: singleHopOnly ? 1 : undefined,\n  })\n\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = 'Connect Wallet'\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? i18n._(t`Enter an amount`)\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? i18n._(t`Select a token`)\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? i18n._(t`Enter a recipient`)\n  } else {\n    if (\n      BAD_RECIPIENT_ADDRESSES?.[chainId]?.[formattedTo] ||\n      (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\n      (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\n    ) {\n      inputError = inputError ?? i18n._(t`Invalid recipient`)\n    }\n  }\n\n  const allowedSlippage = useSwapSlippageTolerance(v2Trade)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], v2Trade?.maximumAmountIn(allowedSlippage)]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = i18n._(t`Insufficient ${amountIn.currency.symbol} balance`)\n  }\n\n  const swapCalls = useSwapCallArguments(v2Trade, allowedSlippage, to, undefined, doArcher)\n\n  const [, setUserETHTip] = useUserArcherETHTip()\n  const [userGasEstimate, setUserGasEstimate] = useUserArcherGasEstimate()\n  const [userGasPrice] = useUserArcherGasPrice()\n  const [userTipManualOverride, setUserTipManualOverride] = useUserArcherTipManualOverride()\n\n  useEffect(() => {\n    if (doArcher) {\n      setUserTipManualOverride(false)\n      setUserETHTip(DEFAULT_ARCHER_ETH_TIP.toString())\n      setUserGasEstimate(DEFAULT_ARCHER_GAS_ESTIMATE.toString())\n    }\n  }, [doArcher, setUserTipManualOverride, setUserETHTip, setUserGasEstimate])\n\n  useEffect(() => {\n    if (doArcher && !userTipManualOverride) {\n      setUserETHTip(JSBI.multiply(JSBI.BigInt(userGasEstimate), JSBI.BigInt(userGasPrice)).toString())\n    }\n  }, [doArcher, userGasEstimate, userGasPrice, userTipManualOverride, setUserETHTip])\n\n  useEffect(() => {\n    async function estimateGas() {\n      const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n        swapCalls.map((call) => {\n          const { address, calldata, value } = call\n\n          const tx =\n            !value || isZero(value)\n              ? { from: account, to: address, data: calldata }\n              : {\n                  from: account,\n                  to: address,\n                  data: calldata,\n                  value,\n                }\n\n          return library\n            .estimateGas(tx)\n            .then((gasEstimate) => {\n              return {\n                call,\n                gasEstimate,\n              }\n            })\n            .catch((gasError) => {\n              console.debug('Gas estimate failed, trying eth_call to extract error', call)\n\n              return library\n                .call(tx)\n                .then((result) => {\n                  console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\n                  return {\n                    call,\n                    error: new Error('Unexpected issue with estimating the gas. Please try again.'),\n                  }\n                })\n                .catch((callError) => {\n                  console.debug('Call threw error', call, callError)\n                  return {\n                    call,\n                    error: new Error(swapErrorToUserReadableMessage(callError)),\n                  }\n                })\n            })\n        })\n      )\n\n      // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n      const successfulEstimation = estimatedCalls.find(\n        (el, ix, list): el is SuccessfulCall =>\n          'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n      )\n\n      if (successfulEstimation) {\n        setUserGasEstimate(successfulEstimation.gasEstimate.toString())\n      }\n    }\n    if (doArcher && v2Trade && swapCalls && !userTipManualOverride) {\n      estimateGas()\n    }\n  }, [doArcher, v2Trade, swapCalls, userTipManualOverride, library, setUserGasEstimate])\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    inputError,\n    v2Trade: v2Trade ?? undefined,\n    allowedSlippage,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'BCH') return 'BCH'\n  }\n  return ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\nexport function queryParametersToSwapState(parsedQs: ParsedQs, chainId: ChainId = ChainId.SMARTBCH): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  const eth = 'BCH'\n  const sushi = MIST_ADDRESS[chainId]\n  if (inputCurrency === '' && outputCurrency === '') {\n    inputCurrency = eth\n    outputCurrency = sushi\n  } else if (inputCurrency === '') {\n    inputCurrency = outputCurrency === eth ? sushi : eth\n  } else if (outputCurrency === '' || inputCurrency === outputCurrency) {\n    outputCurrency = inputCurrency === eth ? sushi : eth\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | {\n      inputCurrencyId: string | undefined\n      outputCurrencyId: string | undefined\n    }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const parsedQs = useParsedQueryString()\n  const [expertMode] = useExpertModeManager()\n  const [result, setResult] = useState<\n    | {\n        inputCurrencyId: string | undefined\n        outputCurrencyId: string | undefined\n      }\n    | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs, chainId)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: expertMode ? parsed.recipient : null,\n      })\n    )\n\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n","import { ChainId, Currency, NATIVE, WNATIVE } from '@mistswapdex/sdk'\n\nimport { tryParseAmount } from '../functions/parse'\nimport { getGasPrice } from '../functions/trade'\nimport { useActiveWeb3React } from './useActiveWeb3React'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useMemo } from 'react'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useWBCHContract } from './useContract'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined\n): {\n  wrapType: WrapType\n  execute?: undefined | (() => Promise<void>)\n  inputError?: string\n} {\n  const { chainId, account } = useActiveWeb3React()\n  const wethContract = useWBCHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency)\n      return NOT_APPLICABLE\n    const weth = WNATIVE[chainId]\n    if (!weth) return NOT_APPLICABLE\n\n    const hasInputAmount = Boolean(inputAmount?.greaterThan('0'))\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency.isNative && weth.equals(outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.deposit({\n                    value: `0x${inputAmount.quotient.toString(16)}`,\n                    gasPrice: getGasPrice(),\n                  })\n                  addTransaction(txReceipt, {\n                    summary: `Wrap ${inputAmount.toSignificant(6)} ${NATIVE[chainId].symbol} to ${\n                      WNATIVE[chainId].symbol\n                    }`,\n                  })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : hasInputAmount\n          ? `Insufficient ${NATIVE[chainId].symbol} balance`\n          : `Enter ${NATIVE[chainId].symbol} amount`,\n      }\n    } else if (weth.equals(inputCurrency) && outputCurrency.isNative) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.quotient.toString(16)}`, {\n                    gasPrice: getGasPrice(),\n                  })\n                  addTransaction(txReceipt, {\n                    summary: `Unwrap ${inputAmount.toSignificant(6)} ${WNATIVE[chainId].symbol} to ${\n                      NATIVE[chainId].symbol\n                    }`,\n                  })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : hasInputAmount\n          ? `Insufficient ${WNATIVE[chainId].symbol} balance`\n          : `Enter ${WNATIVE[chainId].symbol} amount`,\n      }\n    } else {\n      return NOT_APPLICABLE\n    }\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\n}\n","import { Currency, TradeType, Trade as V2Trade } from '@mistswapdex/sdk'\nimport React, { ReactNode } from 'react'\n\nimport { ButtonError } from '../../../components/Button'\nimport { SwapCallbackError } from './styleds'\nimport { t } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\n\nexport default function SwapModalFooter({\n  trade,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: V2Trade<Currency, Currency, TradeType>\n  onConfirm: () => void\n  swapErrorMessage: ReactNode | undefined\n  disabledConfirm: boolean\n}) {\n  const { i18n } = useLingui()\n  return (\n    <div className=\"p-6 mt-0 -m-6 rounded bg-dark-800\">\n      {/* <div className=\"grid gap-1 pb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-secondary\">{i18n._(t`Price`)}</div>\n          <div className=\"text-sm font-bold justify-center items-center flex right-align pl-1.5 text-high-emphesis\">\n            {formatExecutionPrice(trade, showInverted, chainId)}\n            <StyledBalanceMaxMini\n              onClick={() => setShowInverted(!showInverted)}\n            >\n              <Repeat size={14} />\n            </StyledBalanceMaxMini>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-secondary\">\n            {trade.tradeType === TradeType.EXACT_INPUT\n              ? i18n._(t`Minimum received`)\n              : i18n._(t`Maximum sold`)}\n            <QuestionHelper\n              text={i18n._(\n                t`Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.`\n              )}\n            />\n          </div>\n          <div className=\"text-sm font-bold justify-center items-center flex right-align pl-1.5 text-high-emphesis\">\n            {trade.tradeType === TradeType.EXACT_INPUT\n              ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? \"-\"\n              : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? \"-\"}\n            <span className=\"ml-1\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-secondary\">\n            <div className=\"text-sm\">\n              {i18n._(t`Price Impact`)}\n              <QuestionHelper\n                text={i18n._(\n                  t`The difference between the market price and your price due to trade size.`\n                )}\n              />\n            </div>\n          </div>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-secondary\">\n            <div className=\"text-sm\">{i18n._(t`Liquidity Provider Fee`)}</div>\n          </div>\n          <div className=\"text-sm font-bold justify-center items-center flex right-align pl-1.5 text-high-emphesis\">\n            {realizedLPFee\n              ? realizedLPFee?.toSignificant(6) +\n                \" \" +\n                trade.inputAmount.currency.symbol\n              : \"-\"}\n          </div>\n        </div>\n        {archerETHTip && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-secondary\">\n              <div className=\"text-sm\">{i18n._(t`Miner Tip`)}</div>\n            </div>\n            <div className=\"text-sm font-bold justify-center items-center flex right-align pl-1.5 text-high-emphesis\">\n              {SmartBCH.fromRawAmount(archerETHTip).toFixed(4)} ETH\n            </div>\n          </div>\n        )}\n      </div> */}\n\n      <ButtonError\n        onClick={onConfirm}\n        disabled={disabledConfirm}\n        id=\"confirm-swap-or-send\"\n        className=\"text-xl font-semibold\"\n      >\n        {i18n._(t`Confirm Swap`)}\n      </ButtonError>\n\n      {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n    </div>\n  )\n}\n","import { ChainId, Currency, CurrencyAmount, SmartBCH, Percent, TradeType, Trade as V2Trade } from '@mistswapdex/sdk'\nimport React, { useMemo } from 'react'\nimport { RowBetween, RowFixed } from '../../../components/Row'\n\nimport { ANALYTICS_URL } from '../../../constants'\nimport ExternalLink from '../../../components/ExternalLink'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport QuestionHelper from '../../../components/QuestionHelper'\nimport SwapRoute from './SwapRoute'\nimport { computeRealizedLPFeePercent } from '../../../functions/prices'\nimport { t } from '@lingui/macro'\nimport { useActiveWeb3React } from '../../../hooks/useActiveWeb3React'\nimport { useLingui } from '@lingui/react'\n\nexport interface AdvancedSwapDetailsProps {\n  trade?: V2Trade<Currency, Currency, TradeType>\n  allowedSlippage: Percent\n  minerBribe?: string\n}\n\nexport function AdvancedSwapDetails({ trade, allowedSlippage, minerBribe }: AdvancedSwapDetailsProps) {\n  const { i18n } = useLingui()\n\n  const { chainId } = useActiveWeb3React()\n\n  const { realizedLPFee, priceImpact } = useMemo(() => {\n    if (!trade) return { realizedLPFee: undefined, priceImpact: undefined }\n\n    const realizedLpFeePercent = computeRealizedLPFeePercent(trade)\n    const realizedLPFee = trade.inputAmount.multiply(realizedLpFeePercent)\n\n    const priceImpact = trade.priceImpact.subtract(realizedLpFeePercent)\n\n    return { priceImpact, realizedLPFee }\n  }, [trade])\n\n  return !trade ? null : (\n    <div className=\"flex flex-col space-y-2\">\n      <div className=\"flex flex-row items-center justify-between\">\n        <span className=\"flex items-center\">\n          <div className=\"text-sm text-secondary\">{i18n._(t`Route`)}</div>\n          <QuestionHelper text={i18n._(t`Routing through these tokens resulted in the best price for your trade.`)} />\n        </span>\n        <SwapRoute trade={trade} />\n      </div>\n\n      <RowBetween>\n        <RowFixed>\n          <div className=\"text-sm text-secondary\">\n            {trade.tradeType === TradeType.EXACT_INPUT ? i18n._(t`Minimum received`) : i18n._(t`Maximum sent`)}\n          </div>\n          <QuestionHelper\n            text={i18n._(\n              t`Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.`\n            )}\n          />\n        </RowFixed>\n        <RowFixed>\n          <div className=\"text-sm font-bold text-high-emphesis\">\n            {trade.tradeType === TradeType.EXACT_INPUT\n              ? `${trade.minimumAmountOut(allowedSlippage).toSignificant(6)} ${trade.outputAmount.currency.symbol}`\n              : `${trade.maximumAmountIn(allowedSlippage).toSignificant(6)} ${trade.inputAmount.currency.symbol}`}\n          </div>\n        </RowFixed>\n      </RowBetween>\n      <RowBetween>\n        <RowFixed>\n          <div className=\"text-sm text-secondary\">{i18n._(t`Price Impact`)}</div>\n          <QuestionHelper\n            text={i18n._(t`The difference between the market price and estimated price due to trade size.`)}\n          />\n        </RowFixed>\n        <FormattedPriceImpact priceImpact={priceImpact} />\n      </RowBetween>\n\n      <RowBetween>\n        <RowFixed>\n          <div className=\"text-sm text-secondary\">{i18n._(t`Liquidity Provider Fee`)}</div>\n          <QuestionHelper\n            text={i18n._(t`A portion of each trade (0.25%) goes to liquidity providers as a protocol incentive.`)}\n          />\n        </RowFixed>\n        <div className=\"text-sm font-bold text-high-emphesis\">\n          {realizedLPFee\n            ? `${realizedLPFee.divide(6).multiply(5).toSignificant(4)} ${realizedLPFee.currency.symbol}`\n            : '-'}\n        </div>\n      </RowBetween>\n\n      <RowBetween>\n        <RowFixed>\n          <div className=\"text-sm text-secondary\">{i18n._(t`xMIST Fee`)}</div>\n          <QuestionHelper\n            text={i18n._(t`A portion of each trade (0.05%) goes to xMIST holders as a protocol incentive.`)}\n          />\n        </RowFixed>\n        <div className=\"text-sm font-bold text-high-emphesis\">\n          {realizedLPFee ? `${realizedLPFee.divide(6).toSignificant(4)} ${realizedLPFee.currency.symbol}` : '-'}\n        </div>\n      </RowBetween>\n\n      <RowBetween>\n        <RowFixed>\n          <div className=\"text-sm text-secondary\">{i18n._(t`Slippage tolerance`)}</div>\n          <QuestionHelper text={i18n._(t`Slippage tolerance...`)} />\n        </RowFixed>\n        <div className=\"text-sm font-bold text-high-emphesis\">{allowedSlippage.toFixed(2)}%</div>\n      </RowBetween>\n\n      {minerBribe && (\n        <RowBetween>\n          <RowFixed>\n            <div className=\"text-sm text-secondary\">{i18n._(t`Miner Tip`)}</div>\n            <QuestionHelper text={i18n._(t`Tip to encourage miners to select this transaction.`)} />\n          </RowFixed>\n          <div className=\"text-sm font-bold text-high-emphesis\">\n            {CurrencyAmount.fromRawAmount(SmartBCH.onChain(ChainId.SMARTBCH), minerBribe).toFixed(4)} BCH\n          </div>\n        </RowBetween>\n      )}\n    </div>\n  )\n}\n","import { Currency, Price } from '@mistswapdex/sdk'\nimport React, { useCallback } from 'react'\n\nimport Typography from '../../../components/Typography'\nimport { classNames } from '../../../functions'\nimport { t } from '@lingui/macro'\nimport { useLingui } from '@lingui/react'\n\ninterface TradePriceProps {\n  price: Price<Currency, Currency>\n  showInverted: boolean\n  setShowInverted: (showInverted: boolean) => void\n  className?: string\n}\n\nexport default function TradePrice({ price, showInverted, setShowInverted, className }: TradePriceProps) {\n  const { i18n } = useLingui()\n\n  const flipPrice = useCallback(() => setShowInverted(!showInverted), [setShowInverted, showInverted])\n\n  const text = GetRateText({price, showInverted});\n\n  return (\n    <div\n      onClick={flipPrice}\n      title={text}\n      className={classNames(\n        'flex justify-between w-full px-5 py-1 cursor-pointer rounded-b-md text-secondary hover:text-primary',\n        className\n      )}\n    >\n      <Typography variant=\"sm\" className=\"select-none\">\n        {i18n._(t`Exchange Rate`)}\n      </Typography>\n      <div className=\"flex items-center space-x-4\">\n        <Typography variant=\"sm\" className=\"select-none\">\n          {text}\n        </Typography>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"w-4 h-4\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"2\"\n            d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\"\n          />\n        </svg>\n      </div>\n    </div>\n  )\n}\n\nexport function GetRateText({ price, showInverted }) {\n  if (!price) {\n    return \"\";\n  }\n\n  let formattedPrice: string\n\n  try {\n    formattedPrice = showInverted ? price.toSignificant(4) : price.invert()?.toSignificant(4)\n  } catch (error) {\n    formattedPrice = '0'\n  }\n\n  const label = showInverted ? `${price.quoteCurrency?.symbol}` : `${price.baseCurrency?.symbol} `\n\n  const labelInverted = showInverted ? `${price.baseCurrency?.symbol} ` : `${price.quoteCurrency?.symbol}`\n\n\n  const text = `${'1 ' + labelInverted + ' = ' + formattedPrice ?? '-'} ${label}`\n\n  return text;\n}\n","import { AlertTriangle, ArrowDown } from 'react-feather'\nimport { Currency, Percent, TradeType, Trade as V2Trade } from '@mistswapdex/sdk'\nimport React, { useState } from 'react'\nimport { isAddress, shortenAddress } from '../../../functions'\n\nimport { AdvancedSwapDetails } from './AdvancedSwapDetails'\nimport Card from '../../../components/Card'\nimport CurrencyLogo from '../../../components/CurrencyLogo'\nimport { Field } from '../../../state/swap/actions'\nimport { RowBetween } from '../../../components/Row'\nimport TradePrice from './TradePrice'\nimport Typography from '../../../components/Typography'\nimport { t } from '@lingui/macro'\nimport { useActiveWeb3React } from '../../../hooks/useActiveWeb3React'\nimport { useLingui } from '@lingui/react'\nimport { useUSDCValue } from '../../../hooks/useUSDCPrice'\nimport { warningSeverity } from '../../../functions'\n\nexport default function SwapModalHeader({\n  trade,\n  allowedSlippage,\n  recipient,\n  showAcceptChanges,\n  onAcceptChanges,\n  minerBribe,\n}: {\n  trade: V2Trade<Currency, Currency, TradeType>\n  allowedSlippage: Percent\n  recipient: string | null\n  showAcceptChanges: boolean\n  onAcceptChanges: () => void\n  minerBribe?: string\n}) {\n  const { i18n } = useLingui()\n\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  const fiatValueInput = useUSDCValue(trade.inputAmount)\n  const fiatValueOutput = useUSDCValue(trade.outputAmount)\n\n  const priceImpactSeverity = warningSeverity(trade.priceImpact)\n\n  return (\n    <div className=\"grid gap-4\">\n      <div className=\"grid gap-2\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <CurrencyLogo currency={trade.inputAmount.currency} size={48} />\n            <div className=\"overflow-ellipsis w-[220px] overflow-hidden font-bold text-2xl text-high-emphesis\">\n              {trade.inputAmount.toSignificant(6)}\n            </div>\n          </div>\n          <div className=\"ml-3 text-2xl font-medium text-high-emphesis\">{trade.inputAmount.currency.symbol}</div>\n        </div>\n        <div className=\"ml-3 mr-3 min-w-[24px]\">\n          <ArrowDown size={24} />\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <CurrencyLogo currency={trade.outputAmount.currency} size={48} />\n            <div\n              className={`overflow-ellipsis w-[220px] overflow-hidden font-bold text-2xl ${\n                priceImpactSeverity > 2 ? 'text-red' : 'text-high-emphesis'\n              }`}\n            >\n              {trade.outputAmount.toSignificant(6)}\n            </div>\n          </div>\n          <div className=\"ml-3 text-2xl font-medium text-high-emphesis\">{trade.outputAmount.currency.symbol}</div>\n        </div>\n      </div>\n\n      <TradePrice\n        price={trade.executionPrice}\n        showInverted={showInverted}\n        setShowInverted={setShowInverted}\n        className=\"px-0\"\n      />\n\n      <AdvancedSwapDetails trade={trade} allowedSlippage={allowedSlippage} minerBribe={minerBribe} />\n\n      {showAcceptChanges ? (\n        <div className=\"flex items-center justify-between p-2 px-3 border border-gray-800 rounded\">\n          <div className=\"flex items-center justify-start text-sm font-bold uppercase text-high-emphesis\">\n            <div className=\"mr-3 min-w-[24px]\">\n              <AlertTriangle size={24} />\n            </div>\n            <span>{i18n._(t`Price Updated`)}</span>\n          </div>\n          <span className=\"text-sm cursor-pointer text-blue\" onClick={onAcceptChanges}>\n            {i18n._(t`Accept`)}\n          </span>\n        </div>\n      ) : null}\n      <div className=\"justify-start text-sm text-secondary\">\n        {trade.tradeType === TradeType.EXACT_INPUT ? (\n          <>\n            {i18n._(t`Output is estimated. You will receive at least`)}{' '}\n            <b>\n              {trade.minimumAmountOut(allowedSlippage).toSignificant(6)} {trade.outputAmount.currency.symbol}\n            </b>{' '}\n            {i18n._(t`or the transaction will revert.`)}\n          </>\n        ) : (\n          <>\n            {i18n._(t`Input is estimated. You will sell at most`)}{' '}\n            <b>\n              {trade.maximumAmountIn(allowedSlippage).toSignificant(6)} {trade.inputAmount.currency.symbol}\n            </b>{' '}\n            {i18n._(t`or the transaction will revert.`)}\n          </>\n        )}\n      </div>\n\n      {recipient !== null ? (\n        <div className=\"flex-start\">\n          <>\n            {i18n._(t`Output will be sent to`)}{' '}\n            <b title={recipient}>{isAddress(recipient) ? shortenAddress(recipient) : recipient}</b>\n          </>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n","import { ChainId, Currency, CurrencyAmount, SmartBCH, Percent, TradeType, Trade as V2Trade } from '@mistswapdex/sdk'\nimport React, { useCallback, useMemo } from 'react'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from '../../../modals/TransactionConfirmationModal'\n\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param args either a pair of V2 trades or a pair of V3 trades\n */\nfunction tradeMeaningfullyDiffers(\n  ...args: [V2Trade<Currency, Currency, TradeType>, V2Trade<Currency, Currency, TradeType>]\n): boolean {\n  const [tradeA, tradeB] = args\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n  minerBribe,\n}: {\n  isOpen: boolean\n  trade: V2Trade<Currency, Currency, TradeType> | undefined\n  originalTrade: V2Trade<Currency, Currency, TradeType> | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: Percent\n  minerBribe?: string\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  onDismiss: () => void\n}) {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n        minerBribe={minerBribe}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n      />\n    ) : null\n  }, [onConfirm, showAcceptChanges, swapErrorMessage, trade])\n\n  // text to show while loading\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\n    trade?.inputAmount?.currency?.symbol\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\n\n  const pendingText2 = minerBribe\n    ? trade?.outputAmount.currency.isNative\n      ? `Minus ${CurrencyAmount.fromRawAmount(SmartBCH.onChain(ChainId.SMARTBCH), minerBribe).toSignificant(\n          6\n        )} BCH Miner Tip`\n      : `Plus ${CurrencyAmount.fromRawAmount(SmartBCH.onChain(ChainId.SMARTBCH), minerBribe).toSignificant(\n          6\n        )} BCH Miner Tip`\n    : undefined\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title=\"Confirm Swap\"\n          onDismiss={onDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n      pendingText2={pendingText2}\n      currencyToAdd={trade?.outputAmount.currency}\n    />\n  )\n}\n","import React from 'react'\nimport { classNames } from '../../functions'\n\ninterface ProgressCirclesProps {\n  steps: boolean[]\n  disabled?: boolean\n}\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\n  return (\n    <div className=\"flex justify-center\" {...rest}>\n      <div className=\"flex justify-between w-1/2\">\n        {steps.map((step, i) => {\n          return (\n            <div className=\"flex items-center w-full\" key={i}>\n              <div\n                className={classNames(\n                  step ? 'bg-green' : 'bg-pink',\n                  (disabled || (!steps[i - 1] && i !== 0)) && 'bg-dark-800',\n                  'min-w-5 min-h-5 rounded-full flex justify-center items-center text-xs'\n                )}\n              >\n                {step ? '✓' : i + 1}\n              </div>\n              <div\n                className={classNames(\n                  disabled && 'bg-dark-1000',\n                  step && 'bg-gradient-to-r from-green to-pink',\n                  steps[i - 1] ? 'bg-gradient-to-r from-pink to-dark-1000' : 'bg-dark-900',\n                  'w-full h-0.5 opacity-60'\n                )}\n              />\n              {/* <Connector prevConfirmed={step} disabled={disabled} /> */}\n            </div>\n          )\n        })}\n        <div\n          className={classNames(\n            (disabled || !steps[steps.length - 1]) && 'bg-dark-800',\n            'min-w-5 min-h-5 rounded-full flex justify-center items-center text-xs'\n          )}\n        >\n          {steps.length + 1}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import {\n  ChainId,\n  Currency,\n  CurrencyAmount,\n  JSBI,\n  Token,\n  TradeType,\n  Trade as V2Trade,\n} from '@mistswapdex/sdk'\nimport { ApprovalState, useApproveCallbackFromTrade } from '../../../hooks/useApproveCallback'\nimport { ArrowWrapper, BottomGrouping, SwapCallbackError } from '../../../features/exchange-v1/swap/styleds'\nimport { ButtonConfirmed, ButtonError } from '../../../components/Button'\nimport Column, { AutoColumn } from '../../../components/Column'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { UseERC20PermitState, useERC20PermitFromTrade } from '../../../hooks/useERC20Permit'\nimport { useAllTokens, useCurrency } from '../../../hooks/Tokens'\nimport {\n  useDefaultsFromURLSearch,\n  useDerivedSwapInfo,\n  useSwapActionHandlers,\n  useSwapState,\n} from '../../../state/swap/hooks'\nimport {\n  useExpertModeManager,\n  useUserArcherETHTip,\n  useUserArcherGasPrice,\n  useUserArcherUseRelay,\n  useUserSingleHopOnly,\n  useUserSlippageTolerance,\n  useUserTransactionTTL,\n} from '../../../state/user/hooks'\nimport { useNetworkModalToggle, useToggleSettingsMenu, useWalletModalToggle } from '../../../state/application/hooks'\nimport useWrapCallback, { WrapType } from '../../../hooks/useWrapCallback'\n\nimport AddressInputPanel from '../../../components/AddressInputPanel'\nimport { AdvancedSwapDetails } from '../../../features/exchange-v1/swap/AdvancedSwapDetails'\nimport AdvancedSwapDetailsDropdown from '../../../features/exchange-v1/swap/AdvancedSwapDetailsDropdown'\nimport Alert from '../../../components/Alert'\nimport { ArrowDownIcon } from '@heroicons/react/outline'\nimport Button from '../../../components/Button'\nimport ConfirmSwapModal from '../../../features/exchange-v1/swap/ConfirmSwapModal'\nimport Container from '../../../components/Container'\nimport CurrencyInputPanel from '../../../components/CurrencyInputPanel'\nimport DoubleGlowShadow from '../../../components/DoubleGlowShadow'\nimport { Field } from '../../../state/swap/actions'\nimport Head from 'next/head'\nimport { INITIAL_ALLOWED_SLIPPAGE } from '../../../constants'\nimport Loader from '../../../components/Loader'\nimport Lottie from 'lottie-react'\nimport MinerTip from '../../../features/exchange-v1/swap/MinerTip'\nimport ProgressSteps from '../../../components/ProgressSteps'\nimport SwapHeader from '../../../features/trade/Header'\nimport TokenWarningModal from '../../../modals/TokenWarningModal'\nimport { default as TradePrice, GetRateText } from '../../../features/exchange-v1/swap/TradePrice'\nimport Typography from '../../../components/Typography'\nimport UnsupportedCurrencyFooter from '../../../features/exchange-v1/swap/UnsupportedCurrencyFooter'\nimport Web3Connect from '../../../components/Web3Connect'\nimport { classNames } from '../../../functions'\nimport { computeFiatValuePriceImpact } from '../../../functions/trade'\nimport confirmPriceImpactWithoutFee from '../../../features/exchange-v1/swap/confirmPriceImpactWithoutFee'\nimport { maxAmountSpend } from '../../../functions/currency'\nimport swapArrowsAnimationData from '../../../animation/swap-arrows.json'\nimport { t } from '@lingui/macro'\nimport { useActiveWeb3React } from '../../../hooks/useActiveWeb3React'\nimport useENSAddress from '../../../hooks/useENSAddress'\nimport useIsArgentWallet from '../../../hooks/useIsArgentWallet'\nimport { useIsSwapUnsupported } from '../../../hooks/useIsSwapUnsupported'\nimport { useLingui } from '@lingui/react'\nimport usePrevious from '../../../hooks/usePrevious'\nimport { useRouter } from 'next/router'\nimport { useSwapCallback } from '../../../hooks/useSwapCallback'\nimport { useUSDCValue } from '../../../hooks/useUSDCPrice'\nimport { warningSeverity } from '../../../functions/prices'\n\nexport default function Swap() {\n  const { i18n } = useLingui()\n\n  const loadedUrlParams = useDefaultsFromURLSearch()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.inputCurrencyId),\n    useCurrency(loadedUrlParams?.outputCurrencyId),\n  ]\n\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c?.isToken ?? false) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useAllTokens()\n  const importTokensNotInDefault =\n    urlLoadedTokens &&\n    urlLoadedTokens.filter((token: Token) => {\n      return !Boolean(token.address in defaultTokens)\n    })\n\n  const { account, chainId } = useActiveWeb3React()\n\n  const toggleNetworkModal = useNetworkModalToggle()\n\n  const router = useRouter()\n\n  // toggle wallet when disconnected\n  const toggleWalletModal = useWalletModalToggle()\n\n  // for expert mode\n  const [isExpertMode] = useExpertModeManager()\n  const toggleSettings = useToggleSettingsMenu()\n\n  // get custom setting values for user\n  const [ttl] = useUserTransactionTTL()\n  const [useArcher] = useUserArcherUseRelay()\n  const [archerETHTip] = useUserArcherETHTip()\n  const [archerGasPrice] = useUserArcherGasPrice()\n\n  // archer\n  const archerRelay = undefined\n  // const doArcher = archerRelay !== undefined && useArcher\n  const doArcher = undefined\n\n  // swap state\n  const { independentField, typedValue, recipient } = useSwapState()\n  const {\n    v2Trade,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n    allowedSlippage,\n  } = useDerivedSwapInfo(doArcher)\n\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const { address: recipientAddress } = useENSAddress(recipient)\n\n  const trade = showWrap ? undefined : v2Trade\n\n  const parsedAmounts = useMemo(\n    () =>\n      showWrap\n        ? {\n            [Field.INPUT]: parsedAmount,\n            [Field.OUTPUT]: parsedAmount,\n          }\n        : {\n            [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n            [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n          },\n    [independentField, parsedAmount, showWrap, trade]\n  )\n\n  const fiatValueInput = useUSDCValue(parsedAmounts[Field.INPUT])\n  const fiatValueOutput = useUSDCValue(parsedAmounts[Field.OUTPUT])\n  const priceImpact = computeFiatValuePriceImpact(fiatValueInput, fiatValueOutput)\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers()\n\n  const isValid = !swapInputError\n\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // reset if they close warning without tokens in params\n  const handleDismissTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n    router.push('/swap/')\n  }, [router])\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: V2Trade<Currency, Currency, TradeType> | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: showWrap\n      ? parsedAmounts[independentField]?.toExact() ?? ''\n      : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\n  }\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n\n  const routeNotFound = !trade?.route\n\n  // check whether the user has approved the router on the input token\n  const [approvalState, approveCallback] = useApproveCallbackFromTrade(trade, allowedSlippage, doArcher)\n\n  const signatureData = undefined\n\n  // const {\n  //   state: signatureState,\n  //   signatureData,\n  //   gatherPermitSignature,\n  // } = useERC20PermitFromTrade(trade, allowedSlippage)\n\n  const handleApprove = useCallback(async () => {\n    await approveCallback()\n    // if (signatureState === UseERC20PermitState.NOT_SIGNED && gatherPermitSignature) {\n    //   try {\n    //     await gatherPermitSignature()\n    //   } catch (error) {\n    //     // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\n    //     if (error?.code !== 4001) {\n    //       await approveCallback()\n    //     }\n    //   }\n    // } else {\n    //   await approveCallback()\n    // }\n  }, [approveCallback])\n  // }, [approveCallback, gatherPermitSignature, signatureState])\n\n  // check if user has gone through approval process, used to show two step buttons, reset on token change\n  const [approvalSubmitted, setApprovalSubmitted] = useState<boolean>(false)\n\n  // mark when a user has submitted an approval, reset onTokenSelection for input field\n  useEffect(() => {\n    if (approvalState === ApprovalState.PENDING) {\n      setApprovalSubmitted(true)\n    }\n  }, [approvalState, approvalSubmitted])\n\n  const maxInputAmount: CurrencyAmount<Currency> | undefined = maxAmountSpend(currencyBalances[Field.INPUT])\n  const showMaxButton = Boolean(maxInputAmount?.greaterThan(0) && !parsedAmounts[Field.INPUT]?.equalTo(maxInputAmount))\n\n  // the callback to execute the swap\n  const { callback: swapCallback, error: swapCallbackError } = useSwapCallback(\n    trade,\n    allowedSlippage,\n    recipient,\n    signatureData,\n    doArcher ? ttl : undefined\n  )\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const handleSwap = useCallback(() => {\n    if (!swapCallback) {\n      return\n    }\n    if (priceImpact && !confirmPriceImpactWithoutFee(priceImpact)) {\n      return\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined,\n    })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: undefined,\n          txHash: hash,\n        })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [\n    swapCallback,\n    priceImpact,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade?.inputAmount?.currency?.symbol,\n    trade?.outputAmount?.currency?.symbol,\n    singleHopOnly,\n  ])\n\n  // errors\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n\n  // warnings on slippage\n  // const priceImpactSeverity = warningSeverity(priceImpactWithoutFee);\n  const priceImpactSeverity = useMemo(() => {\n    const executionPriceImpact = trade?.priceImpact\n    return warningSeverity(\n      executionPriceImpact && priceImpact\n        ? executionPriceImpact.greaterThan(priceImpact)\n          ? executionPriceImpact\n          : priceImpact\n        : executionPriceImpact ?? priceImpact\n    )\n  }, [priceImpact, trade])\n\n  const isArgentWallet = useIsArgentWallet()\n\n  // show approve flow when: no error on inputs, not approved or pending, or approved in current session\n  // never show if price impact is above threshold in non expert mode\n  const showApproveFlow =\n    !isArgentWallet &&\n    !swapInputError &&\n    (approvalState === ApprovalState.NOT_APPROVED ||\n      approvalState === ApprovalState.PENDING ||\n      (approvalSubmitted && approvalState === ApprovalState.APPROVED)) &&\n    !(priceImpactSeverity > 3 && !isExpertMode)\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash,\n    })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm,\n    })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  const handleInputSelect = useCallback(\n    (inputCurrency) => {\n      setApprovalSubmitted(false) // reset 2 step UI for approvals\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    maxInputAmount && onUserInput(Field.INPUT, maxInputAmount.toExact())\n  }, [maxInputAmount, onUserInput])\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection]\n  )\n\n  // useEffect(() => {\n  //   if (\n  //     doArcher &&\n  //     parsedAmounts[Field.INPUT] &&\n  //     maxAmountInput &&\n  //     parsedAmounts[Field.INPUT]?.greaterThan(maxAmountInput)\n  //   ) {\n  //     handleMaxInput();\n  //   }\n  // }, [handleMaxInput, parsedAmounts, maxAmountInput, doArcher]);\n\n  const swapIsUnsupported = useIsSwapUnsupported(currencies?.INPUT, currencies?.OUTPUT)\n\n  const priceImpactTooHigh = priceImpactSeverity > 3 && !isExpertMode\n\n  const [animateSwapArrows, setAnimateSwapArrows] = useState<boolean>(false)\n\n  const previousChainId = usePrevious<ChainId>(chainId)\n\n  // useEffect(() => {\n  //   if (\n  //     previousChainId &&\n  //     previousChainId !== chainId &&\n  //     router.asPath.includes(Currency.getNativeCurrencySymbol(previousChainId))\n  //   ) {\n  //     router.push(`/swap/${Currency.getNativeCurrencySymbol(chainId)}`);\n  //   }\n  // }, [chainId, previousChainId, router]);\n\n  return (\n    <Container id=\"swap-page\" className=\"py-4 md:py-8 lg:py-12\">\n      <Head>\n        <title>{GetRateText({price: trade?.executionPrice, showInverted}) || i18n._(t`MISTswap`)} | MISTswap</title>\n        <meta\n          key=\"description\"\n          name=\"description\"\n          content=\"MISTswap allows for swapping of SEP20 compatible tokens\"\n        />\n      </Head>\n      <TokenWarningModal\n        isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\n        tokens={importTokensNotInDefault}\n        onConfirm={handleConfirmTokenWarning}\n      />\n      <DoubleGlowShadow>\n        <div className=\"p-4 space-y-4 rounded bg-dark-900 z-1\">\n          <SwapHeader\n            input={currencies[Field.INPUT]}\n            output={currencies[Field.OUTPUT]}\n            allowedSlippage={allowedSlippage}\n          />\n\n          <ConfirmSwapModal\n            isOpen={showConfirm}\n            trade={trade}\n            originalTrade={tradeToConfirm}\n            onAcceptChanges={handleAcceptChanges}\n            attemptingTxn={attemptingTxn}\n            txHash={txHash}\n            recipient={recipient}\n            allowedSlippage={allowedSlippage}\n            onConfirm={handleSwap}\n            swapErrorMessage={swapErrorMessage}\n            onDismiss={handleConfirmDismiss}\n            minerBribe={doArcher ? archerETHTip : undefined}\n          />\n          <div>\n            <CurrencyInputPanel\n              // priceImpact={priceImpact}\n              label={\n                independentField === Field.OUTPUT && !showWrap ? i18n._(t`Swap From (est.):`) : i18n._(t`Swap From:`)\n              }\n              value={formattedAmounts[Field.INPUT]}\n              showMaxButton={showMaxButton}\n              currency={currencies[Field.INPUT]}\n              onUserInput={handleTypeInput}\n              onMax={handleMaxInput}\n              fiatValue={fiatValueInput ?? undefined}\n              onCurrencySelect={handleInputSelect}\n              otherCurrency={currencies[Field.OUTPUT]}\n              showCommonBases={true}\n              id=\"swap-currency-input\"\n            />\n            <AutoColumn justify=\"space-between\" className=\"py-3\">\n              <div\n                className={classNames(isExpertMode ? 'justify-between' : 'flex-start', 'px-4 flex-wrap w-full flex')}\n              >\n                <button\n                  className=\"z-10 -mt-6 -mb-6 rounded-full\"\n                  onClick={() => {\n                    setApprovalSubmitted(false) // reset 2 step UI for approvals\n                    onSwitchTokens()\n                  }}\n                >\n                  <div className=\"rounded-full bg-dark-900 p-3px\">\n                    <div\n                      className=\"p-3 rounded-full bg-dark-800 hover:bg-dark-700\"\n                      onMouseEnter={() => setAnimateSwapArrows(true)}\n                      onMouseLeave={() => setAnimateSwapArrows(false)}\n                    >\n                      <Lottie\n                        animationData={swapArrowsAnimationData}\n                        autoplay={animateSwapArrows}\n                        loop={false}\n                        style={{ width: 32, height: 32 }}\n                      />\n                    </div>\n                  </div>\n                </button>\n                {isExpertMode ? (\n                  recipient === null && !showWrap ? (\n                    <Button variant=\"link\" size=\"none\" id=\"add-recipient-button\" onClick={() => onChangeRecipient('')}>\n                      + Add recipient (optional)\n                    </Button>\n                  ) : (\n                    <Button\n                      variant=\"link\"\n                      size=\"none\"\n                      id=\"remove-recipient-button\"\n                      onClick={() => onChangeRecipient(null)}\n                    >\n                      - {i18n._(t`Remove recipient`)}\n                    </Button>\n                  )\n                ) : null}\n              </div>\n            </AutoColumn>\n\n            <div>\n              <CurrencyInputPanel\n                value={formattedAmounts[Field.OUTPUT]}\n                onUserInput={handleTypeOutput}\n                label={independentField === Field.INPUT && !showWrap ? i18n._(t`Swap To (est.):`) : i18n._(t`Swap To:`)}\n                showMaxButton={false}\n                hideBalance={false}\n                fiatValue={fiatValueOutput ?? undefined}\n                priceImpact={priceImpact}\n                currency={currencies[Field.OUTPUT]}\n                onCurrencySelect={handleOutputSelect}\n                otherCurrency={currencies[Field.INPUT]}\n                showCommonBases={true}\n                id=\"swap-currency-output\"\n              />\n              {Boolean(trade) && (\n                <div className=\"p-1 -mt-2 cursor-pointer rounded-b-md bg-dark-800\">\n                  <TradePrice\n                    price={trade?.executionPrice}\n                    showInverted={showInverted}\n                    setShowInverted={setShowInverted}\n                    className=\"bg-dark-900\"\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {recipient !== null && !showWrap && (\n            <>\n              <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n              {recipient !== account && (\n                <Alert\n                  type=\"warning\"\n                  dismissable={false}\n                  showIcon\n                  message={i18n._(\n                    t`Please note that the recipient address is different from the connected wallet address.`\n                  )}\n                />\n              )}\n            </>\n          )}\n\n          {/* {showWrap ? null : (\n            <div\n              style={{\n                padding: showWrap ? '.25rem 1rem 0 1rem' : '0px',\n              }}\n            >\n              <div className=\"px-5 mt-1\">{doArcher && userHasSpecifiedInputOutput && <MinerTip />}</div>\n            </div>\n          )} */}\n          {/*\n          {trade && (\n            <div className=\"p-5 rounded bg-dark-800\">\n              <AdvancedSwapDetails trade={trade} allowedSlippage={allowedSlippage} />\n            </div>\n          )} */}\n\n          <BottomGrouping>\n            {swapIsUnsupported ? (\n              <Button color=\"red\" size=\"lg\" disabled>\n                {i18n._(t`Unsupported Asset`)}\n              </Button>\n            ) : !account ? (\n              <Web3Connect size=\"lg\" color=\"blue\" className=\"w-full\" />\n            ) : showWrap ? (\n              <Button color=\"gradient\" size=\"lg\" disabled={Boolean(wrapInputError)} onClick={onWrap}>\n                {wrapInputError ??\n                  (wrapType === WrapType.WRAP\n                    ? i18n._(t`Wrap`)\n                    : wrapType === WrapType.UNWRAP\n                    ? i18n._(t`Unwrap`)\n                    : null)}\n              </Button>\n            ) : routeNotFound && userHasSpecifiedInputOutput ? (\n              <div style={{ textAlign: 'center' }}>\n                <div className=\"mb-1\">{i18n._(t`Insufficient liquidity for this trade`)}</div>\n                {singleHopOnly && <div className=\"mb-1\">{i18n._(t`Try enabling multi-hop trades`)}</div>}\n              </div>\n            ) : showApproveFlow ? (\n              <div>\n                {approvalState !== ApprovalState.APPROVED && (\n                  <ButtonConfirmed\n                    onClick={handleApprove}\n                    disabled={approvalState !== ApprovalState.NOT_APPROVED || approvalSubmitted}\n                    size=\"lg\"\n                  >\n                    {approvalState === ApprovalState.PENDING ? (\n                      <div className=\"flex items-center justify-center h-full space-x-2\">\n                        <div>Approving</div>\n                        <Loader stroke=\"white\" />\n                      </div>\n                    ) : (\n                      i18n._(t`Approve ${currencies[Field.INPUT]?.symbol}`)\n                    )}\n                  </ButtonConfirmed>\n                )}\n                {approvalState === ApprovalState.APPROVED && (\n                  <ButtonError\n                    onClick={() => {\n                      if (isExpertMode) {\n                        handleSwap()\n                      } else {\n                        setSwapState({\n                          tradeToConfirm: trade,\n                          attemptingTxn: false,\n                          swapErrorMessage: undefined,\n                          showConfirm: true,\n                          txHash: undefined,\n                        })\n                      }\n                    }}\n                    style={{\n                      width: '100%',\n                    }}\n                    id=\"swap-button\"\n                    disabled={\n                      !isValid || approvalState !== ApprovalState.APPROVED || (priceImpactSeverity > 3 && !isExpertMode)\n                    }\n                    error={isValid && priceImpactSeverity > 2}\n                  >\n                    {priceImpactSeverity > 3 && !isExpertMode\n                      ? i18n._(t`Price Impact High`)\n                      : priceImpactSeverity > 2\n                      ? i18n._(t`Swap Anyway`)\n                      : i18n._(t`Swap`)}\n                  </ButtonError>\n                )}\n              </div>\n            ) : (\n              <ButtonError\n                onClick={() => {\n                  if (isExpertMode) {\n                    handleSwap()\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined,\n                    })\n                  }\n                }}\n                id=\"swap-button\"\n                disabled={!isValid || (priceImpactSeverity > 3 && !isExpertMode) || !!swapCallbackError}\n                error={isValid && priceImpactSeverity > 2 && !swapCallbackError}\n              >\n                {swapInputError\n                  ? swapInputError\n                  : priceImpactSeverity > 3 && !isExpertMode\n                  ? i18n._(t`Price Impact Too High`)\n                  : priceImpactSeverity > 2\n                  ? i18n._(t`Swap Anyway`)\n                  : i18n._(t`Swap`)}\n              </ButtonError>\n            )}\n            {showApproveFlow && (\n              <Column style={{ marginTop: '1rem' }}>\n                <ProgressSteps steps={[approvalState === ApprovalState.APPROVED]} />\n              </Column>\n            )}\n            {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n          </BottomGrouping>\n          {/* {!swapIsUnsupported ? (\n        <AdvancedSwapDetailsDropdown trade={trade} />\n      ) : (\n        <UnsupportedCurrencyFooter\n          show={swapIsUnsupported}\n          currencies={[currencies.INPUT, currencies.OUTPUT]}\n        />\n      )} */}\n\n          {!swapIsUnsupported ? null : (\n            <UnsupportedCurrencyFooter show={swapIsUnsupported} currencies={[currencies.INPUT, currencies.OUTPUT]} />\n          )}\n        </div>\n      </DoubleGlowShadow>\n    </Container>\n  )\n}\n","import { ALLOWED_PRICE_IMPACT_HIGH, PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN } from '../../../constants'\n\nimport { Percent } from '@mistswapdex/sdk'\n\n/**\n * Given the price impact, get user confirmation.\n *\n * @param priceImpactWithoutFee price impact of the trade without the fee.\n */\nexport default function confirmPriceImpactWithoutFee(priceImpactWithoutFee: Percent): boolean {\n  if (!priceImpactWithoutFee.lessThan(PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN)) {\n    return (\n      window.prompt(\n        `This swap has a price impact of at least ${PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN.toFixed(\n          0\n        )}%. Please type the word \"confirm\" to continue with this swap.`\n      ) === 'confirm'\n    )\n  } else if (!priceImpactWithoutFee.lessThan(ALLOWED_PRICE_IMPACT_HIGH)) {\n    return window.confirm(\n      `This swap has a price impact of at least ${ALLOWED_PRICE_IMPACT_HIGH.toFixed(\n        0\n      )}%. Please confirm that you would like to continue with this swap.`\n    )\n  }\n  return true\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/exchange/swap/[[...tokens]]\",\n      function () {\n        return require(\"private-next-pages/exchange/swap/[[...tokens]].tsx\");\n      }\n    ]);\n  "],"names":["id","value","onChange","i18n","useLingui","useENS","address","loading","handleInput","useCallback","input","withoutSpaces","replace","error","Boolean","length","className","_","onClick","onUserInput","TYPE","information","color","icon","width","height","viewBox","xmlns","path","fill","d","warning","fillRule","clipRule","Alert","title","message","type","showIcon","dismissable","useState","show","setShow","classNames","FiatValue","fiatValue","priceImpact","priceImpactClassName","useMemo","lessThan","severity","warningSeverity","toSignificant","groupSeparator","multiply","CurrencyInputPanel","onMax","showMaxButton","label","onCurrencySelect","currency","disableCurrencySelect","otherCurrency","showCommonBases","renderBalance","hideBalance","pair","hideInput","locked","customBalanceText","modalOpen","setModalOpen","account","useActiveWeb3React","selectedCurrencyBalance","useCurrencyBalance","undefined","handleDismissSearch","currency0","token0","currency1","token1","size","margin","CurrencyLogo","style","maxWidth","maxHeight","animationData","selectCoinAnimation","autoplay","loop","symbol","slice","Button","Input","val","formatCurrencyAmount","CurrencySearchModal","isOpen","onDismiss","selectedCurrency","otherSelectedCurrency","SEVERITY","FormattedPriceImpact","toFixed","SwapRoute","memo","trade","route","map","token","i","isLastItem","unwrappedToken","Fragment","displayName","DetailsFooter","styled","AddressText","theme","mediaWidth","upToSmall","UnsupportedCurrencyFooter","currencies","chainId","showDetails","setShowDetails","tokens","wrapped","unsupportedTokens","useUnsupportedTokens","padding","gap","Object","keys","includes","align","href","getExplorerLink","concat","variant","useIsArgentWallet","argentWalletDetector","useArgentWalletDetectorContract","inputs","call","useSingleCallResult","NEVER_RELOAD","result","useIsSwapUnsupported","currencyIn","currencyOut","isToken","useParsedQueryString","search","location","parse","parseArrays","ignoreQueryPrefix","V2_SWAP_DEFAULT_SLIPPAGE","Percent","ONE_TENTHS_PERCENT","useSwapSlippageTolerance","defaultSlippageTolerance","useUserSlippageToleranceWithDefault","TokenWarningModal","onConfirm","handleDismiss","window","handleCurrencySelect","BottomGrouping","Typography","clickable","css","red1","yellow2","text3","green1","SwapCallbackError","Slider","toHex","currencyAmount","quotient","toString","ArcherRouter","factoryAddress","options","etherIn","inputAmount","SmartBCH","ChainId","etherOut","outputAmount","invariant","ttl","ethTip","methodName","args","to","checksummedAddress","getAddress","validateAndParseAddress","recipient","amountInCurrency","maximumAmountIn","allowedSlippage","amountIn","amountOut","minimumAmountOut","deadline","Math","floor","Date","getTime","archerTrade","tradeType","TradeType","add","bigintIsh","hex","JSBI","ERC20_INTERFACE","Interface","constant","name","outputs","payable","stateMutability","approveAmountCalldata","amount","spender","Error","approveData","encodeFunctionData","data","useArgentWalletContract","isArgentWallet","useContract","ARGENT_WALLET_ABI","SwapCallbackState","useSwapCallArguments","recipientAddressOrName","signatureData","useArcher","library","recipientAddress","useTransactionDeadline","routerContract","useRouterContract","factoryContract","useFactoryContract","argentWalletContract","useUserArcherETHTip","archerETHTip","V2Trade","swapMethods","push","swapCallParameters","toNumber","CurrencyAmount","Router","feeOnTransfer","calldata","interface","swapErrorToUserReadableMessage","reason","originalError","indexOf","substr","console","useSwapState","useAppSelector","state","swap","BAD_RECIPIENT_ADDRESSES","FACTORY_ADDRESS","ROUTER_ADDRESS","involvesAddress","some","pairs","liquidityToken","parseCurrencyFromURLParameter","urlParam","valid","isAddress","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","Field","WrapType","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","useDefaultsFromURLSearch","dispatch","useAppDispatch","parsedQs","useExpertModeManager","expertMode","setResult","useEffect","parsed","inputCurrency","outputCurrency","eth","sushi","MIST_ADDRESS","currencyId","exactAmount","exactField","queryParametersToSwapState","replaceSwapState","typedValue","field","independentField","inputCurrencyId","outputCurrencyId","NOT_APPLICABLE","wrapType","SwapModalFooter","swapErrorMessage","disabledConfirm","disabled","AdvancedSwapDetails","minerBribe","realizedLPFee","realizedLpFeePercent","computeRealizedLPFeePercent","subtract","QuestionHelper","text","Row","divide","TradePrice","price","showInverted","setShowInverted","flipPrice","GetRateText","stroke","strokeLinecap","strokeLinejoin","strokeWidth","formattedPrice","invert","quoteCurrency","baseCurrency","labelInverted","SwapModalHeader","showAcceptChanges","onAcceptChanges","priceImpactSeverity","useUSDCValue","executionPrice","shortenAddress","ConfirmSwapModal","originalTrade","attemptingTxn","txHash","tradeA","tradeB","equals","equalTo","tradeMeaningfullyDiffers","modalHeader","modalBottom","pendingText","pendingText2","isNative","confirmationContent","topContent","bottomContent","TransactionConfirmationModal","hash","content","currencyToAdd","ProgressCircles","steps","rest","step","Swap","loadedUrlParams","useCurrency","loadedInputCurrency","loadedOutputCurrency","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","handleConfirmTokenWarning","defaultTokens","useAllTokens","importTokensNotInDefault","router","useNetworkModalToggle","useRouter","useWalletModalToggle","isExpertMode","useToggleSettingsMenu","useUserTransactionTTL","useUserArcherUseRelay","useUserArcherGasPrice","doArcher","inputError","useUserSingleHopOnly","singleHopOnly","recipientLookup","relevantTokenBalances","useCurrencyBalances","isExactIn","parsedAmount","tryParseAmount","bestTradeExactIn","useTradeExactIn","maxHops","bestTradeExactOut","useTradeExactOut","v2Trade","currencyBalances","formattedTo","balanceIn","swapCalls","setUserETHTip","useUserArcherGasEstimate","userGasEstimate","setUserGasEstimate","userGasPrice","useUserArcherTipManualOverride","userTipManualOverride","setUserTipManualOverride","DEFAULT_ARCHER_ETH_TIP","DEFAULT_ARCHER_GAS_ESTIMATE","Promise","all","tx","isZero","from","estimateGas","then","gasEstimate","catch","gasError","debug","callError","estimatedCalls","successfulEstimation","find","el","ix","list","useDerivedSwapInfo","swapInputError","wethContract","useWBCHContract","balance","addTransaction","useTransactionAdder","weth","WNATIVE","hasInputAmount","greaterThan","sufficientBalance","WRAP","execute","deposit","gasPrice","getGasPrice","txReceipt","summary","NATIVE","UNWRAP","withdraw","useWrapCallback","onWrap","wrapInputError","showWrap","useENSAddress","parsedAmounts","fiatValueInput","fiatValueOutput","computeFiatValuePriceImpact","onCurrencySelection","selectCurrency","onSwitchTokens","switchCurrencies","typeInput","onChangeRecipient","setRecipient","useSwapActionHandlers","isValid","dependentField","handleTypeInput","handleTypeOutput","showConfirm","tradeToConfirm","setSwapState","formattedAmounts","toExact","userHasSpecifiedInputOutput","routeNotFound","useApproveCallbackFromTrade","approvalState","approveCallback","handleApprove","approvalSubmitted","setApprovalSubmitted","ApprovalState","maxInputAmount","maxAmountSpend","archerRelayDeadline","useBlockNumber","EIP_1559_ACTIVATION_BLOCK","VALID","callback","bestCallOption","errorCalls","firstNoErrorCall","log","gasLimit","calculateGasMargin","getSigner","sendTransaction","response","inputSymbol","outputSymbol","base","withRecipient","code","postToRelay","rawTransaction","relayURI","ARCHER_RELAY_URI","body","JSON","stringify","method","fetch","headers","Authorization","process","env","NEXT_PUBLIC_ARCHER_API_KEY","res","status","statusText","isMetamask","provider","isMetaMask","fullTxPromise","getBlockNumber","blockNumber","populateTransaction","signedTxPromise","fullTx","chain","common","Common","hardfork","txParams","nonce","hexlify","hexPad","TransactionFactory","unsignedTx","getMessageToSign","request","params","signature","signatureParts","splitSignature","txWithSignature","_processSignature","v","arrayify","r","s","signedTx","serialize","signTransaction","keccak256","archer","BigNumber","finally","INVALID","LOADING","useSwapCallback","swapCallback","swapCallbackError","handleSwap","priceImpactWithoutFee","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","ALLOWED_PRICE_IMPACT_HIGH","confirm","prompt","executionPriceImpact","showApproveFlow","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","handleMaxInput","handleOutputSelect","swapIsUnsupported","INPUT","OUTPUT","animateSwapArrows","setAnimateSwapArrows","usePrevious","Container","DoubleGlowShadow","output","justify","onMouseEnter","onMouseLeave","swapArrowsAnimationData","AddressInputPanel","textAlign","Loader","Web3Connect","Column","marginTop","__NEXT_P"],"sourceRoot":""}