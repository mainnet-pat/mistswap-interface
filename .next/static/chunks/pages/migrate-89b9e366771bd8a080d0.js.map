{"version":3,"file":"static/chunks/pages/migrate-89b9e366771bd8a080d0.js","mappings":"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","sources":["webpack://_N_E/./src/components/Column/index.tsx","webpack://_N_E/./src/components/Input/Address/index.tsx","webpack://_N_E/./src/components/Input/Numeric/index.tsx","webpack://_N_E/./src/components/Input/Percent/index.tsx","webpack://_N_E/./src/components/Input/index.tsx","webpack://_N_E/./src/hooks/useENS.ts","webpack://_N_E/./src/hooks/useENSAddress.ts","webpack://_N_E/./src/pages/migrate/index.tsx","webpack://_N_E/?c1fb"],"sourcesContent":["import React, { FC } from 'react'\n\nimport { classNames } from '../../functions'\n\nexport const Column: FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, className, ...rest }) => (\n  <div className={classNames('flex flex-col justify-center', className)} {...rest}>\n    {children}\n  </div>\n)\n\nexport const ColumnCenter: FC<React.HTMLAttributes<HTMLDivElement>> = ({ children, ...rest }) => (\n  <Column className=\"items-center w-full\" {...rest}>\n    {children}\n  </Column>\n)\n\ninterface AutoColumnProps {\n  gap?: 'sm' | 'md' | 'lg' | string\n  justify?: 'stretch' | 'center' | 'start' | 'end' | 'flex-start' | 'flex-end' | 'space-between'\n}\n\nexport const AutoColumn: FC<React.HTMLAttributes<HTMLDivElement> & AutoColumnProps> = ({\n  children,\n  className,\n  gap,\n  justify,\n  style,\n  ...rest\n}) => (\n  <div\n    className={classNames('grid', className)}\n    style={{\n      gridRowGap: (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap,\n      justifyItems: justify && justify,\n      ...style,\n    }}\n    {...rest}\n  >\n    {children}\n  </div>\n)\n\nexport default Column\n","import { classNames, escapeRegExp } from '../../../functions'\n\nimport React from 'react'\nimport useENS from '../../../hooks/useENS'\n\nconst inputRegex = RegExp(`^\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const AddressInput = React.memo(\n  ({\n    value,\n    onUserInput,\n    placeholder,\n    className = 'flex w-full h-full p-3 font-bold rounded overflow-ellipsis recipient-address-input bg-dark-900 placeholder-low-emphesis',\n    align,\n    fontSize = '24px',\n    ...rest\n  }: {\n    value: string\n    onUserInput: (input: string) => void\n    error?: boolean\n    fontSize?: string\n    align?: 'right' | 'left'\n  } & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) => {\n    const { address, loading } = useENS(value)\n\n    const enforcer = (nextUserInput: string) => {\n      onUserInput(nextUserInput)\n    }\n\n    return (\n      <>\n        <input\n          value={value}\n          onChange={(event) => {\n            enforcer(event.target.value.replace(/\\s+/g, ''))\n          }}\n          // universal input options\n          inputMode=\"text\"\n          title=\"Wallet Address or ENS name\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          placeholder=\"Wallet Address or ENS name\"\n          pattern=\"^(0x[a-fA-F0-9]{40})$\"\n          // text-specific options\n          type=\"text\"\n          className={classNames(\n            align === 'right' && 'text-right',\n            'font-medium bg-transparent whitespace-nowrap overflow-ellipsis flex-auto',\n            className\n          )}\n          style={{ fontSize }}\n          {...rest}\n        />\n      </>\n    )\n  }\n)\n\nAddressInput.displayName = 'AddressInput'\n\nexport default AddressInput\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n","import { classNames, escapeRegExp } from '../../../functions'\n\nimport React from 'react'\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nconst defaultClassName = 'w-0 p-0 text-2xl bg-transparent'\n\nexport const Input = React.memo(\n  ({\n    value,\n    onUserInput,\n    placeholder,\n    className = defaultClassName,\n    ...rest\n  }: {\n    value: string | number\n    onUserInput: (input: string) => void\n    error?: boolean\n    fontSize?: string\n    align?: 'right' | 'left'\n  } & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) => {\n    const enforcer = (nextUserInput: string) => {\n      if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n        onUserInput(nextUserInput)\n      }\n    }\n\n    return (\n      <input\n        {...rest}\n        value={value}\n        onChange={(event) => {\n          // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n          enforcer(event.target.value.replace(/,/g, '.'))\n        }}\n        // universal input options\n        inputMode=\"decimal\"\n        title=\"Token Amount\"\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        // text-specific options\n        type=\"text\"\n        pattern=\"^[0-9]*[.,]?[0-9]*$\"\n        placeholder={placeholder || '0.0'}\n        min={0}\n        minLength={1}\n        maxLength={79}\n        spellCheck=\"false\"\n        className={classNames(\n          'relative font-bold outline-none border-none flex-auto overflow-hidden overflow-ellipsis placeholder-low-emphesis focus:placeholder-primary',\n          className\n        )}\n      />\n    )\n  }\n)\n\nInput.displayName = 'NumericalInput'\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n","import { classNames, escapeRegExp } from '../../../functions'\n\nimport React from 'react'\n\nconst inputRegex = RegExp(`^\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(\n  ({\n    value,\n    onUserInput,\n    placeholder,\n    className,\n    align,\n    fontSize = '24px',\n    ...rest\n  }: {\n    value: string | number\n    onUserInput: (input: string) => void\n    error?: boolean\n    fontSize?: string\n    align?: 'right' | 'left'\n  } & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) => {\n    const enforcer = (nextUserInput: string) => {\n      if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n        if (Number(nextUserInput) <= 100) {\n          onUserInput(nextUserInput)\n        }\n      }\n    }\n\n    return (\n      <>\n        <input\n          value={value}\n          onChange={(event) => {\n            // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n            enforcer(event.target.value.replace(/,/g, '.').replace(/%/g, ''))\n          }}\n          // universal input options\n          inputMode=\"decimal\"\n          title=\"Token Amount\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          // text-specific options\n          type=\"text\"\n          pattern=\"^[0-9]*$\"\n          placeholder={placeholder || '100'}\n          maxLength={3}\n          className={classNames(\n            align === 'right' && 'text-right',\n            'relative font-medium bg-transparent whitespace-nowrap overflow-ellipsis flex-auto percent-translate',\n            className\n          )}\n          style={{ fontSize }}\n          {...rest}\n        />\n      </>\n    )\n  }\n)\n\nInput.displayName = 'PercentInput'\n\nexport default Input\n","import Address from './Address'\nimport Numeric from './Numeric'\nimport Percent from './Percent'\n\nconst Input = {\n  Address,\n  Percent,\n  Numeric,\n}\n\nexport default Input\n","import { isAddress } from '../functions/validate'\nimport useENSAddress from './useENSAddress'\nimport useENSName from './useENSName'\n\n/**\n * Given a name or address, does a lookup to resolve to an address and name\n * @param nameOrAddress ENS name or address\n */\nexport default function useENS(nameOrAddress?: string | null): {\n  loading: boolean\n  address: string | null\n  name: string | null\n} {\n  const validated = isAddress(nameOrAddress)\n  const reverseLookup = useENSName(validated ? validated : undefined)\n  const lookup = useENSAddress(nameOrAddress)\n\n  return {\n    loading: reverseLookup.loading || lookup.loading,\n    address: validated ? validated : lookup.address,\n    name: reverseLookup.ENSName ? reverseLookup.ENSName : !validated && lookup.address ? nameOrAddress || null : null,\n  }\n}\n","import { useENSRegistrarContract, useENSResolverContract } from './useContract'\n\nimport { isZero } from '../functions'\nimport { namehash } from '@ethersproject/hash'\nimport useDebounce from './useDebounce'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\n/**\n * Does a lookup for an ENS name to find its address.\n */\nexport default function useENSAddress(ensName?: string | null): {\n  loading: boolean\n  address: string | null\n} {\n  const debouncedName = useDebounce(ensName, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedName) return [undefined]\n    try {\n      return debouncedName ? [namehash(debouncedName)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\n\n  const changed = debouncedName !== ensName\n  return {\n    address: changed ? null : addr.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || addr.loading,\n  }\n}\n","import { AddressZero } from '@ethersproject/constants'\nimport { formatUnits, parseUnits } from '@ethersproject/units'\nimport { ChainId, Token, CurrencyAmount, JSBI } from '@mistswapdex/sdk'\nimport { useSushiRollContract } from '../../hooks/useContract'\nimport { useLingui } from '@lingui/react'\nimport { t } from '@lingui/macro'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { ChevronRight } from 'react-feather'\nimport styled from 'styled-components'\nimport Button from '../../components/Button'\nimport { ButtonConfirmed } from '../../components/Button'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport Input from '../../components/Input'\nimport QuestionHelper from '../../components/QuestionHelper'\nimport Dots from '../../components/Dots'\nimport { useActiveWeb3React } from '../../hooks'\nimport { tryParseAmount } from '../../functions/parse'\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport useMigrateState, { MigrateState } from '../../hooks/useMigrateState'\nimport CloseIcon from '../../components/CloseIcon';\n// import LPToken from '../../types/LPToken'\n// import MetamaskError from '../../types/MetamaskError'\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport Typography from '../../components/Typography'\nimport Badge from '../../components/Badge'\nimport Container from '../../components/Container'\nimport { AutoColumn } from '../../components/Column'\n\nconst ZERO = JSBI.BigInt(0)\n\nconst StyledNumericalInput = styled(Input.Numeric)`\n  caret-color: #e3e3e3;\n`\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    /*\n    const { i18n } = useLingui()\n    const onPressMax = useCallback(() => {\n        if (state.selectedLPToken) {\n            let bal = state.selectedLPToken.balance as CurrencyAmount<Token>\n            if (state.selectedLPToken.address === AddressZero) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16))\n                bal = bal.greaterThan(fee) ? bal.subtract(fee) : ZERO\n            }\n\n            state.setAmount(bal.toFixed())\n        }\n    }, [state])\n\n    useEffect(() => {\n        if (!state.mode || state.lpTokens.length === 0 || !state.selectedLPToken) {\n            state.setAmount('')\n        }\n    }, [state])\n\n    if (!state.mode || state.lpTokens.length === 0 || !state.selectedLPToken) {\n        return null\n    }\n\n    const input = state.amount ? state.amount : ''\n\n    const formattedBalance = state.selectedLPToken.balance.toSignificant(4)\n\n    const parsedAmount = tryParseAmount(input, state.selectedLPToken)\n\n    const insufficientAmount = (input && input === '0') || parsedAmount && parsedAmount.greaterThan(state.selectedLPToken.balance)\n    const inputError = insufficientAmount\n\n    return (\n        <>\n            <Typography variant=\"caption\" className=\"text-secondary\">\n                Amount of Tokens\n            </Typography>\n\n            <div className=\"flex items-center relative w-full mb-4\">\n              <div className=\"w-full\">\n                <StyledNumericalInput\n                  value={input}\n                  onUserInput={val => state.setAmount(val)}\n                  className={`w-full h-14 px-3 md:px-5 mt-5 rounded bg-dark-800 text-sm md:text-lg font-bold text-dark-800 whitespace-nowrap${\n                    inputError ? ' pl-9 md:pl-12' : ''\n                  }`}\n                  placeholder=\" \"\n                />\n                <div className=\"relative w-full h-0 pointer-events-none bottom-14\">\n                  <div\n                    className={`flex justify-between items-center h-14 rounded px-3 md:px-5 ${\n                      inputError ? ' border border-red' : ''\n                    }`}\n                  >\n                    <div className=\"flex space-x-2 \">\n                      {inputError && (\n                        <Image\n                          className=\"mr-2 max-w-4 md:max-w-5\"\n                          src=\"/error-triangle.svg\"\n                          alt=\"error\"\n                          width=\"20px\"\n                          height=\"20px\"\n                        />\n                      )}\n                      <p\n                        className={`text-sm md:text-lg font-bold whitespace-nowrap ${\n                          input ? 'text-high-emphesis' : 'text-secondary'\n                        }`}\n                      >\n                        {`${input ? input : '0'} LP`}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center text-sm text-secondary md:text-base\">\n                      <div className={input ? 'hidden md:flex md:items-center' : 'flex items-center'}>\n                        <p>{i18n._(t`Balance`)}:&nbsp;</p>\n                        <p className=\"text-base font-bold\">{formattedBalance}</p>\n                      </div>\n                      <button\n                        className=\"px-2 py-1 ml-3 text-xs font-bold border pointer-events-auto focus:outline-none focus:ring hover:bg-opacity-40 md:bg-cyan-blue md:bg-opacity-30 border-secondary md:border-cyan-blue rounded-2xl md:py-1 md:px-3 md:ml-4 md:text-sm md:font-normal md:text-cyan-blue\"\n                        onClick={onPressMax}\n                      >\n                        {i18n._(t`MAX`)}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n        </>\n    )\n    */\n\n   return (\n     <>\n        <div>\n        </div>\n     </>\n   )\n}\n\ninterface PositionCardProps {\n    lpToken: any /* LPToken */\n    onToggle: (lpToken: any /* LPToken */) => void\n    isSelected: boolean\n    updating: boolean\n    exchange: string | undefined\n}\n\nconst LPTokenSelect = ({ lpToken, onToggle, isSelected, updating, exchange }: PositionCardProps) => {\n    /*\n    return (\n        <div\n            key={lpToken.address}\n            className=\"cursor-pointer flex justify-between items-center rounded px-3 py-5 bg-dark-800 hover:bg-dark-700\"\n            onClick={() => onToggle(lpToken)}\n        >\n            <div className=\"flex items-center space-x-3\">\n                <DoubleCurrencyLogo currency0={lpToken.tokenA} currency1={lpToken.tokenB} size={20} />\n                <Typography\n                    variant=\"body\"\n                    className=\"text-primary\"\n                >{`${lpToken.tokenA.symbol}/${lpToken.tokenB.symbol}`}</Typography>\n                {lpToken.version && <Badge color=\"pink\">{lpToken.version}</Badge>}\n            </div>\n            {isSelected ? <CloseIcon /> : <ChevronRight />}\n        </div>\n    )\n    */\n   return (\n       <div>\n       </div>\n   )\n}\n\nconst MigrateModeSelect = ({ state }: { state: MigrateState }) => {\n    /*\n    function toggleMode(mode = undefined) {\n        state.setMode(mode !== state.mode ? mode : undefined)\n    }\n\n    const items = [\n        {\n            key: 'permit',\n            text: 'Non-hardware Wallet',\n            description: 'Migration is done in one-click using your signature (permit)'\n        },\n        {\n            key: 'approve',\n            text: 'Hardware Wallet',\n            description: 'You need to first approve LP tokens and then migrate it'\n        }\n    ]\n\n    return (\n        <>\n            {items.reduce((acc: any, { key, text, description }: any) => {\n                if (state.mode === undefined || key === state.mode)\n                    acc.push(\n                        <div\n                            key={key}\n                            className=\"cursor-pointer flex justify-between items-center rounded p-3 bg-dark-800 hover:bg-dark-700\"\n                            onClick={() => toggleMode(key)}\n                        >\n                            <div>\n                                <div>\n                                    <Typography variant=\"caption\">{text}</Typography>\n                                </div>\n                                <div>\n                                    <Typography variant=\"caption2\" className=\"text-secondary\">\n                                        {description}\n                                    </Typography>\n                                </div>\n                            </div>\n                            {key === state.mode ? <CloseIcon /> : <ChevronRight />}\n                        </div>\n                    )\n                return acc\n            }, [])}\n        </>\n    )\n    */\n   return (\n     <>\n        <div>\n        </div>\n    </>\n   )\n}\n\nconst MigrateButtons = ({ state, exchange }: { state: MigrateState; exchange: string | undefined }) => {\n    /*\n    const [error, setError] = useState<MetamaskError>({})\n    const sushiRollContract = useSushiRollContract(\n        state.selectedLPToken?.version ? state.selectedLPToken?.version : undefined\n    )\n\n    const [approval, approve] = useApproveCallback(state.selectedLPToken?.balance, sushiRollContract?.address)\n    const noLiquidityTokens = !!state.selectedLPToken?.balance && state.selectedLPToken?.balance.equalTo(ZERO)\n    const isButtonDisabled = !state.amount\n\n    useEffect(() => {\n        setError({})\n    }, [state.selectedLPToken])\n\n    if (!state.mode || state.lpTokens.length === 0 || !state.selectedLPToken) {\n        return <span />\n    }\n\n    const input = state.amount ? state.amount : ''\n\n    const formattedBalance = state.selectedLPToken.balance.toSignificant(4)\n\n    const parsedAmount = tryParseAmount(input, state.selectedLPToken)\n\n    const insufficientAmount = parsedAmount && parsedAmount.greaterThan(state.selectedLPToken.balance)\n    const inputError = insufficientAmount\n\n    const onPress = async () => {\n        setError({})\n        try {\n            await state.onMigrate()\n        } catch (e) {\n            console.log(e)\n            setError(e)\n        }\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            {insufficientAmount ? (\n                <div className=\"text-sm text-primary\">Insufficient Balance</div>\n            ) : state.loading ? (\n                <Dots>Loading</Dots>\n            ) : (\n                <>\n                    <div className=\"flex justify-between\">\n                        <div className=\"text-sm text-secondary\">\n                            Balance:{' '}\n                            <span className=\"text-primary\">{formattedBalance}</span>\n                        </div>\n                    </div>\n                    {state.mode === 'approve' && (\n                        <ButtonConfirmed\n                            onClick={approve}\n                            confirmed={approval === ApprovalState.APPROVED}\n                            disabled={approval !== ApprovalState.NOT_APPROVED || isButtonDisabled}\n                            altDisabledStyle={approval === ApprovalState.PENDING}\n                        >\n                            {approval === ApprovalState.PENDING ? (\n                                <Dots>Approving</Dots>\n                            ) : approval === ApprovalState.APPROVED ? (\n                                'Approved'\n                            ) : (\n                                'Approve'\n                            )}\n                        </ButtonConfirmed>\n                    )}\n                    {((state.mode === 'approve' && approval === ApprovalState.APPROVED) || state.mode === 'permit') && (\n                        <ButtonConfirmed\n                            disabled={noLiquidityTokens || state.isMigrationPending || isButtonDisabled}\n                            onClick={onPress}\n                        >\n                            {state.isMigrationPending ? <Dots>Migrating</Dots> : 'Migrate'}\n                        </ButtonConfirmed>\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && (\n                <div className=\"text-red text-center font-medium\">{error.message}</div>\n            )}\n            <div className=\"text-xs text-low-emphesis text-center\">\n                {`Your ${exchange} ${state.selectedLPToken.tokenA.symbol}/${state.selectedLPToken.tokenB.symbol} liquidity will become MistSwap ${state.selectedLPToken.tokenA.symbol}/${state.selectedLPToken.tokenB.symbol} liquidity.`}\n            </div>\n        </div>\n    )\n   */\n}\n\nconst ExchangeLiquidityPairs = ({ state, exchange }: { state: MigrateState; exchange: undefined | string }) => {\n    function onToggle(lpToken: any /* LPToken */) {\n        state.setSelectedLPToken(state.selectedLPToken !== lpToken ? lpToken : undefined)\n        state.setAmount('')\n    }\n\n    if (!state.mode) {\n        return null\n    }\n\n    if (state.lpTokens.length === 0) {\n        return (\n            <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n                <div className=\"font-medium\">\n                    No Liquidity found.\n                </div>\n            </AutoColumn>\n        )\n    }\n\n    return (\n        <>\n            {state.lpTokens.reduce<JSX.Element[]>((acc, lpToken) => {\n                if ((lpToken.balance as CurrencyAmount<Token>).greaterThan(0)) {\n                    acc.push(\n                        <LPTokenSelect\n                            lpToken={lpToken}\n                            onToggle={onToggle}\n                            isSelected={state.selectedLPToken === lpToken}\n                            updating={state.updatingLPTokens}\n                            exchange={exchange}\n                        />\n                    )\n                }\n                return acc\n            }, [])}\n        </>\n    )\n}\n\nexport default function MigrateV2() {\n  /*\n  const { i18n } = useLingui()\n  const { account, chainId } = useActiveWeb3React()\n\n  const state = useMigrateState()\n\n  let exchange\n\n  if (chainId === ChainId.SMARTBCH) {\n      exchange = 'BenSwap'\n  } else if (chainId === ChainId.SMARTBCH_AMBER) {\n      exchange = 'BenSwap Amber'\n  }\n\n  return (\n    <Container id=\"migrate-page\" className=\"py-4 space-y-6 md:py-8 lg:py-12\" maxWidth=\"2xl\">\n      <Head>\n          <title key=\"title\">Migrate LP tokens | Mist</title>\n          <meta\n            key=\"description\"\n            name=\"description\"\n            content=\"Migrate LP tokens to Mist LP tokens\"\n          />\n          <meta key=\"twitter:url\" name=\"twitter:url\" content=\"https://app.mistswap.fi/migrate\" />\n          <meta key=\"twitter:title\" name=\"twitter:title\" content=\"MIGRATE LP\" />\n          <meta\n            key=\"twitter:description\"\n            name=\"twitter:description\"\n            content=\"Migrate LP tokens to Mist LP tokens\"\n          />\n          <meta key=\"twitter:image\" name=\"twitter:image\" content=\"https://app.mistswap.fi/xmist-sign.png\" />\n          <meta key=\"og:title\" property=\"og:title\" content=\"MIGRATE LP\" />\n          <meta key=\"og:url\" property=\"og:url\" content=\"https://app.mistswap.fi/migrate\" />\n          <meta key=\"og:image\" property=\"og:image\" content=\"https://app.mistswap.fi/xmist-sign.png\" />\n          <meta\n            key=\"og:description\"\n            property=\"og:description\"\n            content=\"Migrate LP tokens to Mist LP tokens\"\n          />\n      </Head>\n\n      <div className=\"p-4 mb-3 space-y-3 text-center\">\n        <Typography component=\"h1\" variant=\"h2\">\n          Migrate {exchange} Liquidity\n        </Typography>\n      </div>\n\n\n      <div className=\"p-4 space-y-4 rounded bg-dark-900\">\n          {!account ? (\n              <Typography variant=\"body\" className=\"text-primary text-center p-4\">\n                  Connect to a wallet to view your liquidity.\n              </Typography>\n          ) : state.loading ? (\n              <Typography variant=\"body\" className=\"text-primary text-center p-4\">\n                  <Dots>Loading your {exchange} liquidity positions</Dots>\n              </Typography>\n          ) : (\n              <>\n                  {!state.loading && <Typography variant=\"body\">Your Wallet</Typography>}\n                  <MigrateModeSelect state={state} />\n                  {!state.loading && state.mode && (\n                      <div>\n                          <Typography variant=\"body\">Your Liquidity</Typography>\n                          <Typography variant=\"caption\" className=\"text-secondary\">\n                              Click on a pool below, input the amount you wish to migrate or select max, and click\n                              migrate.\n                          </Typography>\n                      </div>\n                  )}\n\n                  <ExchangeLiquidityPairs state={state} exchange={exchange} />\n                  <AmountInput state={state} />\n                  <MigrateButtons state={state} exchange={exchange} />\n              </>\n          )}\n      </div>\n    </Container>\n  )\n  */\n  return (\n    <div>\n    </div>\n  )\n\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/migrate\",\n      function () {\n        return require(\"private-next-pages/migrate/index.tsx\");\n      }\n    ]);\n  "],"names":["Column","children","className","rest","classNames","AutoColumn","gap","justify","style","gridRowGap","justifyItems","RegExp","AddressInput","React","value","onUserInput","placeholder","align","fontSize","useENS","address","loading","onChange","event","nextUserInput","target","replace","inputMode","title","autoComplete","autoCorrect","autoCapitalize","spellCheck","pattern","type","displayName","inputRegex","Input","test","escapeRegExp","min","minLength","maxLength","Number","Address","Percent","Numeric","nameOrAddress","validated","isAddress","reverseLookup","useENSName","undefined","lookup","useENSAddress","name","ENSName","ensName","debouncedName","useDebounce","ensNodeArgument","useMemo","namehash","error","registrarContract","useENSRegistrarContract","resolverAddress","useSingleCallResult","resolverAddressResult","result","resolverContract","useENSResolverContract","isZero","addr","changed","JSBI","styled","MigrateV2","window","__NEXT_P","push"],"sourceRoot":""}